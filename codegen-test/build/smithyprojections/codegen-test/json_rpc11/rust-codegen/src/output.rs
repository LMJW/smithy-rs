// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::EmptyStruct;
use crate::model::FooEnum;
use crate::model::KitchenSink;
use crate::model::MyUnion;
use crate::model::SimpleStruct;
use crate::model::StructWithLocationName;
use smithy_types::Blob;
use smithy_types::Document;
use smithy_types::Instant;
/// A shared structure that contains a single union member.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonUnionsOutput {
    /// A union with a representative set of types for members.
    pub contents: ::std::option::Option<MyUnion>,
}
/// See [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
pub mod json_unions_output {

    use crate::model::MyUnion;
    use crate::output::JsonUnionsOutput;
    /// A builder for [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        contents: ::std::option::Option<MyUnion>,
    }
    impl Builder {
        /// A union with a representative set of types for members.
        pub fn contents(mut self, inp: MyUnion) -> Self {
            self.contents = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
        pub fn build(self) -> JsonUnionsOutput {
            JsonUnionsOutput {
                contents: self.contents,
            }
        }
    }
}
impl JsonUnionsOutput {
    /// Creates a new builder-style object to manufacture [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    pub fn builder() -> crate::output::json_unions_output::Builder {
        crate::output::json_unions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GreetingWithErrorsOutput {
    pub greeting: ::std::option::Option<::std::string::String>,
}
/// See [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
pub mod greeting_with_errors_output {

    use crate::output::GreetingWithErrorsOutput;
    /// A builder for [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        greeting: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn greeting(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.greeting = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
        pub fn build(self) -> GreetingWithErrorsOutput {
            GreetingWithErrorsOutput {
                greeting: self.greeting,
            }
        }
    }
}
impl GreetingWithErrorsOutput {
    /// Creates a new builder-style object to manufacture [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    pub fn builder() -> crate::output::greeting_with_errors_output::Builder {
        crate::output::greeting_with_errors_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NullOperationOutput {
    pub string: ::std::option::Option<::std::string::String>,
    pub sparse_string_list:
        ::std::option::Option<::std::vec::Vec<::std::option::Option<::std::string::String>>>,
    pub sparse_string_map: ::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::option::Option<::std::string::String>,
        >,
    >,
}
/// See [`NullOperationOutput`](crate::output::NullOperationOutput)
pub mod null_operation_output {

    use crate::output::NullOperationOutput;
    /// A builder for [`NullOperationOutput`](crate::output::NullOperationOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        string: ::std::option::Option<::std::string::String>,
        sparse_string_list:
            ::std::option::Option<::std::vec::Vec<::std::option::Option<::std::string::String>>>,
        sparse_string_map: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<::std::string::String>,
            >,
        >,
    }
    impl Builder {
        pub fn string(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.string = Some(inp.into());
            self
        }
        pub fn sparse_string_list(
            mut self,
            inp: ::std::vec::Vec<::std::option::Option<::std::string::String>>,
        ) -> Self {
            self.sparse_string_list = Some(inp);
            self
        }
        pub fn sparse_string_map(
            mut self,
            inp: ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<::std::string::String>,
            >,
        ) -> Self {
            self.sparse_string_map = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`NullOperationOutput`](crate::output::NullOperationOutput)
        pub fn build(self) -> NullOperationOutput {
            NullOperationOutput {
                string: self.string,
                sparse_string_list: self.sparse_string_list,
                sparse_string_map: self.sparse_string_map,
            }
        }
    }
}
impl NullOperationOutput {
    /// Creates a new builder-style object to manufacture [`NullOperationOutput`](crate::output::NullOperationOutput)
    pub fn builder() -> crate::output::null_operation_output::Builder {
        crate::output::null_operation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonEnumsOutput {
    pub foo_enum1: ::std::option::Option<FooEnum>,
    pub foo_enum2: ::std::option::Option<FooEnum>,
    pub foo_enum3: ::std::option::Option<FooEnum>,
    pub foo_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
    pub foo_enum_set: ::std::option::Option<::std::collections::BTreeSet<FooEnum>>,
    pub foo_enum_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, FooEnum>>,
}
/// See [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
pub mod json_enums_output {

    use crate::model::FooEnum;
    use crate::output::JsonEnumsOutput;
    /// A builder for [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo_enum1: ::std::option::Option<FooEnum>,
        foo_enum2: ::std::option::Option<FooEnum>,
        foo_enum3: ::std::option::Option<FooEnum>,
        foo_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
        foo_enum_set: ::std::option::Option<::std::collections::BTreeSet<FooEnum>>,
        foo_enum_map:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, FooEnum>>,
    }
    impl Builder {
        pub fn foo_enum1(mut self, inp: FooEnum) -> Self {
            self.foo_enum1 = Some(inp);
            self
        }
        pub fn foo_enum2(mut self, inp: FooEnum) -> Self {
            self.foo_enum2 = Some(inp);
            self
        }
        pub fn foo_enum3(mut self, inp: FooEnum) -> Self {
            self.foo_enum3 = Some(inp);
            self
        }
        pub fn foo_enum_list(mut self, inp: ::std::vec::Vec<FooEnum>) -> Self {
            self.foo_enum_list = Some(inp);
            self
        }
        pub fn foo_enum_set(mut self, inp: ::std::collections::BTreeSet<FooEnum>) -> Self {
            self.foo_enum_set = Some(inp);
            self
        }
        pub fn foo_enum_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, FooEnum>,
        ) -> Self {
            self.foo_enum_map = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
        pub fn build(self) -> JsonEnumsOutput {
            JsonEnumsOutput {
                foo_enum1: self.foo_enum1,
                foo_enum2: self.foo_enum2,
                foo_enum3: self.foo_enum3,
                foo_enum_list: self.foo_enum_list,
                foo_enum_set: self.foo_enum_set,
                foo_enum_map: self.foo_enum_map,
            }
        }
    }
}
impl JsonEnumsOutput {
    /// Creates a new builder-style object to manufacture [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
    pub fn builder() -> crate::output::json_enums_output::Builder {
        crate::output::json_enums_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAndGetInlineDocumentsOutput {
    pub inline_document: Document,
}
/// See [`PutAndGetInlineDocumentsOutput`](crate::output::PutAndGetInlineDocumentsOutput)
pub mod put_and_get_inline_documents_output {

    use crate::output::PutAndGetInlineDocumentsOutput;
    use smithy_types::Document;
    /// A builder for [`PutAndGetInlineDocumentsOutput`](crate::output::PutAndGetInlineDocumentsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        inline_document: ::std::option::Option<Document>,
    }
    impl Builder {
        pub fn inline_document(mut self, inp: Document) -> Self {
            self.inline_document = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`PutAndGetInlineDocumentsOutput`](crate::output::PutAndGetInlineDocumentsOutput)
        pub fn build(self) -> Result<PutAndGetInlineDocumentsOutput, String> {
            Ok(PutAndGetInlineDocumentsOutput {
                inline_document: self.inline_document.ok_or(
                    "inline_document is required when building PutAndGetInlineDocumentsOutput",
                )?,
            })
        }
    }
}
impl PutAndGetInlineDocumentsOutput {
    /// Creates a new builder-style object to manufacture [`PutAndGetInlineDocumentsOutput`](crate::output::PutAndGetInlineDocumentsOutput)
    pub fn builder() -> crate::output::put_and_get_inline_documents_output::Builder {
        crate::output::put_and_get_inline_documents_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OperationWithOptionalInputOutputOutput {
    pub value: ::std::option::Option<::std::string::String>,
}
/// See [`OperationWithOptionalInputOutputOutput`](crate::output::OperationWithOptionalInputOutputOutput)
pub mod operation_with_optional_input_output_output {

    use crate::output::OperationWithOptionalInputOutputOutput;
    /// A builder for [`OperationWithOptionalInputOutputOutput`](crate::output::OperationWithOptionalInputOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        value: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn value(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.value = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`OperationWithOptionalInputOutputOutput`](crate::output::OperationWithOptionalInputOutputOutput)
        pub fn build(self) -> OperationWithOptionalInputOutputOutput {
            OperationWithOptionalInputOutputOutput { value: self.value }
        }
    }
}
impl OperationWithOptionalInputOutputOutput {
    /// Creates a new builder-style object to manufacture [`OperationWithOptionalInputOutputOutput`](crate::output::OperationWithOptionalInputOutputOutput)
    pub fn builder() -> crate::output::operation_with_optional_input_output_output::Builder {
        crate::output::operation_with_optional_input_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KitchenSinkOperationOutput {
    pub blob: ::std::option::Option<Blob>,
    pub boolean: ::std::option::Option<bool>,
    pub double: ::std::option::Option<f64>,
    pub empty_struct: ::std::option::Option<EmptyStruct>,
    pub float: ::std::option::Option<f32>,
    pub httpdate_timestamp: ::std::option::Option<Instant>,
    pub integer: ::std::option::Option<i32>,
    pub iso8601_timestamp: ::std::option::Option<Instant>,
    pub json_value: ::std::option::Option<::std::string::String>,
    pub list_of_lists:
        ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub list_of_maps_of_strings: ::std::option::Option<
        ::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    >,
    pub list_of_strings: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub list_of_structs: ::std::option::Option<::std::vec::Vec<SimpleStruct>>,
    pub long: ::std::option::Option<i64>,
    pub map_of_lists_of_strings: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
    >,
    pub map_of_maps: ::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
    >,
    pub map_of_strings: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    pub map_of_structs:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, SimpleStruct>>,
    pub recursive_list: ::std::option::Option<::std::vec::Vec<KitchenSink>>,
    pub recursive_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, KitchenSink>>,
    pub recursive_struct: ::std::option::Option<::std::boxed::Box<KitchenSink>>,
    pub simple_struct: ::std::option::Option<SimpleStruct>,
    pub string: ::std::option::Option<::std::string::String>,
    pub struct_with_location_name: ::std::option::Option<StructWithLocationName>,
    pub timestamp: ::std::option::Option<Instant>,
    pub unix_timestamp: ::std::option::Option<Instant>,
}
/// See [`KitchenSinkOperationOutput`](crate::output::KitchenSinkOperationOutput)
pub mod kitchen_sink_operation_output {

    use crate::model::EmptyStruct;
    use crate::model::KitchenSink;
    use crate::model::SimpleStruct;
    use crate::model::StructWithLocationName;
    use crate::output::KitchenSinkOperationOutput;
    use smithy_types::Blob;
    use smithy_types::Instant;
    /// A builder for [`KitchenSinkOperationOutput`](crate::output::KitchenSinkOperationOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        blob: ::std::option::Option<Blob>,
        boolean: ::std::option::Option<bool>,
        double: ::std::option::Option<f64>,
        empty_struct: ::std::option::Option<EmptyStruct>,
        float: ::std::option::Option<f32>,
        httpdate_timestamp: ::std::option::Option<Instant>,
        integer: ::std::option::Option<i32>,
        iso8601_timestamp: ::std::option::Option<Instant>,
        json_value: ::std::option::Option<::std::string::String>,
        list_of_lists:
            ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
        list_of_maps_of_strings: ::std::option::Option<
            ::std::vec::Vec<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
        >,
        list_of_strings: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        list_of_structs: ::std::option::Option<::std::vec::Vec<SimpleStruct>>,
        long: ::std::option::Option<i64>,
        map_of_lists_of_strings: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::vec::Vec<::std::string::String>,
            >,
        >,
        map_of_maps: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
        >,
        map_of_strings: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        map_of_structs:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, SimpleStruct>>,
        recursive_list: ::std::option::Option<::std::vec::Vec<KitchenSink>>,
        recursive_map:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, KitchenSink>>,
        recursive_struct: ::std::option::Option<::std::boxed::Box<KitchenSink>>,
        simple_struct: ::std::option::Option<SimpleStruct>,
        string: ::std::option::Option<::std::string::String>,
        struct_with_location_name: ::std::option::Option<StructWithLocationName>,
        timestamp: ::std::option::Option<Instant>,
        unix_timestamp: ::std::option::Option<Instant>,
    }
    impl Builder {
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        pub fn boolean(mut self, inp: bool) -> Self {
            self.boolean = Some(inp);
            self
        }
        pub fn double(mut self, inp: f64) -> Self {
            self.double = Some(inp);
            self
        }
        pub fn empty_struct(mut self, inp: EmptyStruct) -> Self {
            self.empty_struct = Some(inp);
            self
        }
        pub fn float(mut self, inp: f32) -> Self {
            self.float = Some(inp);
            self
        }
        pub fn httpdate_timestamp(mut self, inp: Instant) -> Self {
            self.httpdate_timestamp = Some(inp);
            self
        }
        pub fn integer(mut self, inp: i32) -> Self {
            self.integer = Some(inp);
            self
        }
        pub fn iso8601_timestamp(mut self, inp: Instant) -> Self {
            self.iso8601_timestamp = Some(inp);
            self
        }
        pub fn json_value(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.json_value = Some(inp.into());
            self
        }
        pub fn list_of_lists(
            mut self,
            inp: ::std::vec::Vec<::std::vec::Vec<::std::string::String>>,
        ) -> Self {
            self.list_of_lists = Some(inp);
            self
        }
        pub fn list_of_maps_of_strings(
            mut self,
            inp: ::std::vec::Vec<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
        ) -> Self {
            self.list_of_maps_of_strings = Some(inp);
            self
        }
        pub fn list_of_strings(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.list_of_strings = Some(inp);
            self
        }
        pub fn list_of_structs(mut self, inp: ::std::vec::Vec<SimpleStruct>) -> Self {
            self.list_of_structs = Some(inp);
            self
        }
        pub fn long(mut self, inp: i64) -> Self {
            self.long = Some(inp);
            self
        }
        pub fn map_of_lists_of_strings(
            mut self,
            inp: ::std::collections::HashMap<
                ::std::string::String,
                ::std::vec::Vec<::std::string::String>,
            >,
        ) -> Self {
            self.map_of_lists_of_strings = Some(inp);
            self
        }
        pub fn map_of_maps(
            mut self,
            inp: ::std::collections::HashMap<
                ::std::string::String,
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
        ) -> Self {
            self.map_of_maps = Some(inp);
            self
        }
        pub fn map_of_strings(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.map_of_strings = Some(inp);
            self
        }
        pub fn map_of_structs(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, SimpleStruct>,
        ) -> Self {
            self.map_of_structs = Some(inp);
            self
        }
        pub fn recursive_list(mut self, inp: ::std::vec::Vec<KitchenSink>) -> Self {
            self.recursive_list = Some(inp);
            self
        }
        pub fn recursive_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, KitchenSink>,
        ) -> Self {
            self.recursive_map = Some(inp);
            self
        }
        pub fn recursive_struct(mut self, inp: impl Into<::std::boxed::Box<KitchenSink>>) -> Self {
            self.recursive_struct = Some(inp.into());
            self
        }
        pub fn simple_struct(mut self, inp: SimpleStruct) -> Self {
            self.simple_struct = Some(inp);
            self
        }
        pub fn string(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.string = Some(inp.into());
            self
        }
        pub fn struct_with_location_name(mut self, inp: StructWithLocationName) -> Self {
            self.struct_with_location_name = Some(inp);
            self
        }
        pub fn timestamp(mut self, inp: Instant) -> Self {
            self.timestamp = Some(inp);
            self
        }
        pub fn unix_timestamp(mut self, inp: Instant) -> Self {
            self.unix_timestamp = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`KitchenSinkOperationOutput`](crate::output::KitchenSinkOperationOutput)
        pub fn build(self) -> KitchenSinkOperationOutput {
            KitchenSinkOperationOutput {
                blob: self.blob,
                boolean: self.boolean,
                double: self.double,
                empty_struct: self.empty_struct,
                float: self.float,
                httpdate_timestamp: self.httpdate_timestamp,
                integer: self.integer,
                iso8601_timestamp: self.iso8601_timestamp,
                json_value: self.json_value,
                list_of_lists: self.list_of_lists,
                list_of_maps_of_strings: self.list_of_maps_of_strings,
                list_of_strings: self.list_of_strings,
                list_of_structs: self.list_of_structs,
                long: self.long,
                map_of_lists_of_strings: self.map_of_lists_of_strings,
                map_of_maps: self.map_of_maps,
                map_of_strings: self.map_of_strings,
                map_of_structs: self.map_of_structs,
                recursive_list: self.recursive_list,
                recursive_map: self.recursive_map,
                recursive_struct: self.recursive_struct,
                simple_struct: self.simple_struct,
                string: self.string,
                struct_with_location_name: self.struct_with_location_name,
                timestamp: self.timestamp,
                unix_timestamp: self.unix_timestamp,
            }
        }
    }
}
impl KitchenSinkOperationOutput {
    /// Creates a new builder-style object to manufacture [`KitchenSinkOperationOutput`](crate::output::KitchenSinkOperationOutput)
    pub fn builder() -> crate::output::kitchen_sink_operation_output::Builder {
        crate::output::kitchen_sink_operation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmptyOperationOutput {}
/// See [`EmptyOperationOutput`](crate::output::EmptyOperationOutput)
pub mod empty_operation_output {

    use crate::output::EmptyOperationOutput;
    /// A builder for [`EmptyOperationOutput`](crate::output::EmptyOperationOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EmptyOperationOutput`](crate::output::EmptyOperationOutput)
        pub fn build(self) -> EmptyOperationOutput {
            EmptyOperationOutput {}
        }
    }
}
impl EmptyOperationOutput {
    /// Creates a new builder-style object to manufacture [`EmptyOperationOutput`](crate::output::EmptyOperationOutput)
    pub fn builder() -> crate::output::empty_operation_output::Builder {
        crate::output::empty_operation_output::Builder::default()
    }
}
