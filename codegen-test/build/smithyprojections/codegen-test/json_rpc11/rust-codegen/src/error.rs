// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::ComplexNestedErrorData;
use crate::model::KitchenSink;
use std::collections::HashMap;
/// This error has test cases that test some of the dark corners of Amazon service
/// framework history. It should only be implemented by clients.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct FooError {}
impl FooError {
    /// Creates a new builder-style object to manufacture [`FooError`](crate::error::FooError)
    pub fn builder() -> crate::error::foo_error::Builder {
        crate::error::foo_error::Builder::default()
    }
}
impl FooError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Server }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for FooError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "FooError")?;
        Ok(())
    }
}
impl ::std::error::Error for FooError {}
/// See [`FooError`](crate::error::FooError)
pub mod foo_error {

    use crate::error::FooError;
    /// A builder for [`FooError`](crate::error::FooError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`FooError`](crate::error::FooError)
        pub fn build(self) -> FooError {
            FooError {}
        }
    }
}

/// This error is thrown when a request is invalid.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct ComplexError {
    #[serde(rename = "TopLevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_level: Option<String>,
    #[serde(rename = "Nested")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nested: Option<ComplexNestedErrorData>,
}
impl ComplexError {
    /// Creates a new builder-style object to manufacture [`ComplexError`](crate::error::ComplexError)
    pub fn builder() -> crate::error::complex_error::Builder {
        crate::error::complex_error::Builder::default()
    }
}
impl ComplexError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ComplexError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ComplexError")?;
        Ok(())
    }
}
impl ::std::error::Error for ComplexError {}
/// See [`ComplexError`](crate::error::ComplexError)
pub mod complex_error {

    use crate::error::ComplexError;
    use crate::model::ComplexNestedErrorData;
    /// A builder for [`ComplexError`](crate::error::ComplexError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        top_level: Option<String>,
        nested: Option<ComplexNestedErrorData>,
    }
    impl Builder {
        pub fn top_level(mut self, inp: impl Into<String>) -> Self {
            self.top_level = Some(inp.into());
            self
        }
        pub fn nested(mut self, inp: ComplexNestedErrorData) -> Self {
            self.nested = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ComplexError`](crate::error::ComplexError)
        pub fn build(self) -> ComplexError {
            ComplexError {
                top_level: self.top_level,
                nested: self.nested,
            }
        }
    }
}

/// This error is thrown when an invalid greeting value is provided.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct InvalidGreeting {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
impl InvalidGreeting {
    /// Creates a new builder-style object to manufacture [`InvalidGreeting`](crate::error::InvalidGreeting)
    pub fn builder() -> crate::error::invalid_greeting::Builder {
        crate::error::invalid_greeting::Builder::default()
    }
}
impl InvalidGreeting {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for InvalidGreeting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidGreeting")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidGreeting {}
/// See [`InvalidGreeting`](crate::error::InvalidGreeting)
pub mod invalid_greeting {

    use crate::error::InvalidGreeting;
    /// A builder for [`InvalidGreeting`](crate::error::InvalidGreeting)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidGreeting`](crate::error::InvalidGreeting)
        pub fn build(self) -> InvalidGreeting {
            InvalidGreeting {
                message: self.message,
            }
        }
    }
}

#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct ErrorWithoutMembers {}
impl ErrorWithoutMembers {
    /// Creates a new builder-style object to manufacture [`ErrorWithoutMembers`](crate::error::ErrorWithoutMembers)
    pub fn builder() -> crate::error::error_without_members::Builder {
        crate::error::error_without_members::Builder::default()
    }
}
impl ErrorWithoutMembers {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Server }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ErrorWithoutMembers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ErrorWithoutMembers")?;
        Ok(())
    }
}
impl ::std::error::Error for ErrorWithoutMembers {}
/// See [`ErrorWithoutMembers`](crate::error::ErrorWithoutMembers)
pub mod error_without_members {

    use crate::error::ErrorWithoutMembers;
    /// A builder for [`ErrorWithoutMembers`](crate::error::ErrorWithoutMembers)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ErrorWithoutMembers`](crate::error::ErrorWithoutMembers)
        pub fn build(self) -> ErrorWithoutMembers {
            ErrorWithoutMembers {}
        }
    }
}

#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct ErrorWithMembers {
    #[serde(rename = "Code")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "ComplexData")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub complex_data: Option<KitchenSink>,
    #[serde(rename = "IntegerField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub integer_field: Option<i32>,
    #[serde(rename = "ListField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub list_field: Option<Vec<String>>,
    #[serde(rename = "MapField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub map_field: Option<HashMap<String, String>>,
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// abc
    #[serde(rename = "StringField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub string_field: Option<String>,
}
impl ErrorWithMembers {
    /// Creates a new builder-style object to manufacture [`ErrorWithMembers`](crate::error::ErrorWithMembers)
    pub fn builder() -> crate::error::error_with_members::Builder {
        crate::error::error_with_members::Builder::default()
    }
}
impl ErrorWithMembers {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ErrorWithMembers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ErrorWithMembers")?;
        Ok(())
    }
}
impl ::std::error::Error for ErrorWithMembers {}
/// See [`ErrorWithMembers`](crate::error::ErrorWithMembers)
pub mod error_with_members {

    use crate::error::ErrorWithMembers;
    use crate::model::KitchenSink;
    use std::collections::HashMap;
    /// A builder for [`ErrorWithMembers`](crate::error::ErrorWithMembers)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        code: Option<String>,
        complex_data: Option<KitchenSink>,
        integer_field: Option<i32>,
        list_field: Option<Vec<String>>,
        map_field: Option<HashMap<String, String>>,
        message: Option<String>,
        string_field: Option<String>,
    }
    impl Builder {
        pub fn code(mut self, inp: impl Into<String>) -> Self {
            self.code = Some(inp.into());
            self
        }
        pub fn complex_data(mut self, inp: KitchenSink) -> Self {
            self.complex_data = Some(inp);
            self
        }
        pub fn integer_field(mut self, inp: i32) -> Self {
            self.integer_field = Some(inp);
            self
        }
        pub fn list_field(mut self, inp: Vec<String>) -> Self {
            self.list_field = Some(inp);
            self
        }
        pub fn map_field(mut self, inp: HashMap<String, String>) -> Self {
            self.map_field = Some(inp);
            self
        }
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// abc
        pub fn string_field(mut self, inp: impl Into<String>) -> Self {
            self.string_field = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ErrorWithMembers`](crate::error::ErrorWithMembers)
        pub fn build(self) -> ErrorWithMembers {
            ErrorWithMembers {
                code: self.code,
                complex_data: self.complex_data,
                integer_field: self.integer_field,
                list_field: self.list_field,
                map_field: self.map_field,
                message: self.message,
                string_field: self.string_field,
            }
        }
    }
}
