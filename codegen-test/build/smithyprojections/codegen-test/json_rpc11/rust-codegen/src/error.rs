// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::ComplexNestedErrorData;
use crate::model::KitchenSink;
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum EmptyOperationError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for EmptyOperationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EmptyOperationError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for EmptyOperationError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            EmptyOperationError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GreetingWithErrorsError {
    InvalidGreeting(InvalidGreeting),
    ComplexError2(ComplexError2),
    FooError2(FooError2),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for GreetingWithErrorsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GreetingWithErrorsError::InvalidGreeting(inner) => inner.fmt(f),
            GreetingWithErrorsError::ComplexError2(inner) => inner.fmt(f),
            GreetingWithErrorsError::FooError2(inner) => inner.fmt(f),
            GreetingWithErrorsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for GreetingWithErrorsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            GreetingWithErrorsError::InvalidGreeting(inner) => Some(inner),
            GreetingWithErrorsError::ComplexError2(inner) => Some(inner),
            GreetingWithErrorsError::FooError2(inner) => Some(inner),
            GreetingWithErrorsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonEnumsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonEnumsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonEnumsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for JsonEnumsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonEnumsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonUnionsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonUnionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonUnionsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for JsonUnionsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonUnionsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum KitchenSinkOperationError {
    Error2WithMembers(Error2WithMembers),
    Error2WithoutMembers(Error2WithoutMembers),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for KitchenSinkOperationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            KitchenSinkOperationError::Error2WithMembers(inner) => inner.fmt(f),
            KitchenSinkOperationError::Error2WithoutMembers(inner) => inner.fmt(f),
            KitchenSinkOperationError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for KitchenSinkOperationError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            KitchenSinkOperationError::Error2WithMembers(inner) => Some(inner),
            KitchenSinkOperationError::Error2WithoutMembers(inner) => Some(inner),
            KitchenSinkOperationError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum NullOperationError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for NullOperationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NullOperationError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for NullOperationError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            NullOperationError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum OperationWithOptionalInputOutputError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for OperationWithOptionalInputOutputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OperationWithOptionalInputOutputError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for OperationWithOptionalInputOutputError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            OperationWithOptionalInputOutputError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum PutAndGetInlineDocumentsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for PutAndGetInlineDocumentsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            PutAndGetInlineDocumentsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ::std::error::Error for PutAndGetInlineDocumentsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            PutAndGetInlineDocumentsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

/// This error has test cases that test some of the dark corners of Amazon service
/// framework history. It should only be implemented by clients.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct FooError2 {}
impl FooError2 {
    /// Creates a new builder-style object to manufacture [`FooError2`](crate::error::FooError2)
    pub fn builder() -> crate::error::foo_error2::Builder {
        crate::error::foo_error2::Builder::default()
    }
}
impl FooError2 {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "FooError"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for FooError2 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "FooError2")?;
        Ok(())
    }
}
impl ::std::error::Error for FooError2 {}
/// See [`FooError2`](crate::error::FooError2)
pub mod foo_error2 {

    use crate::error::FooError2;
    /// A builder for [`FooError2`](crate::error::FooError2)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`FooError2`](crate::error::FooError2)
        pub fn build(self) -> FooError2 {
            FooError2 {}
        }
    }
}

/// This error is thrown when a request is invalid.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct ComplexError2 {
    #[serde(rename = "TopLevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_level: ::std::option::Option<::std::string::String>,
    #[serde(rename = "Nested")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nested: ::std::option::Option<ComplexNestedErrorData>,
}
impl ComplexError2 {
    /// Creates a new builder-style object to manufacture [`ComplexError2`](crate::error::ComplexError2)
    pub fn builder() -> crate::error::complex_error2::Builder {
        crate::error::complex_error2::Builder::default()
    }
}
impl ComplexError2 {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "ComplexError"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for ComplexError2 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ComplexError2")?;
        Ok(())
    }
}
impl ::std::error::Error for ComplexError2 {}
/// See [`ComplexError2`](crate::error::ComplexError2)
pub mod complex_error2 {

    use crate::error::ComplexError2;
    use crate::model::ComplexNestedErrorData;
    /// A builder for [`ComplexError2`](crate::error::ComplexError2)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        top_level: ::std::option::Option<::std::string::String>,
        nested: ::std::option::Option<ComplexNestedErrorData>,
    }
    impl Builder {
        pub fn top_level(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.top_level = Some(inp.into());
            self
        }
        pub fn nested(mut self, inp: ComplexNestedErrorData) -> Self {
            self.nested = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ComplexError2`](crate::error::ComplexError2)
        pub fn build(self) -> ComplexError2 {
            ComplexError2 {
                top_level: self.top_level,
                nested: self.nested,
            }
        }
    }
}

/// This error is thrown when an invalid greeting value is provided.
#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct InvalidGreeting {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: ::std::option::Option<::std::string::String>,
}
impl InvalidGreeting {
    /// Creates a new builder-style object to manufacture [`InvalidGreeting`](crate::error::InvalidGreeting)
    pub fn builder() -> crate::error::invalid_greeting::Builder {
        crate::error::invalid_greeting::Builder::default()
    }
}
impl InvalidGreeting {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "InvalidGreeting"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InvalidGreeting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidGreeting")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidGreeting {}
/// See [`InvalidGreeting`](crate::error::InvalidGreeting)
pub mod invalid_greeting {

    use crate::error::InvalidGreeting;
    /// A builder for [`InvalidGreeting`](crate::error::InvalidGreeting)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidGreeting`](crate::error::InvalidGreeting)
        pub fn build(self) -> InvalidGreeting {
            InvalidGreeting {
                message: self.message,
            }
        }
    }
}

#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct Error2WithoutMembers {}
impl Error2WithoutMembers {
    /// Creates a new builder-style object to manufacture [`Error2WithoutMembers`](crate::error::Error2WithoutMembers)
    pub fn builder() -> crate::error::error2_without_members::Builder {
        crate::error::error2_without_members::Builder::default()
    }
}
impl Error2WithoutMembers {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "ErrorWithoutMembers"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for Error2WithoutMembers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Error2WithoutMembers")?;
        Ok(())
    }
}
impl ::std::error::Error for Error2WithoutMembers {}
/// See [`Error2WithoutMembers`](crate::error::Error2WithoutMembers)
pub mod error2_without_members {

    use crate::error::Error2WithoutMembers;
    /// A builder for [`Error2WithoutMembers`](crate::error::Error2WithoutMembers)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`Error2WithoutMembers`](crate::error::Error2WithoutMembers)
        pub fn build(self) -> Error2WithoutMembers {
            Error2WithoutMembers {}
        }
    }
}

#[non_exhaustive]
#[derive(
    ::serde::Deserialize,
    ::serde::Serialize,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::std::fmt::Debug,
)]
pub struct Error2WithMembers {
    #[serde(rename = "Code")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub code: ::std::option::Option<::std::string::String>,
    #[serde(rename = "ComplexData")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub complex_data: ::std::option::Option<KitchenSink>,
    #[serde(rename = "IntegerField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub integer_field: ::std::option::Option<i32>,
    #[serde(rename = "ListField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub list_field: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    #[serde(rename = "MapField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub map_field: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: ::std::option::Option<::std::string::String>,
    /// abc
    #[serde(rename = "StringField")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub string_field: ::std::option::Option<::std::string::String>,
}
impl Error2WithMembers {
    /// Creates a new builder-style object to manufacture [`Error2WithMembers`](crate::error::Error2WithMembers)
    pub fn builder() -> crate::error::error2_with_members::Builder {
        crate::error::error2_with_members::Builder::default()
    }
}
impl Error2WithMembers {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "ErrorWithMembers"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for Error2WithMembers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Error2WithMembers")?;
        Ok(())
    }
}
impl ::std::error::Error for Error2WithMembers {}
/// See [`Error2WithMembers`](crate::error::Error2WithMembers)
pub mod error2_with_members {

    use crate::error::Error2WithMembers;
    use crate::model::KitchenSink;
    /// A builder for [`Error2WithMembers`](crate::error::Error2WithMembers)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        code: ::std::option::Option<::std::string::String>,
        complex_data: ::std::option::Option<KitchenSink>,
        integer_field: ::std::option::Option<i32>,
        list_field: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        map_field: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        message: ::std::option::Option<::std::string::String>,
        string_field: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn code(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.code = Some(inp.into());
            self
        }
        pub fn complex_data(mut self, inp: KitchenSink) -> Self {
            self.complex_data = Some(inp);
            self
        }
        pub fn integer_field(mut self, inp: i32) -> Self {
            self.integer_field = Some(inp);
            self
        }
        pub fn list_field(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.list_field = Some(inp);
            self
        }
        pub fn map_field(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.map_field = Some(inp);
            self
        }
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// abc
        pub fn string_field(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.string_field = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`Error2WithMembers`](crate::error::Error2WithMembers)
        pub fn build(self) -> Error2WithMembers {
            Error2WithMembers {
                code: self.code,
                complex_data: self.complex_data,
                integer_field: self.integer_field,
                list_field: self.list_field,
                map_field: self.map_field,
                message: self.message,
                string_field: self.string_field,
            }
        }
    }
}
