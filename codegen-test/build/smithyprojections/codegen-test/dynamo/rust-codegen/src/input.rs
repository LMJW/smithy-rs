// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::AttributeDefinition;
use crate::model::AttributeValue;
use crate::model::AttributeValueUpdate;
use crate::model::AutoScalingSettingsUpdate;
use crate::model::BackupTypeFilter;
use crate::model::BatchStatementRequest;
use crate::model::BillingMode;
use crate::model::Condition;
use crate::model::ConditionalOperator;
use crate::model::ContributorInsightsAction;
use crate::model::ExpectedAttributeValue;
use crate::model::ExportFormat;
use crate::model::GlobalSecondaryIndex;
use crate::model::GlobalSecondaryIndexAutoScalingUpdate;
use crate::model::GlobalSecondaryIndexUpdate;
use crate::model::GlobalTableGlobalSecondaryIndexSettingsUpdate;
use crate::model::KeySchemaElement;
use crate::model::KeysAndAttributes;
use crate::model::LocalSecondaryIndex;
use crate::model::ParameterizedStatement;
use crate::model::PointInTimeRecoverySpecification;
use crate::model::ProvisionedThroughput;
use crate::model::Replica;
use crate::model::ReplicaAutoScalingUpdate;
use crate::model::ReplicaSettingsUpdate;
use crate::model::ReplicaUpdate;
use crate::model::ReplicationGroupUpdate;
use crate::model::ReturnConsumedCapacity;
use crate::model::ReturnItemCollectionMetrics;
use crate::model::ReturnValue;
use crate::model::S3SseAlgorithm;
use crate::model::SSESpecification;
use crate::model::Select;
use crate::model::StreamSpecification;
use crate::model::Tag;
use crate::model::TimeToLiveSpecification;
use crate::model::TransactGetItem;
use crate::model::TransactWriteItem;
use crate::model::WriteRequest;
use crate::serializer::BatchExecuteStatementInputBody;
use crate::serializer::BatchGetItemInputBody;
use crate::serializer::BatchWriteItemInputBody;
use crate::serializer::CreateBackupInputBody;
use crate::serializer::CreateGlobalTableInputBody;
use crate::serializer::CreateTableInputBody;
use crate::serializer::DeleteBackupInputBody;
use crate::serializer::DeleteItemInputBody;
use crate::serializer::DeleteTableInputBody;
use crate::serializer::DescribeBackupInputBody;
use crate::serializer::DescribeContinuousBackupsInputBody;
use crate::serializer::DescribeContributorInsightsInputBody;
use crate::serializer::DescribeExportInputBody;
use crate::serializer::DescribeGlobalTableInputBody;
use crate::serializer::DescribeGlobalTableSettingsInputBody;
use crate::serializer::DescribeKinesisStreamingDestinationInputBody;
use crate::serializer::DescribeTableInputBody;
use crate::serializer::DescribeTableReplicaAutoScalingInputBody;
use crate::serializer::DescribeTimeToLiveInputBody;
use crate::serializer::DisableKinesisStreamingDestinationInputBody;
use crate::serializer::EnableKinesisStreamingDestinationInputBody;
use crate::serializer::ExecuteStatementInputBody;
use crate::serializer::ExecuteTransactionInputBody;
use crate::serializer::ExportTableToPointInTimeInputBody;
use crate::serializer::GetItemInputBody;
use crate::serializer::ListBackupsInputBody;
use crate::serializer::ListContributorInsightsInputBody;
use crate::serializer::ListExportsInputBody;
use crate::serializer::ListGlobalTablesInputBody;
use crate::serializer::ListTablesInputBody;
use crate::serializer::ListTagsOfResourceInputBody;
use crate::serializer::PutItemInputBody;
use crate::serializer::QueryInputBody;
use crate::serializer::RestoreTableFromBackupInputBody;
use crate::serializer::RestoreTableToPointInTimeInputBody;
use crate::serializer::ScanInputBody;
use crate::serializer::TagResourceInputBody;
use crate::serializer::TransactGetItemsInputBody;
use crate::serializer::TransactWriteItemsInputBody;
use crate::serializer::UntagResourceInputBody;
use crate::serializer::UpdateContinuousBackupsInputBody;
use crate::serializer::UpdateContributorInsightsInputBody;
use crate::serializer::UpdateGlobalTableInputBody;
use crate::serializer::UpdateGlobalTableSettingsInputBody;
use crate::serializer::UpdateItemInputBody;
use crate::serializer::UpdateTableInputBody;
use crate::serializer::UpdateTableReplicaAutoScalingInputBody;
use crate::serializer::UpdateTimeToLiveInputBody;
use smithy_types::Instant;
/// See [`BatchExecuteStatementInput`](crate::input::BatchExecuteStatementInput)
pub mod batch_execute_statement_input {

    use crate::input::BatchExecuteStatementInput;
    use crate::model::BatchStatementRequest;
    use crate::operation::BatchExecuteStatement;
    /// A builder for [`BatchExecuteStatementInput`](crate::input::BatchExecuteStatementInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        statements: ::std::option::Option<::std::vec::Vec<BatchStatementRequest>>,
    }
    impl Builder {
        /// <p>
        /// The list of PartiQL statements representing the batch to run.
        /// </p>
        pub fn statements(mut self, inp: ::std::vec::Vec<BatchStatementRequest>) -> Self {
            self.statements = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`BatchExecuteStatement`](crate::operation::BatchExecuteStatement)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<BatchExecuteStatement, ()> {
            let op = BatchExecuteStatement::new(BatchExecuteStatementInput {
                statements: self.statements,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl BatchExecuteStatementInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.BatchExecuteStatement")
    }
    fn body(&self) -> BatchExecuteStatementInputBody {
        BatchExecuteStatementInputBody {
            statements: &self.statements,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`BatchExecuteStatementInput`](crate::input::BatchExecuteStatementInput)
    pub fn builder() -> crate::input::batch_execute_statement_input::Builder {
        crate::input::batch_execute_statement_input::Builder::default()
    }
}

/// See [`BatchGetItemInput`](crate::input::BatchGetItemInput)
pub mod batch_get_item_input {

    use crate::input::BatchGetItemInput;
    use crate::model::KeysAndAttributes;
    use crate::model::ReturnConsumedCapacity;
    use crate::operation::BatchGetItem;
    /// A builder for [`BatchGetItemInput`](crate::input::BatchGetItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        request_items: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, KeysAndAttributes>,
        >,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    }
    impl Builder {
        /// <p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p>
        /// <p>Each element in the map of items to retrieve consists of the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if
        /// <code>false</code> (the default), an eventually consistent read is used.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB
        /// Developer Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Keys</code> - An array of primary key attribute values that define specific items in the
        /// table. For each primary key, you must provide <i>all</i> of the key attributes. For
        /// example, with a simple primary key, you only need to provide the partition key value. For a
        /// composite key, you must provide <i>both</i> the partition key value and the sort key value.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ProjectionExpression</code> - A string that identifies one or more
        /// attributes to retrieve from the table. These attributes can include scalars,
        /// sets, or elements of a JSON document. The attributes in the expression must be
        /// separated by commas.</p>
        /// <p>If no attribute names are specified, then all attributes are returned. If any
        /// of the requested attributes are not found, they do not appear in the
        /// result.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AttributesToGet</code> - This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn request_items(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, KeysAndAttributes>,
        ) -> Self {
            self.request_items = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`BatchGetItem`](crate::operation::BatchGetItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<BatchGetItem, ()> {
            let op = BatchGetItem::new(BatchGetItemInput {
                request_items: self.request_items,
                return_consumed_capacity: self.return_consumed_capacity,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl BatchGetItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.BatchGetItem")
    }
    fn body(&self) -> BatchGetItemInputBody {
        BatchGetItemInputBody {
            request_items: &self.request_items,
            return_consumed_capacity: &self.return_consumed_capacity,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`BatchGetItemInput`](crate::input::BatchGetItemInput)
    pub fn builder() -> crate::input::batch_get_item_input::Builder {
        crate::input::batch_get_item_input::Builder::default()
    }
}

/// See [`BatchWriteItemInput`](crate::input::BatchWriteItemInput)
pub mod batch_write_item_input {

    use crate::input::BatchWriteItemInput;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::ReturnItemCollectionMetrics;
    use crate::model::WriteRequest;
    use crate::operation::BatchWriteItem;
    /// A builder for [`BatchWriteItemInput`](crate::input::BatchWriteItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        request_items: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<WriteRequest>>,
        >,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
    }
    impl Builder {
        /// <p>A map of one or more table names and, for each table, a list of operations to be performed
        /// (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
        /// item to be deleted is identified by a <code>Key</code> subelement:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
        /// Each entry in this map consists of an attribute name and an attribute value. For each
        /// primary key, you must provide <i>all</i> of the key attributes. For example, with a
        /// simple primary key, you only need to provide a value for the partition key. For a
        /// composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
        /// be put is identified by an <code>Item</code> subelement:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Item</code> - A map of attributes and their values. Each entry in
        /// this map consists of an attribute name and an attribute value. Attribute
        /// values must not be null; string and binary type attributes must have
        /// lengths greater than zero; and set type attributes must not be empty.
        /// Requests that contain empty values are rejected with a
        /// <code>ValidationException</code> exception.</p>
        /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn request_items(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<WriteRequest>>,
        ) -> Self {
            self.request_items = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
        /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
        pub fn return_item_collection_metrics(mut self, inp: ReturnItemCollectionMetrics) -> Self {
            self.return_item_collection_metrics = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`BatchWriteItem`](crate::operation::BatchWriteItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<BatchWriteItem, ()> {
            let op = BatchWriteItem::new(BatchWriteItemInput {
                request_items: self.request_items,
                return_consumed_capacity: self.return_consumed_capacity,
                return_item_collection_metrics: self.return_item_collection_metrics,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl BatchWriteItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.BatchWriteItem")
    }
    fn body(&self) -> BatchWriteItemInputBody {
        BatchWriteItemInputBody {
            request_items: &self.request_items,
            return_consumed_capacity: &self.return_consumed_capacity,
            return_item_collection_metrics: &self.return_item_collection_metrics,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`BatchWriteItemInput`](crate::input::BatchWriteItemInput)
    pub fn builder() -> crate::input::batch_write_item_input::Builder {
        crate::input::batch_write_item_input::Builder::default()
    }
}

/// See [`CreateBackupInput`](crate::input::CreateBackupInput)
pub mod create_backup_input {

    use crate::input::CreateBackupInput;
    use crate::operation::CreateBackup;
    /// A builder for [`CreateBackupInput`](crate::input::CreateBackupInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        backup_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Specified name for the backup.</p>
        pub fn backup_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.backup_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateBackup`](crate::operation::CreateBackup)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateBackup, ()> {
            let op = CreateBackup::new(CreateBackupInput {
                table_name: self.table_name,
                backup_name: self.backup_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl CreateBackupInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.CreateBackup")
    }
    fn body(&self) -> CreateBackupInputBody {
        CreateBackupInputBody {
            table_name: &self.table_name,
            backup_name: &self.backup_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateBackupInput`](crate::input::CreateBackupInput)
    pub fn builder() -> crate::input::create_backup_input::Builder {
        crate::input::create_backup_input::Builder::default()
    }
}

/// See [`CreateGlobalTableInput`](crate::input::CreateGlobalTableInput)
pub mod create_global_table_input {

    use crate::input::CreateGlobalTableInput;
    use crate::model::Replica;
    use crate::operation::CreateGlobalTable;
    /// A builder for [`CreateGlobalTableInput`](crate::input::CreateGlobalTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_table_name: ::std::option::Option<::std::string::String>,
        replication_group: ::std::option::Option<::std::vec::Vec<Replica>>,
    }
    impl Builder {
        /// <p>The global table name.</p>
        pub fn global_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.global_table_name = Some(inp.into());
            self
        }
        /// <p>The Regions where the global table needs to be created.</p>
        pub fn replication_group(mut self, inp: ::std::vec::Vec<Replica>) -> Self {
            self.replication_group = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateGlobalTable`](crate::operation::CreateGlobalTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateGlobalTable, ()> {
            let op = CreateGlobalTable::new(CreateGlobalTableInput {
                global_table_name: self.global_table_name,
                replication_group: self.replication_group,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl CreateGlobalTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.CreateGlobalTable")
    }
    fn body(&self) -> CreateGlobalTableInputBody {
        CreateGlobalTableInputBody {
            global_table_name: &self.global_table_name,
            replication_group: &self.replication_group,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateGlobalTableInput`](crate::input::CreateGlobalTableInput)
    pub fn builder() -> crate::input::create_global_table_input::Builder {
        crate::input::create_global_table_input::Builder::default()
    }
}

/// See [`CreateTableInput`](crate::input::CreateTableInput)
pub mod create_table_input {

    use crate::input::CreateTableInput;
    use crate::model::AttributeDefinition;
    use crate::model::BillingMode;
    use crate::model::GlobalSecondaryIndex;
    use crate::model::KeySchemaElement;
    use crate::model::LocalSecondaryIndex;
    use crate::model::ProvisionedThroughput;
    use crate::model::SSESpecification;
    use crate::model::StreamSpecification;
    use crate::model::Tag;
    use crate::operation::CreateTable;
    /// A builder for [`CreateTableInput`](crate::input::CreateTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        attribute_definitions: ::std::option::Option<::std::vec::Vec<AttributeDefinition>>,
        table_name: ::std::option::Option<::std::string::String>,
        key_schema: ::std::option::Option<::std::vec::Vec<KeySchemaElement>>,
        local_secondary_indexes: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
        global_secondary_indexes: ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
        billing_mode: ::std::option::Option<BillingMode>,
        provisioned_throughput: ::std::option::Option<ProvisionedThroughput>,
        stream_specification: ::std::option::Option<StreamSpecification>,
        sse_specification: ::std::option::Option<SSESpecification>,
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    }
    impl Builder {
        /// <p>An array of attributes that describe the key schema for the table and indexes.</p>
        pub fn attribute_definitions(mut self, inp: ::std::vec::Vec<AttributeDefinition>) -> Self {
            self.attribute_definitions = Some(inp);
            self
        }
        /// <p>The name of the table to create.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Specifies the attributes that make up the primary key for a table or an index. The attributes
        /// in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more
        /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the
        /// <i>Amazon DynamoDB Developer Guide</i>.</p>
        /// <p>Each <code>KeySchemaElement</code> in the array is composed of:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AttributeName</code> - The name of this key attribute.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KeyType</code> - The role that the key attribute will assume:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>HASH</code> - partition key</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RANGE</code> - sort key</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>The partition key of an item is also known as its <i>hash
        /// attribute</i>. The term "hash attribute" derives from the DynamoDB usage of
        /// an internal hash function to evenly distribute data items across partitions, based
        /// on their partition key values.</p>
        /// <p>The sort key of an item is also known as its <i>range attribute</i>.
        /// The term "range attribute" derives from the way DynamoDB stores items with the same
        /// partition key physically close together, in sorted order by the sort key value.</p>
        /// </note>
        /// <p>For a simple primary key (partition key), you must provide
        /// exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p>
        /// <p>For a composite primary key (partition key and sort key), you must provide exactly two
        /// elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>,
        /// and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn key_schema(mut self, inp: ::std::vec::Vec<KeySchemaElement>) -> Self {
            self.key_schema = Some(inp);
            self
        }
        /// <p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p>
        /// <p>Each local secondary index in the array includes the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p>
        /// <p></p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with
        /// the same partition key as the table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Projection</code> - Specifies
        /// attributes that are copied (projected) from the table into the index. These are in
        /// addition to the primary key attributes and index key
        /// attributes, which are automatically projected. Each
        /// attribute specification is composed of:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ProjectionType</code> - One
        /// of the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
        /// index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>INCLUDE</code> - Only the specified table attributes are
        /// projected into the index. The list of projected attributes is in
        /// <code>NonKeyAttributes</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL</code> - All of the table attributes are projected into the
        /// index.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NonKeyAttributes</code> - A list of one or more non-key
        /// attribute names that are projected into the secondary index. The total
        /// count of attributes provided in <code>NonKeyAttributes</code>,
        /// summed across all of the secondary indexes, must not exceed 100. If you
        /// project the same attribute into two different indexes, this counts as
        /// two distinct attributes when determining the total.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn local_secondary_indexes(
            mut self,
            inp: ::std::vec::Vec<LocalSecondaryIndex>,
        ) -> Self {
            self.local_secondary_indexes = Some(inp);
            self
        }
        /// <p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p>
        /// <p></p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Projection</code> - Specifies
        /// attributes that are copied (projected) from the table into the index. These are in
        /// addition to the primary key attributes and index key
        /// attributes, which are automatically projected. Each
        /// attribute specification is composed of:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ProjectionType</code> - One
        /// of the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
        /// index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>INCLUDE</code> - Only the specified table attributes are
        /// projected into the index. The list of projected attributes is in
        /// <code>NonKeyAttributes</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL</code> - All of the table attributes are projected into the
        /// index.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
        /// projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
        /// consisting of read and write capacity units.</p>
        /// </li>
        /// </ul>
        pub fn global_secondary_indexes(
            mut self,
            inp: ::std::vec::Vec<GlobalSecondaryIndex>,
        ) -> Self {
            self.global_secondary_indexes = Some(inp);
            self
        }
        /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn billing_mode(mut self, inp: BillingMode) -> Self {
            self.billing_mode = Some(inp);
            self
        }
        /// <p>Represents the provisioned throughput settings for a specified table or index. The
        /// settings can be modified using the <code>UpdateTable</code> operation.</p>
        /// <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you
        /// set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this
        /// property.</p>
        /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
        /// Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn provisioned_throughput(mut self, inp: ProvisionedThroughput) -> Self {
            self.provisioned_throughput = Some(inp);
            self
        }
        /// <p>The settings for DynamoDB Streams on the table. These settings consist of:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled
        /// (true) or disabled (false).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code>
        /// determines what information is written to the table's stream. Valid values for
        /// <code>StreamViewType</code> are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the
        /// stream.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written
        /// to the stream.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is
        /// written to the stream.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are
        /// written to the stream.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn stream_specification(mut self, inp: StreamSpecification) -> Self {
            self.stream_specification = Some(inp);
            self
        }
        /// <p>Represents the settings used to enable server-side encryption.</p>
        pub fn sse_specification(mut self, inp: SSESpecification) -> Self {
            self.sse_specification = Some(inp);
            self
        }
        /// <p>A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateTable`](crate::operation::CreateTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateTable, ()> {
            let op = CreateTable::new(CreateTableInput {
                attribute_definitions: self.attribute_definitions,
                table_name: self.table_name,
                key_schema: self.key_schema,
                local_secondary_indexes: self.local_secondary_indexes,
                global_secondary_indexes: self.global_secondary_indexes,
                billing_mode: self.billing_mode,
                provisioned_throughput: self.provisioned_throughput,
                stream_specification: self.stream_specification,
                sse_specification: self.sse_specification,
                tags: self.tags,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl CreateTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.CreateTable")
    }
    fn body(&self) -> CreateTableInputBody {
        CreateTableInputBody {
            attribute_definitions: &self.attribute_definitions,
            table_name: &self.table_name,
            key_schema: &self.key_schema,
            local_secondary_indexes: &self.local_secondary_indexes,
            global_secondary_indexes: &self.global_secondary_indexes,
            billing_mode: &self.billing_mode,
            provisioned_throughput: &self.provisioned_throughput,
            stream_specification: &self.stream_specification,
            sse_specification: &self.sse_specification,
            tags: &self.tags,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateTableInput`](crate::input::CreateTableInput)
    pub fn builder() -> crate::input::create_table_input::Builder {
        crate::input::create_table_input::Builder::default()
    }
}

/// See [`DeleteBackupInput`](crate::input::DeleteBackupInput)
pub mod delete_backup_input {

    use crate::input::DeleteBackupInput;
    use crate::operation::DeleteBackup;
    /// A builder for [`DeleteBackupInput`](crate::input::DeleteBackupInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        backup_arn: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The ARN associated with the backup.</p>
        pub fn backup_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.backup_arn = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteBackup`](crate::operation::DeleteBackup)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteBackup, ()> {
            let op = DeleteBackup::new(DeleteBackupInput {
                backup_arn: self.backup_arn,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DeleteBackupInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DeleteBackup")
    }
    fn body(&self) -> DeleteBackupInputBody {
        DeleteBackupInputBody {
            backup_arn: &self.backup_arn,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteBackupInput`](crate::input::DeleteBackupInput)
    pub fn builder() -> crate::input::delete_backup_input::Builder {
        crate::input::delete_backup_input::Builder::default()
    }
}

/// See [`DeleteItemInput`](crate::input::DeleteItemInput)
pub mod delete_item_input {

    use crate::input::DeleteItemInput;
    use crate::model::AttributeValue;
    use crate::model::ConditionalOperator;
    use crate::model::ExpectedAttributeValue;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::ReturnItemCollectionMetrics;
    use crate::model::ReturnValue;
    use crate::operation::DeleteItem;
    /// A builder for [`DeleteItemInput`](crate::input::DeleteItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        key: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        expected: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        >,
        conditional_operator: ::std::option::Option<ConditionalOperator>,
        return_values: ::std::option::Option<ReturnValue>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
        condition_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        expression_attribute_values: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
    }
    impl Builder {
        /// <p>The name of the table from which to delete the item.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
        /// the item to delete.</p>
        /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
        pub fn key(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.key = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn expected(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        ) -> Self {
            self.expected = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn conditional_operator(mut self, inp: ConditionalOperator) -> Self {
            self.conditional_operator = Some(inp);
            self
        }
        /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
        /// were deleted. For <code>DeleteItem</code>, the valid values are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
        /// <code>NONE</code>, then nothing is returned. (This setting is the default for
        /// <code>ReturnValues</code>.)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_OLD</code> - The content of the old item is returned.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
        /// <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or
        /// <code>ALL_OLD</code>.</p>
        /// </note>
        pub fn return_values(mut self, inp: ReturnValue) -> Self {
            self.return_values = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
        /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
        pub fn return_item_collection_metrics(mut self, inp: ReturnItemCollectionMetrics) -> Self {
            self.return_item_collection_metrics = Some(inp);
            self
        }
        /// <p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to
        /// succeed.</p>
        /// <p>An expression can contain any of the following:</p>
        /// <ul>
        /// <li>
        /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
        /// </p>
        /// <p>These function names are case-sensitive.</p>
        /// </li>
        /// <li>
        /// <p>Comparison operators: <code>= | <> |
        /// < | > | <= | >= |
        /// BETWEEN | IN </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p> Logical operators: <code>AND | OR | NOT</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn condition_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.condition_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// <p>One or more values that can be substituted in an expression.</p>
        /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
        /// <p>
        /// <code>Available | Backordered | Discontinued</code>
        /// </p>
        /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
        /// <p>
        /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
        /// </p>
        /// <p>You could then use these values in an expression, such as this:</p>
        /// <p>
        /// <code>ProductStatus IN (:avail, :back, :disc)</code>
        /// </p>
        /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_values(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.expression_attribute_values = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteItem`](crate::operation::DeleteItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteItem, ()> {
            let op = DeleteItem::new(DeleteItemInput {
                table_name: self.table_name,
                key: self.key,
                expected: self.expected,
                conditional_operator: self.conditional_operator,
                return_values: self.return_values,
                return_consumed_capacity: self.return_consumed_capacity,
                return_item_collection_metrics: self.return_item_collection_metrics,
                condition_expression: self.condition_expression,
                expression_attribute_names: self.expression_attribute_names,
                expression_attribute_values: self.expression_attribute_values,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DeleteItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DeleteItem")
    }
    fn body(&self) -> DeleteItemInputBody {
        DeleteItemInputBody {
            table_name: &self.table_name,
            key: &self.key,
            expected: &self.expected,
            conditional_operator: &self.conditional_operator,
            return_values: &self.return_values,
            return_consumed_capacity: &self.return_consumed_capacity,
            return_item_collection_metrics: &self.return_item_collection_metrics,
            condition_expression: &self.condition_expression,
            expression_attribute_names: &self.expression_attribute_names,
            expression_attribute_values: &self.expression_attribute_values,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteItemInput`](crate::input::DeleteItemInput)
    pub fn builder() -> crate::input::delete_item_input::Builder {
        crate::input::delete_item_input::Builder::default()
    }
}

/// See [`DeleteTableInput`](crate::input::DeleteTableInput)
pub mod delete_table_input {

    use crate::input::DeleteTableInput;
    use crate::operation::DeleteTable;
    /// A builder for [`DeleteTableInput`](crate::input::DeleteTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table to delete.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteTable`](crate::operation::DeleteTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteTable, ()> {
            let op = DeleteTable::new(DeleteTableInput {
                table_name: self.table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DeleteTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DeleteTable")
    }
    fn body(&self) -> DeleteTableInputBody {
        DeleteTableInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteTableInput`](crate::input::DeleteTableInput)
    pub fn builder() -> crate::input::delete_table_input::Builder {
        crate::input::delete_table_input::Builder::default()
    }
}

/// See [`DescribeBackupInput`](crate::input::DescribeBackupInput)
pub mod describe_backup_input {

    use crate::input::DescribeBackupInput;
    use crate::operation::DescribeBackup;
    /// A builder for [`DescribeBackupInput`](crate::input::DescribeBackupInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        backup_arn: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
        pub fn backup_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.backup_arn = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeBackup`](crate::operation::DescribeBackup)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeBackup, ()> {
            let op = DescribeBackup::new(DescribeBackupInput {
                backup_arn: self.backup_arn,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeBackupInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeBackup")
    }
    fn body(&self) -> DescribeBackupInputBody {
        DescribeBackupInputBody {
            backup_arn: &self.backup_arn,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeBackupInput`](crate::input::DescribeBackupInput)
    pub fn builder() -> crate::input::describe_backup_input::Builder {
        crate::input::describe_backup_input::Builder::default()
    }
}

/// See [`DescribeContinuousBackupsInput`](crate::input::DescribeContinuousBackupsInput)
pub mod describe_continuous_backups_input {

    use crate::input::DescribeContinuousBackupsInput;
    use crate::operation::DescribeContinuousBackups;
    /// A builder for [`DescribeContinuousBackupsInput`](crate::input::DescribeContinuousBackupsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeContinuousBackups`](crate::operation::DescribeContinuousBackups)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeContinuousBackups, ()> {
            let op = DescribeContinuousBackups::new(DescribeContinuousBackupsInput {
                table_name: self.table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeContinuousBackupsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DescribeContinuousBackups",
            )
    }
    fn body(&self) -> DescribeContinuousBackupsInputBody {
        DescribeContinuousBackupsInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeContinuousBackupsInput`](crate::input::DescribeContinuousBackupsInput)
    pub fn builder() -> crate::input::describe_continuous_backups_input::Builder {
        crate::input::describe_continuous_backups_input::Builder::default()
    }
}

/// See [`DescribeContributorInsightsInput`](crate::input::DescribeContributorInsightsInput)
pub mod describe_contributor_insights_input {

    use crate::input::DescribeContributorInsightsInput;
    use crate::operation::DescribeContributorInsights;
    /// A builder for [`DescribeContributorInsightsInput`](crate::input::DescribeContributorInsightsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        index_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table to describe.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The name of the global secondary index to describe, if applicable.</p>
        pub fn index_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.index_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeContributorInsights`](crate::operation::DescribeContributorInsights)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeContributorInsights, ()> {
            let op = DescribeContributorInsights::new(DescribeContributorInsightsInput {
                table_name: self.table_name,
                index_name: self.index_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeContributorInsightsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DescribeContributorInsights",
            )
    }
    fn body(&self) -> DescribeContributorInsightsInputBody {
        DescribeContributorInsightsInputBody {
            table_name: &self.table_name,
            index_name: &self.index_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeContributorInsightsInput`](crate::input::DescribeContributorInsightsInput)
    pub fn builder() -> crate::input::describe_contributor_insights_input::Builder {
        crate::input::describe_contributor_insights_input::Builder::default()
    }
}

/// See [`DescribeEndpointsInput`](crate::input::DescribeEndpointsInput)
pub mod describe_endpoints_input {

    use crate::input::DescribeEndpointsInput;
    use crate::operation::DescribeEndpoints;
    /// A builder for [`DescribeEndpointsInput`](crate::input::DescribeEndpointsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs an Operation<[`DescribeEndpoints`](crate::operation::DescribeEndpoints)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeEndpoints, ()> {
            let op = DescribeEndpoints::new(DescribeEndpointsInput {});

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeEndpointsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeEndpoints")
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        vec![]
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEndpointsInput`](crate::input::DescribeEndpointsInput)
    pub fn builder() -> crate::input::describe_endpoints_input::Builder {
        crate::input::describe_endpoints_input::Builder::default()
    }
}

/// See [`DescribeExportInput`](crate::input::DescribeExportInput)
pub mod describe_export_input {

    use crate::input::DescribeExportInput;
    use crate::operation::DescribeExport;
    /// A builder for [`DescribeExportInput`](crate::input::DescribeExportInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        export_arn: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) associated with the export.</p>
        pub fn export_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.export_arn = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeExport`](crate::operation::DescribeExport)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeExport, ()> {
            let op = DescribeExport::new(DescribeExportInput {
                export_arn: self.export_arn,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeExportInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeExport")
    }
    fn body(&self) -> DescribeExportInputBody {
        DescribeExportInputBody {
            export_arn: &self.export_arn,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeExportInput`](crate::input::DescribeExportInput)
    pub fn builder() -> crate::input::describe_export_input::Builder {
        crate::input::describe_export_input::Builder::default()
    }
}

/// See [`DescribeGlobalTableInput`](crate::input::DescribeGlobalTableInput)
pub mod describe_global_table_input {

    use crate::input::DescribeGlobalTableInput;
    use crate::operation::DescribeGlobalTable;
    /// A builder for [`DescribeGlobalTableInput`](crate::input::DescribeGlobalTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the global table.</p>
        pub fn global_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.global_table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeGlobalTable`](crate::operation::DescribeGlobalTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeGlobalTable, ()> {
            let op = DescribeGlobalTable::new(DescribeGlobalTableInput {
                global_table_name: self.global_table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeGlobalTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeGlobalTable")
    }
    fn body(&self) -> DescribeGlobalTableInputBody {
        DescribeGlobalTableInputBody {
            global_table_name: &self.global_table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeGlobalTableInput`](crate::input::DescribeGlobalTableInput)
    pub fn builder() -> crate::input::describe_global_table_input::Builder {
        crate::input::describe_global_table_input::Builder::default()
    }
}

/// See [`DescribeGlobalTableSettingsInput`](crate::input::DescribeGlobalTableSettingsInput)
pub mod describe_global_table_settings_input {

    use crate::input::DescribeGlobalTableSettingsInput;
    use crate::operation::DescribeGlobalTableSettings;
    /// A builder for [`DescribeGlobalTableSettingsInput`](crate::input::DescribeGlobalTableSettingsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the global table to describe.</p>
        pub fn global_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.global_table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeGlobalTableSettings`](crate::operation::DescribeGlobalTableSettings)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeGlobalTableSettings, ()> {
            let op = DescribeGlobalTableSettings::new(DescribeGlobalTableSettingsInput {
                global_table_name: self.global_table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeGlobalTableSettingsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DescribeGlobalTableSettings",
            )
    }
    fn body(&self) -> DescribeGlobalTableSettingsInputBody {
        DescribeGlobalTableSettingsInputBody {
            global_table_name: &self.global_table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeGlobalTableSettingsInput`](crate::input::DescribeGlobalTableSettingsInput)
    pub fn builder() -> crate::input::describe_global_table_settings_input::Builder {
        crate::input::describe_global_table_settings_input::Builder::default()
    }
}

/// See [`DescribeKinesisStreamingDestinationInput`](crate::input::DescribeKinesisStreamingDestinationInput)
pub mod describe_kinesis_streaming_destination_input {

    use crate::input::DescribeKinesisStreamingDestinationInput;
    use crate::operation::DescribeKinesisStreamingDestination;
    /// A builder for [`DescribeKinesisStreamingDestinationInput`](crate::input::DescribeKinesisStreamingDestinationInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table being described.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeKinesisStreamingDestination`](crate::operation::DescribeKinesisStreamingDestination)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeKinesisStreamingDestination, ()> {
            let op = DescribeKinesisStreamingDestination::new(
                DescribeKinesisStreamingDestinationInput {
                    table_name: self.table_name,
                },
            );

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeKinesisStreamingDestinationInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DescribeKinesisStreamingDestination",
            )
    }
    fn body(&self) -> DescribeKinesisStreamingDestinationInputBody {
        DescribeKinesisStreamingDestinationInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeKinesisStreamingDestinationInput`](crate::input::DescribeKinesisStreamingDestinationInput)
    pub fn builder() -> crate::input::describe_kinesis_streaming_destination_input::Builder {
        crate::input::describe_kinesis_streaming_destination_input::Builder::default()
    }
}

/// See [`DescribeLimitsInput`](crate::input::DescribeLimitsInput)
pub mod describe_limits_input {

    use crate::input::DescribeLimitsInput;
    use crate::operation::DescribeLimits;
    /// A builder for [`DescribeLimitsInput`](crate::input::DescribeLimitsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs an Operation<[`DescribeLimits`](crate::operation::DescribeLimits)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeLimits, ()> {
            let op = DescribeLimits::new(DescribeLimitsInput {});

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeLimitsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeLimits")
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        vec![]
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeLimitsInput`](crate::input::DescribeLimitsInput)
    pub fn builder() -> crate::input::describe_limits_input::Builder {
        crate::input::describe_limits_input::Builder::default()
    }
}

/// See [`DescribeTableInput`](crate::input::DescribeTableInput)
pub mod describe_table_input {

    use crate::input::DescribeTableInput;
    use crate::operation::DescribeTable;
    /// A builder for [`DescribeTableInput`](crate::input::DescribeTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table to describe.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeTable`](crate::operation::DescribeTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeTable, ()> {
            let op = DescribeTable::new(DescribeTableInput {
                table_name: self.table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeTable")
    }
    fn body(&self) -> DescribeTableInputBody {
        DescribeTableInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeTableInput`](crate::input::DescribeTableInput)
    pub fn builder() -> crate::input::describe_table_input::Builder {
        crate::input::describe_table_input::Builder::default()
    }
}

/// See [`DescribeTableReplicaAutoScalingInput`](crate::input::DescribeTableReplicaAutoScalingInput)
pub mod describe_table_replica_auto_scaling_input {

    use crate::input::DescribeTableReplicaAutoScalingInput;
    use crate::operation::DescribeTableReplicaAutoScaling;
    /// A builder for [`DescribeTableReplicaAutoScalingInput`](crate::input::DescribeTableReplicaAutoScalingInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeTableReplicaAutoScaling`](crate::operation::DescribeTableReplicaAutoScaling)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeTableReplicaAutoScaling, ()> {
            let op = DescribeTableReplicaAutoScaling::new(DescribeTableReplicaAutoScalingInput {
                table_name: self.table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeTableReplicaAutoScalingInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DescribeTableReplicaAutoScaling",
            )
    }
    fn body(&self) -> DescribeTableReplicaAutoScalingInputBody {
        DescribeTableReplicaAutoScalingInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeTableReplicaAutoScalingInput`](crate::input::DescribeTableReplicaAutoScalingInput)
    pub fn builder() -> crate::input::describe_table_replica_auto_scaling_input::Builder {
        crate::input::describe_table_replica_auto_scaling_input::Builder::default()
    }
}

/// See [`DescribeTimeToLiveInput`](crate::input::DescribeTimeToLiveInput)
pub mod describe_time_to_live_input {

    use crate::input::DescribeTimeToLiveInput;
    use crate::operation::DescribeTimeToLive;
    /// A builder for [`DescribeTimeToLiveInput`](crate::input::DescribeTimeToLiveInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the table to be described.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeTimeToLive`](crate::operation::DescribeTimeToLive)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeTimeToLive, ()> {
            let op = DescribeTimeToLive::new(DescribeTimeToLiveInput {
                table_name: self.table_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DescribeTimeToLiveInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.DescribeTimeToLive")
    }
    fn body(&self) -> DescribeTimeToLiveInputBody {
        DescribeTimeToLiveInputBody {
            table_name: &self.table_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeTimeToLiveInput`](crate::input::DescribeTimeToLiveInput)
    pub fn builder() -> crate::input::describe_time_to_live_input::Builder {
        crate::input::describe_time_to_live_input::Builder::default()
    }
}

/// See [`DisableKinesisStreamingDestinationInput`](crate::input::DisableKinesisStreamingDestinationInput)
pub mod disable_kinesis_streaming_destination_input {

    use crate::input::DisableKinesisStreamingDestinationInput;
    use crate::operation::DisableKinesisStreamingDestination;
    /// A builder for [`DisableKinesisStreamingDestinationInput`](crate::input::DisableKinesisStreamingDestinationInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        stream_arn: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DynamoDB table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The ARN for a Kinesis data stream.</p>
        pub fn stream_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.stream_arn = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DisableKinesisStreamingDestination`](crate::operation::DisableKinesisStreamingDestination)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DisableKinesisStreamingDestination, ()> {
            let op =
                DisableKinesisStreamingDestination::new(DisableKinesisStreamingDestinationInput {
                    table_name: self.table_name,
                    stream_arn: self.stream_arn,
                });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl DisableKinesisStreamingDestinationInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.DisableKinesisStreamingDestination",
            )
    }
    fn body(&self) -> DisableKinesisStreamingDestinationInputBody {
        DisableKinesisStreamingDestinationInputBody {
            table_name: &self.table_name,
            stream_arn: &self.stream_arn,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DisableKinesisStreamingDestinationInput`](crate::input::DisableKinesisStreamingDestinationInput)
    pub fn builder() -> crate::input::disable_kinesis_streaming_destination_input::Builder {
        crate::input::disable_kinesis_streaming_destination_input::Builder::default()
    }
}

/// See [`EnableKinesisStreamingDestinationInput`](crate::input::EnableKinesisStreamingDestinationInput)
pub mod enable_kinesis_streaming_destination_input {

    use crate::input::EnableKinesisStreamingDestinationInput;
    use crate::operation::EnableKinesisStreamingDestination;
    /// A builder for [`EnableKinesisStreamingDestinationInput`](crate::input::EnableKinesisStreamingDestinationInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        stream_arn: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DynamoDB table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The ARN for a Kinesis data stream.</p>
        pub fn stream_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.stream_arn = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`EnableKinesisStreamingDestination`](crate::operation::EnableKinesisStreamingDestination)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<EnableKinesisStreamingDestination, ()> {
            let op =
                EnableKinesisStreamingDestination::new(EnableKinesisStreamingDestinationInput {
                    table_name: self.table_name,
                    stream_arn: self.stream_arn,
                });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl EnableKinesisStreamingDestinationInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.EnableKinesisStreamingDestination",
            )
    }
    fn body(&self) -> EnableKinesisStreamingDestinationInputBody {
        EnableKinesisStreamingDestinationInputBody {
            table_name: &self.table_name,
            stream_arn: &self.stream_arn,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`EnableKinesisStreamingDestinationInput`](crate::input::EnableKinesisStreamingDestinationInput)
    pub fn builder() -> crate::input::enable_kinesis_streaming_destination_input::Builder {
        crate::input::enable_kinesis_streaming_destination_input::Builder::default()
    }
}

/// See [`ExecuteStatementInput`](crate::input::ExecuteStatementInput)
pub mod execute_statement_input {

    use crate::input::ExecuteStatementInput;
    use crate::model::AttributeValue;
    use crate::operation::ExecuteStatement;
    /// A builder for [`ExecuteStatementInput`](crate::input::ExecuteStatementInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        statement: ::std::option::Option<::std::string::String>,
        parameters: ::std::option::Option<::std::vec::Vec<AttributeValue>>,
        consistent_read: ::std::option::Option<bool>,
        next_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The PartiQL statement representing the operation to run.
        /// </p>
        pub fn statement(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.statement = Some(inp.into());
            self
        }
        /// <p>
        /// The parameters for the PartiQL statement, if any.
        /// </p>
        pub fn parameters(mut self, inp: ::std::vec::Vec<AttributeValue>) -> Self {
            self.parameters = Some(inp);
            self
        }
        /// <p>
        /// The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        /// </p>
        pub fn consistent_read(mut self, inp: bool) -> Self {
            self.consistent_read = Some(inp);
            self
        }
        /// <p>
        /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
        /// </p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ExecuteStatement`](crate::operation::ExecuteStatement)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ExecuteStatement, ()> {
            let op = ExecuteStatement::new(ExecuteStatementInput {
                statement: self.statement,
                parameters: self.parameters,
                consistent_read: self.consistent_read,
                next_token: self.next_token,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ExecuteStatementInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ExecuteStatement")
    }
    fn body(&self) -> ExecuteStatementInputBody {
        ExecuteStatementInputBody {
            statement: &self.statement,
            parameters: &self.parameters,
            consistent_read: &self.consistent_read,
            next_token: &self.next_token,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ExecuteStatementInput`](crate::input::ExecuteStatementInput)
    pub fn builder() -> crate::input::execute_statement_input::Builder {
        crate::input::execute_statement_input::Builder::default()
    }
}

/// See [`ExecuteTransactionInput`](crate::input::ExecuteTransactionInput)
pub mod execute_transaction_input {

    use crate::input::ExecuteTransactionInput;
    use crate::model::ParameterizedStatement;
    use crate::operation::ExecuteTransaction;
    /// A builder for [`ExecuteTransactionInput`](crate::input::ExecuteTransactionInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        transact_statements: ::std::option::Option<::std::vec::Vec<ParameterizedStatement>>,
        client_request_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The list of PartiQL statements representing the transaction to run.
        /// </p>
        pub fn transact_statements(mut self, inp: ::std::vec::Vec<ParameterizedStatement>) -> Self {
            self.transact_statements = Some(inp);
            self
        }
        /// <p>
        /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
        /// </p>
        pub fn client_request_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.client_request_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ExecuteTransaction`](crate::operation::ExecuteTransaction)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ExecuteTransaction, ()> {
            let op = ExecuteTransaction::new(ExecuteTransactionInput {
                transact_statements: self.transact_statements,
                client_request_token: self
                    .client_request_token
                    .or_else(|| Some(_config.token_provider.token())),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ExecuteTransactionInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ExecuteTransaction")
    }
    fn body(&self) -> ExecuteTransactionInputBody {
        ExecuteTransactionInputBody {
            transact_statements: &self.transact_statements,
            client_request_token: &self.client_request_token,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ExecuteTransactionInput`](crate::input::ExecuteTransactionInput)
    pub fn builder() -> crate::input::execute_transaction_input::Builder {
        crate::input::execute_transaction_input::Builder::default()
    }
}

/// See [`ExportTableToPointInTimeInput`](crate::input::ExportTableToPointInTimeInput)
pub mod export_table_to_point_in_time_input {

    use crate::input::ExportTableToPointInTimeInput;
    use crate::model::ExportFormat;
    use crate::model::S3SseAlgorithm;
    use crate::operation::ExportTableToPointInTime;
    use smithy_types::Instant;
    /// A builder for [`ExportTableToPointInTimeInput`](crate::input::ExportTableToPointInTimeInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_arn: ::std::option::Option<::std::string::String>,
        export_time: ::std::option::Option<Instant>,
        client_token: ::std::option::Option<::std::string::String>,
        s3_bucket: ::std::option::Option<::std::string::String>,
        s3_bucket_owner: ::std::option::Option<::std::string::String>,
        s3_prefix: ::std::option::Option<::std::string::String>,
        s3_sse_algorithm: ::std::option::Option<S3SseAlgorithm>,
        s3_sse_kms_key_id: ::std::option::Option<::std::string::String>,
        export_format: ::std::option::Option<ExportFormat>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) associated with the table to export.</p>
        pub fn table_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_arn = Some(inp.into());
            self
        }
        /// <p>Time in the past from which to export table data. The table export will be a snapshot
        /// of the table's state at this point in time.</p>
        pub fn export_time(mut self, inp: Instant) -> Self {
            self.export_time = Some(inp);
            self
        }
        /// <p>Providing a <code>ClientToken</code> makes the call to
        /// <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple
        /// identical calls have the same effect as one single call.</p>
        /// <p>A client token is valid for 8 hours after the first request that uses it is
        /// completed. After 8 hours, any request with the same client token is treated as a new
        /// request. Do not resubmit the same request with the same client token for more than 8
        /// hours, or the result might not be idempotent.</p>
        /// <p>If you submit a request with the same client token but a change in other parameters
        /// within the 8-hour idempotency window, DynamoDB returns an
        /// <code>IdempotentParameterMismatch</code> exception.</p>
        pub fn client_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
        pub fn s3_bucket(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.s3_bucket = Some(inp.into());
            self
        }
        /// <p>The ID of the AWS account that owns the bucket the export will be stored in.</p>
        pub fn s3_bucket_owner(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.s3_bucket_owner = Some(inp.into());
            self
        }
        /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported
        /// snapshot.</p>
        pub fn s3_prefix(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.s3_prefix = Some(inp.into());
            self
        }
        /// <p>Type of encryption used on the bucket where export data will be stored. Valid values
        /// for <code>S3SseAlgorithm</code> are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KMS</code> - server-side encryption with AWS KMS managed keys</p>
        /// </li>
        /// </ul>
        pub fn s3_sse_algorithm(mut self, inp: S3SseAlgorithm) -> Self {
            self.s3_sse_algorithm = Some(inp);
            self
        }
        /// <p>The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will
        /// be stored (if applicable).</p>
        pub fn s3_sse_kms_key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.s3_sse_kms_key_id = Some(inp.into());
            self
        }
        /// <p>The format for the exported data. Valid values for <code>ExportFormat</code> are
        /// <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
        pub fn export_format(mut self, inp: ExportFormat) -> Self {
            self.export_format = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ExportTableToPointInTime`](crate::operation::ExportTableToPointInTime)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ExportTableToPointInTime, ()> {
            let op = ExportTableToPointInTime::new(ExportTableToPointInTimeInput {
                table_arn: self.table_arn,
                export_time: self.export_time,
                client_token: self
                    .client_token
                    .or_else(|| Some(_config.token_provider.token())),
                s3_bucket: self.s3_bucket,
                s3_bucket_owner: self.s3_bucket_owner,
                s3_prefix: self.s3_prefix,
                s3_sse_algorithm: self.s3_sse_algorithm,
                s3_sse_kms_key_id: self.s3_sse_kms_key_id,
                export_format: self.export_format,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ExportTableToPointInTimeInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ExportTableToPointInTime")
    }
    fn body(&self) -> ExportTableToPointInTimeInputBody {
        ExportTableToPointInTimeInputBody {
            table_arn: &self.table_arn,
            export_time: &self.export_time,
            client_token: &self.client_token,
            s3_bucket: &self.s3_bucket,
            s3_bucket_owner: &self.s3_bucket_owner,
            s3_prefix: &self.s3_prefix,
            s3_sse_algorithm: &self.s3_sse_algorithm,
            s3_sse_kms_key_id: &self.s3_sse_kms_key_id,
            export_format: &self.export_format,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ExportTableToPointInTimeInput`](crate::input::ExportTableToPointInTimeInput)
    pub fn builder() -> crate::input::export_table_to_point_in_time_input::Builder {
        crate::input::export_table_to_point_in_time_input::Builder::default()
    }
}

/// See [`GetItemInput`](crate::input::GetItemInput)
pub mod get_item_input {

    use crate::input::GetItemInput;
    use crate::model::AttributeValue;
    use crate::model::ReturnConsumedCapacity;
    use crate::operation::GetItem;
    /// A builder for [`GetItemInput`](crate::input::GetItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        key: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        consistent_read: ::std::option::Option<bool>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        projection_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The name of the table containing the requested item.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
        /// the item to retrieve.</p>
        /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
        pub fn key(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.key = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn attributes_to_get(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.attributes_to_get = Some(inp);
            self
        }
        /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
        pub fn consistent_read(mut self, inp: bool) -> Self {
            self.consistent_read = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
        /// <p>If no attribute names are specified, then all attributes are returned. If any of the
        /// requested attributes are not found, they do not appear in the result.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn projection_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.projection_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetItem`](crate::operation::GetItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetItem, ()> {
            let op = GetItem::new(GetItemInput {
                table_name: self.table_name,
                key: self.key,
                attributes_to_get: self.attributes_to_get,
                consistent_read: self.consistent_read,
                return_consumed_capacity: self.return_consumed_capacity,
                projection_expression: self.projection_expression,
                expression_attribute_names: self.expression_attribute_names,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl GetItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.GetItem")
    }
    fn body(&self) -> GetItemInputBody {
        GetItemInputBody {
            table_name: &self.table_name,
            key: &self.key,
            attributes_to_get: &self.attributes_to_get,
            consistent_read: &self.consistent_read,
            return_consumed_capacity: &self.return_consumed_capacity,
            projection_expression: &self.projection_expression,
            expression_attribute_names: &self.expression_attribute_names,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetItemInput`](crate::input::GetItemInput)
    pub fn builder() -> crate::input::get_item_input::Builder {
        crate::input::get_item_input::Builder::default()
    }
}

/// See [`ListBackupsInput`](crate::input::ListBackupsInput)
pub mod list_backups_input {

    use crate::input::ListBackupsInput;
    use crate::model::BackupTypeFilter;
    use crate::operation::ListBackups;
    use smithy_types::Instant;
    /// A builder for [`ListBackupsInput`](crate::input::ListBackupsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        time_range_lower_bound: ::std::option::Option<Instant>,
        time_range_upper_bound: ::std::option::Option<Instant>,
        exclusive_start_backup_arn: ::std::option::Option<::std::string::String>,
        backup_type: ::std::option::Option<BackupTypeFilter>,
    }
    impl Builder {
        /// <p>The backups from the table specified by <code>TableName</code> are listed. </p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Maximum number of backups to return at once.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Only backups created after this time are listed. <code>TimeRangeLowerBound</code> is inclusive.</p>
        pub fn time_range_lower_bound(mut self, inp: Instant) -> Self {
            self.time_range_lower_bound = Some(inp);
            self
        }
        /// <p>Only backups created before this time are listed. <code>TimeRangeUpperBound</code> is exclusive. </p>
        pub fn time_range_upper_bound(mut self, inp: Instant) -> Self {
            self.time_range_upper_bound = Some(inp);
            self
        }
        /// <p>
        /// <code>LastEvaluatedBackupArn</code> is the Amazon Resource Name (ARN) of the backup last
        /// evaluated when the current page of results was returned, inclusive of the current page
        /// of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a
        /// new <code>ListBackups</code> operation in order to fetch the next page of results. </p>
        pub fn exclusive_start_backup_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.exclusive_start_backup_arn = Some(inp.into());
            self
        }
        /// <p>The backups from the table specified by <code>BackupType</code> are listed.</p>
        /// <p>Where <code>BackupType</code> can be:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>USER</code> - On-demand backup created by you.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SYSTEM</code> - On-demand backup automatically created by
        /// DynamoDB.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL</code> - All types of on-demand backups (USER and SYSTEM).</p>
        /// </li>
        /// </ul>
        pub fn backup_type(mut self, inp: BackupTypeFilter) -> Self {
            self.backup_type = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListBackups`](crate::operation::ListBackups)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListBackups, ()> {
            let op = ListBackups::new(ListBackupsInput {
                table_name: self.table_name,
                limit: self.limit,
                time_range_lower_bound: self.time_range_lower_bound,
                time_range_upper_bound: self.time_range_upper_bound,
                exclusive_start_backup_arn: self.exclusive_start_backup_arn,
                backup_type: self.backup_type,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListBackupsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListBackups")
    }
    fn body(&self) -> ListBackupsInputBody {
        ListBackupsInputBody {
            table_name: &self.table_name,
            limit: &self.limit,
            time_range_lower_bound: &self.time_range_lower_bound,
            time_range_upper_bound: &self.time_range_upper_bound,
            exclusive_start_backup_arn: &self.exclusive_start_backup_arn,
            backup_type: &self.backup_type,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListBackupsInput`](crate::input::ListBackupsInput)
    pub fn builder() -> crate::input::list_backups_input::Builder {
        crate::input::list_backups_input::Builder::default()
    }
}

/// See [`ListContributorInsightsInput`](crate::input::ListContributorInsightsInput)
pub mod list_contributor_insights_input {

    use crate::input::ListContributorInsightsInput;
    use crate::operation::ListContributorInsights;
    /// A builder for [`ListContributorInsightsInput`](crate::input::ListContributorInsightsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        next_token: ::std::option::Option<::std::string::String>,
        max_results: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The name of the table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>A token to for the desired page, if there is one.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// <p>Maximum number of results to return per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.max_results = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListContributorInsights`](crate::operation::ListContributorInsights)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListContributorInsights, ()> {
            let op = ListContributorInsights::new(ListContributorInsightsInput {
                table_name: self.table_name,
                next_token: self.next_token,
                max_results: self.max_results.unwrap_or_default(),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListContributorInsightsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListContributorInsights")
    }
    fn body(&self) -> ListContributorInsightsInputBody {
        ListContributorInsightsInputBody {
            table_name: &self.table_name,
            next_token: &self.next_token,
            max_results: &self.max_results,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListContributorInsightsInput`](crate::input::ListContributorInsightsInput)
    pub fn builder() -> crate::input::list_contributor_insights_input::Builder {
        crate::input::list_contributor_insights_input::Builder::default()
    }
}

/// See [`ListExportsInput`](crate::input::ListExportsInput)
pub mod list_exports_input {

    use crate::input::ListExportsInput;
    use crate::operation::ListExports;
    /// A builder for [`ListExportsInput`](crate::input::ListExportsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_arn: ::std::option::Option<::std::string::String>,
        max_results: ::std::option::Option<i32>,
        next_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) associated with the exported table.</p>
        pub fn table_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_arn = Some(inp.into());
            self
        }
        /// <p>Maximum number of results to return per page.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.max_results = Some(inp);
            self
        }
        /// <p>An optional string that, if supplied, must be copied from the output of a previous
        /// call to <code>ListExports</code>. When provided in this manner, the API fetches the next
        /// page of results.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListExports`](crate::operation::ListExports)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListExports, ()> {
            let op = ListExports::new(ListExportsInput {
                table_arn: self.table_arn,
                max_results: self.max_results,
                next_token: self.next_token,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListExportsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListExports")
    }
    fn body(&self) -> ListExportsInputBody {
        ListExportsInputBody {
            table_arn: &self.table_arn,
            max_results: &self.max_results,
            next_token: &self.next_token,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListExportsInput`](crate::input::ListExportsInput)
    pub fn builder() -> crate::input::list_exports_input::Builder {
        crate::input::list_exports_input::Builder::default()
    }
}

/// See [`ListGlobalTablesInput`](crate::input::ListGlobalTablesInput)
pub mod list_global_tables_input {

    use crate::input::ListGlobalTablesInput;
    use crate::operation::ListGlobalTables;
    /// A builder for [`ListGlobalTablesInput`](crate::input::ListGlobalTablesInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        exclusive_start_global_table_name: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        region_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The first global table name that this operation will evaluate.</p>
        pub fn exclusive_start_global_table_name(
            mut self,
            inp: impl Into<::std::string::String>,
        ) -> Self {
            self.exclusive_start_global_table_name = Some(inp.into());
            self
        }
        /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
        /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
        /// with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Lists the global tables in a specific Region.</p>
        pub fn region_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.region_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListGlobalTables`](crate::operation::ListGlobalTables)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListGlobalTables, ()> {
            let op = ListGlobalTables::new(ListGlobalTablesInput {
                exclusive_start_global_table_name: self.exclusive_start_global_table_name,
                limit: self.limit,
                region_name: self.region_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListGlobalTablesInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListGlobalTables")
    }
    fn body(&self) -> ListGlobalTablesInputBody {
        ListGlobalTablesInputBody {
            exclusive_start_global_table_name: &self.exclusive_start_global_table_name,
            limit: &self.limit,
            region_name: &self.region_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListGlobalTablesInput`](crate::input::ListGlobalTablesInput)
    pub fn builder() -> crate::input::list_global_tables_input::Builder {
        crate::input::list_global_tables_input::Builder::default()
    }
}

/// See [`ListTablesInput`](crate::input::ListTablesInput)
pub mod list_tables_input {

    use crate::input::ListTablesInput;
    use crate::operation::ListTables;
    /// A builder for [`ListTablesInput`](crate::input::ListTablesInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        exclusive_start_table_name: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The first table name that this operation will evaluate. Use the value that was returned for
        /// <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page
        /// of results.</p>
        pub fn exclusive_start_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.exclusive_start_table_name = Some(inp.into());
            self
        }
        /// <p>A maximum number of table names to return. If this parameter is not specified, the limit is 100.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListTables`](crate::operation::ListTables)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListTables, ()> {
            let op = ListTables::new(ListTablesInput {
                exclusive_start_table_name: self.exclusive_start_table_name,
                limit: self.limit,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListTablesInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListTables")
    }
    fn body(&self) -> ListTablesInputBody {
        ListTablesInputBody {
            exclusive_start_table_name: &self.exclusive_start_table_name,
            limit: &self.limit,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListTablesInput`](crate::input::ListTablesInput)
    pub fn builder() -> crate::input::list_tables_input::Builder {
        crate::input::list_tables_input::Builder::default()
    }
}

/// See [`ListTagsOfResourceInput`](crate::input::ListTagsOfResourceInput)
pub mod list_tags_of_resource_input {

    use crate::input::ListTagsOfResourceInput;
    use crate::operation::ListTagsOfResource;
    /// A builder for [`ListTagsOfResourceInput`](crate::input::ListTagsOfResourceInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        resource_arn: ::std::option::Option<::std::string::String>,
        next_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.resource_arn = Some(inp.into());
            self
        }
        /// <p>An optional string that, if supplied, must be copied from the output of a previous
        /// call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListTagsOfResource`](crate::operation::ListTagsOfResource)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListTagsOfResource, ()> {
            let op = ListTagsOfResource::new(ListTagsOfResourceInput {
                resource_arn: self.resource_arn,
                next_token: self.next_token,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListTagsOfResourceInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.ListTagsOfResource")
    }
    fn body(&self) -> ListTagsOfResourceInputBody {
        ListTagsOfResourceInputBody {
            resource_arn: &self.resource_arn,
            next_token: &self.next_token,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListTagsOfResourceInput`](crate::input::ListTagsOfResourceInput)
    pub fn builder() -> crate::input::list_tags_of_resource_input::Builder {
        crate::input::list_tags_of_resource_input::Builder::default()
    }
}

/// See [`PutItemInput`](crate::input::PutItemInput)
pub mod put_item_input {

    use crate::input::PutItemInput;
    use crate::model::AttributeValue;
    use crate::model::ConditionalOperator;
    use crate::model::ExpectedAttributeValue;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::ReturnItemCollectionMetrics;
    use crate::model::ReturnValue;
    use crate::operation::PutItem;
    /// A builder for [`PutItemInput`](crate::input::PutItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        item: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        expected: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        >,
        return_values: ::std::option::Option<ReturnValue>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
        conditional_operator: ::std::option::Option<ConditionalOperator>,
        condition_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        expression_attribute_values: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
    }
    impl Builder {
        /// <p>The name of the table to contain the item.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p>
        /// <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p>
        /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
        /// <p>Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.</p>
        /// <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        /// <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>
        pub fn item(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.item = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn expected(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        ) -> Self {
            self.expected = Some(inp);
            self
        }
        /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
        /// were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
        /// <code>NONE</code>, then nothing is returned. (This setting is the default for
        /// <code>ReturnValues</code>.)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the
        /// content of the old item is returned.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
        /// <code>PutItem</code> does not recognize any values other than <code>NONE</code> or
        /// <code>ALL_OLD</code>.</p>
        /// </note>
        pub fn return_values(mut self, inp: ReturnValue) -> Self {
            self.return_values = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
        /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
        pub fn return_item_collection_metrics(mut self, inp: ReturnItemCollectionMetrics) -> Self {
            self.return_item_collection_metrics = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn conditional_operator(mut self, inp: ConditionalOperator) -> Self {
            self.conditional_operator = Some(inp);
            self
        }
        /// <p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to
        /// succeed.</p>
        /// <p>An expression can contain any of the following:</p>
        /// <ul>
        /// <li>
        /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
        /// </p>
        /// <p>These function names are case-sensitive.</p>
        /// </li>
        /// <li>
        /// <p>Comparison operators: <code>= | <> |
        /// < | > | <= | >= |
        /// BETWEEN | IN </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p> Logical operators: <code>AND | OR | NOT</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information on condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn condition_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.condition_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// <p>One or more values that can be substituted in an expression.</p>
        /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
        /// <p>
        /// <code>Available | Backordered | Discontinued</code>
        /// </p>
        /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
        /// <p>
        /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
        /// </p>
        /// <p>You could then use these values in an expression, such as this:</p>
        /// <p>
        /// <code>ProductStatus IN (:avail, :back, :disc)</code>
        /// </p>
        /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_values(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.expression_attribute_values = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`PutItem`](crate::operation::PutItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<PutItem, ()> {
            let op = PutItem::new(PutItemInput {
                table_name: self.table_name,
                item: self.item,
                expected: self.expected,
                return_values: self.return_values,
                return_consumed_capacity: self.return_consumed_capacity,
                return_item_collection_metrics: self.return_item_collection_metrics,
                conditional_operator: self.conditional_operator,
                condition_expression: self.condition_expression,
                expression_attribute_names: self.expression_attribute_names,
                expression_attribute_values: self.expression_attribute_values,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl PutItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.PutItem")
    }
    fn body(&self) -> PutItemInputBody {
        PutItemInputBody {
            table_name: &self.table_name,
            item: &self.item,
            expected: &self.expected,
            return_values: &self.return_values,
            return_consumed_capacity: &self.return_consumed_capacity,
            return_item_collection_metrics: &self.return_item_collection_metrics,
            conditional_operator: &self.conditional_operator,
            condition_expression: &self.condition_expression,
            expression_attribute_names: &self.expression_attribute_names,
            expression_attribute_values: &self.expression_attribute_values,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`PutItemInput`](crate::input::PutItemInput)
    pub fn builder() -> crate::input::put_item_input::Builder {
        crate::input::put_item_input::Builder::default()
    }
}

/// See [`QueryInput`](crate::input::QueryInput)
pub mod query_input {

    use crate::input::QueryInput;
    use crate::model::AttributeValue;
    use crate::model::Condition;
    use crate::model::ConditionalOperator;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::Select;
    use crate::operation::Query;
    /// A builder for [`QueryInput`](crate::input::QueryInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        index_name: ::std::option::Option<::std::string::String>,
        select: ::std::option::Option<Select>,
        attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        limit: ::std::option::Option<i32>,
        consistent_read: ::std::option::Option<bool>,
        key_conditions:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
        query_filter:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
        conditional_operator: ::std::option::Option<ConditionalOperator>,
        scan_index_forward: ::std::option::Option<bool>,
        exclusive_start_key: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        projection_expression: ::std::option::Option<::std::string::String>,
        filter_expression: ::std::option::Option<::std::string::String>,
        key_condition_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        expression_attribute_values: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
    }
    impl Builder {
        /// <p>The name of the table containing the requested items.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that
        /// if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code>
        /// </p>
        pub fn index_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.index_name = Some(inp.into());
            self
        }
        /// <p>The attributes to be returned in the
        /// result. You can retrieve all item attributes, specific item attributes, the count of
        /// matching items, or in the case of an index, some or all of the attributes projected into
        /// the index.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
        /// specified table or index. If you query a local secondary index, then for each
        /// matching item in the index, DynamoDB fetches the entire item from the parent
        /// table. If the index is configured to project all item attributes, then all of
        /// the data can be obtained from the local secondary index, and no fetching is
        /// required.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
        /// Retrieves all attributes that have been projected into the index. If the
        /// index is configured to project all attributes, this return value is
        /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>COUNT</code> - Returns the number of matching items, rather than the
        /// matching items themselves.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
        /// <code>AttributesToGet</code>. This return value is equivalent to
        /// specifying <code>AttributesToGet</code> without specifying any value
        /// for <code>Select</code>.</p>
        /// <p>If you query or scan a local secondary index and request only attributes that
        /// are projected into that index, the operation will read only the index and not
        /// the table. If any of the requested attributes are not projected into the local
        /// secondary index, DynamoDB fetches each of these attributes from the parent
        /// table. This extra fetching incurs additional throughput cost and latency.</p>
        /// <p>If you query or scan a global secondary index, you can only request
        /// attributes that are projected into the index. Global secondary index queries
        /// cannot fetch attributes from the parent table.</p>
        /// </li>
        /// </ul>
        /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
        /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
        /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
        /// use both <code>Select</code> and <code>AttributesToGet</code>
        /// together in a single request, unless the value for <code>Select</code> is
        /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
        /// <code>AttributesToGet</code> without any value for
        /// <code>Select</code>.)</p>
        /// <note>
        /// <p>If you use the <code>ProjectionExpression</code> parameter, then
        /// the value for <code>Select</code> can only be
        /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
        /// <code>Select</code> will return an error.</p>
        /// </note>
        pub fn select(mut self, inp: Select) -> Self {
            self.select = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn attributes_to_get(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.attributes_to_get = Some(inp);
            self
        }
        /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
        /// If DynamoDB processes the number of items up to the limit while processing the results,
        /// it stops the operation and returns the matching values up to that point, and a key in
        /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
        /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
        /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
        /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
        /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query and Scan</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
        /// <p>Strongly consistent reads
        /// are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to
        /// <code>true</code>, you will receive a <code>ValidationException</code>.</p>
        pub fn consistent_read(mut self, inp: bool) -> Self {
            self.consistent_read = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>KeyConditionExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn key_conditions(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, Condition>,
        ) -> Self {
            self.key_conditions = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn query_filter(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, Condition>,
        ) -> Self {
            self.query_filter = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn conditional_operator(mut self, inp: ConditionalOperator) -> Self {
            self.conditional_operator = Some(inp);
            self
        }
        /// <p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p>
        /// <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p>
        /// <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>
        pub fn scan_index_forward(mut self, inp: bool) -> Self {
            self.scan_index_forward = Some(inp);
            self
        }
        /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
        /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number, or Binary. No
        /// set data types are allowed.</p>
        pub fn exclusive_start_key(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.exclusive_start_key = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
        /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn projection_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.projection_expression = Some(inp.into());
            self
        }
        /// <p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but
        /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
        /// criteria are not returned.</p>
        /// <p>A <code>FilterExpression</code> does not allow key attributes.  You cannot define a filter expression based on a partition key or a sort key.</p>
        /// <note>
        /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
        /// filtering does not consume any additional read capacity units.</p>
        /// </note>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
        /// Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn filter_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.filter_expression = Some(inp.into());
            self
        }
        /// <p>The condition that specifies the key values for items to be retrieved by the
        /// <code>Query</code> action.</p>
        /// <p>The condition must perform an equality test on a single partition key value.</p>
        /// <p>The condition can optionally perform one of several comparison tests on a single
        /// sort key value. This allows <code>Query</code> to retrieve one item with a given
        /// partition key value and sort key value, or several items that have the same partition
        /// key value but different sort key values.</p>
        /// <p>The partition key equality test is required, and must be specified in the following format:</p>
        /// <p>
        /// <code>partitionKeyName</code>
        /// <i>=</i>
        /// <code>:partitionkeyval</code>
        /// </p>
        /// <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition
        /// for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p>
        /// <p>
        /// <code>partitionKeyName</code>
        /// <code>=</code>
        /// <code>:partitionkeyval</code>
        /// <code>AND</code>
        /// <code>sortKeyName</code>
        /// <code>=</code>
        /// <code>:sortkeyval</code>
        /// </p>
        /// <p>Valid comparisons for the sort key condition are as follows:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code>=</code>
        /// <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code><</code>
        /// <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code><=</code>
        /// <code>:sortkeyval</code> - true if the sort key value is less than or equal to
        /// <code>:sortkeyval</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code>></code>
        /// <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code>>= </code>
        /// <code>:sortkeyval</code> - true if the sort key value is greater than
        /// or equal to <code>:sortkeyval</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sortKeyName</code>
        /// <code>BETWEEN</code>
        /// <code>:sortkeyval1</code>
        /// <code>AND</code>
        /// <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to
        /// <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>begins_with (</code>
        /// <code>sortKeyName</code>, <code>:sortkeyval</code>
        /// <code>)</code> -
        /// true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.)  Note that the function name
        /// <code>begins_with</code> is case-sensitive.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as
        /// <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p>
        /// <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of
        /// the partition key and sort key with placeholder tokens. This option might be necessary if an attribute
        /// name conflicts with a DynamoDB reserved word. For example, the following
        /// <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved
        /// word:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Size = :myval</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute
        /// name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#S = :myval</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For a list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
        /// Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        /// <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>,
        /// see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using Placeholders for Attribute
        /// Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn key_condition_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_condition_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for
        /// <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// <p>One or more values that can be substituted in an expression.</p>
        /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the
        /// <i>ProductStatus</i> attribute was one of the following: </p>
        /// <p>
        /// <code>Available | Backordered | Discontinued</code>
        /// </p>
        /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
        /// <p>
        /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
        /// </p>
        /// <p>You could then use these values in an expression, such as this:</p>
        /// <p>
        /// <code>ProductStatus IN (:avail, :back, :disc)</code>
        /// </p>
        /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn expression_attribute_values(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.expression_attribute_values = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Query`](crate::operation::Query)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Query, ()> {
            let op = Query::new(QueryInput {
                table_name: self.table_name,
                index_name: self.index_name,
                select: self.select,
                attributes_to_get: self.attributes_to_get,
                limit: self.limit,
                consistent_read: self.consistent_read,
                key_conditions: self.key_conditions,
                query_filter: self.query_filter,
                conditional_operator: self.conditional_operator,
                scan_index_forward: self.scan_index_forward,
                exclusive_start_key: self.exclusive_start_key,
                return_consumed_capacity: self.return_consumed_capacity,
                projection_expression: self.projection_expression,
                filter_expression: self.filter_expression,
                key_condition_expression: self.key_condition_expression,
                expression_attribute_names: self.expression_attribute_names,
                expression_attribute_values: self.expression_attribute_values,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl QueryInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.Query")
    }
    fn body(&self) -> QueryInputBody {
        QueryInputBody {
            table_name: &self.table_name,
            index_name: &self.index_name,
            select: &self.select,
            attributes_to_get: &self.attributes_to_get,
            limit: &self.limit,
            consistent_read: &self.consistent_read,
            key_conditions: &self.key_conditions,
            query_filter: &self.query_filter,
            conditional_operator: &self.conditional_operator,
            scan_index_forward: &self.scan_index_forward,
            exclusive_start_key: &self.exclusive_start_key,
            return_consumed_capacity: &self.return_consumed_capacity,
            projection_expression: &self.projection_expression,
            filter_expression: &self.filter_expression,
            key_condition_expression: &self.key_condition_expression,
            expression_attribute_names: &self.expression_attribute_names,
            expression_attribute_values: &self.expression_attribute_values,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`QueryInput`](crate::input::QueryInput)
    pub fn builder() -> crate::input::query_input::Builder {
        crate::input::query_input::Builder::default()
    }
}

/// See [`RestoreTableFromBackupInput`](crate::input::RestoreTableFromBackupInput)
pub mod restore_table_from_backup_input {

    use crate::input::RestoreTableFromBackupInput;
    use crate::model::BillingMode;
    use crate::model::GlobalSecondaryIndex;
    use crate::model::LocalSecondaryIndex;
    use crate::model::ProvisionedThroughput;
    use crate::model::SSESpecification;
    use crate::operation::RestoreTableFromBackup;
    /// A builder for [`RestoreTableFromBackupInput`](crate::input::RestoreTableFromBackupInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        target_table_name: ::std::option::Option<::std::string::String>,
        backup_arn: ::std::option::Option<::std::string::String>,
        billing_mode_override: ::std::option::Option<BillingMode>,
        global_secondary_index_override:
            ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
        local_secondary_index_override: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
        provisioned_throughput_override: ::std::option::Option<ProvisionedThroughput>,
        sse_specification_override: ::std::option::Option<SSESpecification>,
    }
    impl Builder {
        /// <p>The name of the new table to which the backup must be restored.</p>
        pub fn target_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.target_table_name = Some(inp.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
        pub fn backup_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.backup_arn = Some(inp.into());
            self
        }
        /// <p>The billing mode of the restored table.</p>
        pub fn billing_mode_override(mut self, inp: BillingMode) -> Self {
            self.billing_mode_override = Some(inp);
            self
        }
        /// <p>List of global secondary indexes for the restored table. The indexes
        /// provided should match existing secondary indexes. You can choose to exclude
        /// some or all of the indexes at the time of restore.</p>
        pub fn global_secondary_index_override(
            mut self,
            inp: ::std::vec::Vec<GlobalSecondaryIndex>,
        ) -> Self {
            self.global_secondary_index_override = Some(inp);
            self
        }
        /// <p>List of local secondary indexes for the restored table. The indexes
        /// provided should match existing secondary indexes. You can choose to exclude
        /// some or all of the indexes at the time of restore.</p>
        pub fn local_secondary_index_override(
            mut self,
            inp: ::std::vec::Vec<LocalSecondaryIndex>,
        ) -> Self {
            self.local_secondary_index_override = Some(inp);
            self
        }
        /// <p>Provisioned throughput settings for the restored table.</p>
        pub fn provisioned_throughput_override(mut self, inp: ProvisionedThroughput) -> Self {
            self.provisioned_throughput_override = Some(inp);
            self
        }
        /// <p>The new server-side encryption settings for the restored table.</p>
        pub fn sse_specification_override(mut self, inp: SSESpecification) -> Self {
            self.sse_specification_override = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`RestoreTableFromBackup`](crate::operation::RestoreTableFromBackup)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<RestoreTableFromBackup, ()> {
            let op = RestoreTableFromBackup::new(RestoreTableFromBackupInput {
                target_table_name: self.target_table_name,
                backup_arn: self.backup_arn,
                billing_mode_override: self.billing_mode_override,
                global_secondary_index_override: self.global_secondary_index_override,
                local_secondary_index_override: self.local_secondary_index_override,
                provisioned_throughput_override: self.provisioned_throughput_override,
                sse_specification_override: self.sse_specification_override,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl RestoreTableFromBackupInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.RestoreTableFromBackup")
    }
    fn body(&self) -> RestoreTableFromBackupInputBody {
        RestoreTableFromBackupInputBody {
            target_table_name: &self.target_table_name,
            backup_arn: &self.backup_arn,
            billing_mode_override: &self.billing_mode_override,
            global_secondary_index_override: &self.global_secondary_index_override,
            local_secondary_index_override: &self.local_secondary_index_override,
            provisioned_throughput_override: &self.provisioned_throughput_override,
            sse_specification_override: &self.sse_specification_override,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`RestoreTableFromBackupInput`](crate::input::RestoreTableFromBackupInput)
    pub fn builder() -> crate::input::restore_table_from_backup_input::Builder {
        crate::input::restore_table_from_backup_input::Builder::default()
    }
}

/// See [`RestoreTableToPointInTimeInput`](crate::input::RestoreTableToPointInTimeInput)
pub mod restore_table_to_point_in_time_input {

    use crate::input::RestoreTableToPointInTimeInput;
    use crate::model::BillingMode;
    use crate::model::GlobalSecondaryIndex;
    use crate::model::LocalSecondaryIndex;
    use crate::model::ProvisionedThroughput;
    use crate::model::SSESpecification;
    use crate::operation::RestoreTableToPointInTime;
    use smithy_types::Instant;
    /// A builder for [`RestoreTableToPointInTimeInput`](crate::input::RestoreTableToPointInTimeInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        source_table_arn: ::std::option::Option<::std::string::String>,
        source_table_name: ::std::option::Option<::std::string::String>,
        target_table_name: ::std::option::Option<::std::string::String>,
        use_latest_restorable_time: ::std::option::Option<bool>,
        restore_date_time: ::std::option::Option<Instant>,
        billing_mode_override: ::std::option::Option<BillingMode>,
        global_secondary_index_override:
            ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
        local_secondary_index_override: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
        provisioned_throughput_override: ::std::option::Option<ProvisionedThroughput>,
        sse_specification_override: ::std::option::Option<SSESpecification>,
    }
    impl Builder {
        /// <p>The DynamoDB table that will be restored. This value is an Amazon
        /// Resource Name (ARN).</p>
        pub fn source_table_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.source_table_arn = Some(inp.into());
            self
        }
        /// <p>Name of the source table that is being restored.</p>
        pub fn source_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.source_table_name = Some(inp.into());
            self
        }
        /// <p>The name of the new table to which it must be restored to.</p>
        pub fn target_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.target_table_name = Some(inp.into());
            self
        }
        /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code>
        /// is typically 5 minutes before the current time. </p>
        pub fn use_latest_restorable_time(mut self, inp: bool) -> Self {
            self.use_latest_restorable_time = Some(inp);
            self
        }
        /// <p>Time in the past to restore the table to.</p>
        pub fn restore_date_time(mut self, inp: Instant) -> Self {
            self.restore_date_time = Some(inp);
            self
        }
        /// <p>The billing mode of the restored table.</p>
        pub fn billing_mode_override(mut self, inp: BillingMode) -> Self {
            self.billing_mode_override = Some(inp);
            self
        }
        /// <p>List of global secondary indexes for the restored table. The indexes
        /// provided should match existing secondary indexes. You can choose to exclude
        /// some or all of the indexes at the time of restore.</p>
        pub fn global_secondary_index_override(
            mut self,
            inp: ::std::vec::Vec<GlobalSecondaryIndex>,
        ) -> Self {
            self.global_secondary_index_override = Some(inp);
            self
        }
        /// <p>List of local secondary indexes for the restored table. The indexes
        /// provided should match existing secondary indexes. You can choose to exclude
        /// some or all of the indexes at the time of restore.</p>
        pub fn local_secondary_index_override(
            mut self,
            inp: ::std::vec::Vec<LocalSecondaryIndex>,
        ) -> Self {
            self.local_secondary_index_override = Some(inp);
            self
        }
        /// <p>Provisioned throughput settings for the restored table.</p>
        pub fn provisioned_throughput_override(mut self, inp: ProvisionedThroughput) -> Self {
            self.provisioned_throughput_override = Some(inp);
            self
        }
        /// <p>The new server-side encryption settings for the restored table.</p>
        pub fn sse_specification_override(mut self, inp: SSESpecification) -> Self {
            self.sse_specification_override = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`RestoreTableToPointInTime`](crate::operation::RestoreTableToPointInTime)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<RestoreTableToPointInTime, ()> {
            let op = RestoreTableToPointInTime::new(RestoreTableToPointInTimeInput {
                source_table_arn: self.source_table_arn,
                source_table_name: self.source_table_name,
                target_table_name: self.target_table_name,
                use_latest_restorable_time: self.use_latest_restorable_time,
                restore_date_time: self.restore_date_time,
                billing_mode_override: self.billing_mode_override,
                global_secondary_index_override: self.global_secondary_index_override,
                local_secondary_index_override: self.local_secondary_index_override,
                provisioned_throughput_override: self.provisioned_throughput_override,
                sse_specification_override: self.sse_specification_override,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl RestoreTableToPointInTimeInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.RestoreTableToPointInTime",
            )
    }
    fn body(&self) -> RestoreTableToPointInTimeInputBody {
        RestoreTableToPointInTimeInputBody {
            source_table_arn: &self.source_table_arn,
            source_table_name: &self.source_table_name,
            target_table_name: &self.target_table_name,
            use_latest_restorable_time: &self.use_latest_restorable_time,
            restore_date_time: &self.restore_date_time,
            billing_mode_override: &self.billing_mode_override,
            global_secondary_index_override: &self.global_secondary_index_override,
            local_secondary_index_override: &self.local_secondary_index_override,
            provisioned_throughput_override: &self.provisioned_throughput_override,
            sse_specification_override: &self.sse_specification_override,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`RestoreTableToPointInTimeInput`](crate::input::RestoreTableToPointInTimeInput)
    pub fn builder() -> crate::input::restore_table_to_point_in_time_input::Builder {
        crate::input::restore_table_to_point_in_time_input::Builder::default()
    }
}

/// See [`ScanInput`](crate::input::ScanInput)
pub mod scan_input {

    use crate::input::ScanInput;
    use crate::model::AttributeValue;
    use crate::model::Condition;
    use crate::model::ConditionalOperator;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::Select;
    use crate::operation::Scan;
    /// A builder for [`ScanInput`](crate::input::ScanInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        index_name: ::std::option::Option<::std::string::String>,
        attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        limit: ::std::option::Option<i32>,
        select: ::std::option::Option<Select>,
        scan_filter:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
        conditional_operator: ::std::option::Option<ConditionalOperator>,
        exclusive_start_key: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        total_segments: ::std::option::Option<i32>,
        segment: ::std::option::Option<i32>,
        projection_expression: ::std::option::Option<::std::string::String>,
        filter_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        expression_attribute_values: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        consistent_read: ::std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The name of the table containing the requested items; or, if you provide
        /// <code>IndexName</code>, the name of the table to which that index belongs.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The name of a secondary index to scan. This index can be any local secondary index or global secondary index.  Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>.</p>
        pub fn index_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.index_name = Some(inp.into());
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn attributes_to_get(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.attributes_to_get = Some(inp);
            self
        }
        /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
        /// If DynamoDB processes the number of items up to the limit while processing the results,
        /// it stops the operation and returns the matching values up to that point, and a key in
        /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
        /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
        /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
        /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
        /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Working with Queries</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>The attributes to be returned in the
        /// result. You can retrieve all item attributes, specific item attributes, the count of
        /// matching items, or in the case of an index, some or all of the attributes projected into
        /// the index.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
        /// specified table or index. If you query a local secondary index, then for each
        /// matching item in the index, DynamoDB fetches the entire item from the parent
        /// table. If the index is configured to project all item attributes, then all of
        /// the data can be obtained from the local secondary index, and no fetching is
        /// required.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
        /// Retrieves all attributes that have been projected into the index. If the
        /// index is configured to project all attributes, this return value is
        /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>COUNT</code> - Returns the number of matching items, rather than the
        /// matching items themselves.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
        /// <code>AttributesToGet</code>. This return value is equivalent to
        /// specifying <code>AttributesToGet</code> without specifying any value
        /// for <code>Select</code>.</p>
        /// <p>If you query or scan a local secondary index and request only attributes that
        /// are projected into that index, the operation reads only the index and not the
        /// table. If any of the requested attributes are not projected into the local
        /// secondary index, DynamoDB fetches each of these attributes from the parent
        /// table. This extra fetching incurs additional throughput cost and latency.</p>
        /// <p>If you query or scan a global secondary index, you can only request
        /// attributes that are projected into the index. Global secondary index queries
        /// cannot fetch attributes from the parent table.</p>
        /// </li>
        /// </ul>
        /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
        /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
        /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
        /// use both <code>Select</code> and <code>AttributesToGet</code>
        /// together in a single request, unless the value for <code>Select</code> is
        /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
        /// <code>AttributesToGet</code> without any value for
        /// <code>Select</code>.)</p>
        /// <note>
        /// <p>If you use the <code>ProjectionExpression</code> parameter, then
        /// the value for <code>Select</code> can only be
        /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
        /// <code>Select</code> will return an error.</p>
        /// </note>
        pub fn select(mut self, inp: Select) -> Self {
            self.select = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn scan_filter(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, Condition>,
        ) -> Self {
            self.scan_filter = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn conditional_operator(mut self, inp: ConditionalOperator) -> Self {
            self.conditional_operator = Some(inp);
            self
        }
        /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
        /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>
        /// <p>In a parallel scan, a
        /// <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment
        /// whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>
        pub fn exclusive_start_key(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.exclusive_start_key = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of
        /// segments into which the <code>Scan</code> operation will be divided. The value of
        /// <code>TotalSegments</code> corresponds to the number of application workers that will perform the
        /// parallel scan. For example, if you want to use four application threads to scan a table or an index,
        /// specify a <code>TotalSegments</code> value of 4.</p>
        /// <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal
        /// to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will
        /// be sequential rather than parallel.</p>
        /// <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>
        pub fn total_segments(mut self, inp: i32) -> Self {
            self.total_segments = Some(inp);
            self
        }
        /// <p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be
        /// scanned by an application worker.</p>
        /// <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to
        /// use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value
        /// of 0, the second thread specifies 1, and so on.</p>
        /// <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be
        /// used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code>
        /// operation.</p>
        /// <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value
        /// provided for <code>TotalSegments</code>.</p>
        /// <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>
        pub fn segment(mut self, inp: i32) -> Self {
            self.segment = Some(inp);
            self
        }
        /// <p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
        /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn projection_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.projection_expression = Some(inp.into());
            self
        }
        /// <p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but
        /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
        /// criteria are not returned.</p>
        /// <note>
        /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
        /// filtering does not consume any additional read capacity units.</p>
        /// </note>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn filter_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.filter_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// <p>One or more values that can be substituted in an expression.</p>
        /// <p>Use the <b>:</b> (colon) character in an expression to
        /// dereference an attribute value. For example, suppose that you wanted to check whether
        /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
        /// <p>
        /// <code>Available | Backordered | Discontinued</code>
        /// </p>
        /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
        /// <p>
        /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
        /// </p>
        /// <p>You could then use these values in an expression, such as this:</p>
        /// <p>
        /// <code>ProductStatus IN (:avail, :back, :disc)</code>
        /// </p>
        /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_values(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.expression_attribute_values = Some(inp);
            self
        }
        /// <p>A Boolean value that determines the read consistency model during the scan:</p>
        /// <ul>
        /// <li>
        /// <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from
        /// <code>Scan</code> might not contain the results from other recently
        /// completed write operations (<code>PutItem</code>, <code>UpdateItem</code>, or
        /// <code>DeleteItem</code>).</p>
        /// </li>
        /// <li>
        /// <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p>
        /// <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>
        pub fn consistent_read(mut self, inp: bool) -> Self {
            self.consistent_read = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Scan`](crate::operation::Scan)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Scan, ()> {
            let op = Scan::new(ScanInput {
                table_name: self.table_name,
                index_name: self.index_name,
                attributes_to_get: self.attributes_to_get,
                limit: self.limit,
                select: self.select,
                scan_filter: self.scan_filter,
                conditional_operator: self.conditional_operator,
                exclusive_start_key: self.exclusive_start_key,
                return_consumed_capacity: self.return_consumed_capacity,
                total_segments: self.total_segments,
                segment: self.segment,
                projection_expression: self.projection_expression,
                filter_expression: self.filter_expression,
                expression_attribute_names: self.expression_attribute_names,
                expression_attribute_values: self.expression_attribute_values,
                consistent_read: self.consistent_read,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ScanInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.Scan")
    }
    fn body(&self) -> ScanInputBody {
        ScanInputBody {
            table_name: &self.table_name,
            index_name: &self.index_name,
            attributes_to_get: &self.attributes_to_get,
            limit: &self.limit,
            select: &self.select,
            scan_filter: &self.scan_filter,
            conditional_operator: &self.conditional_operator,
            exclusive_start_key: &self.exclusive_start_key,
            return_consumed_capacity: &self.return_consumed_capacity,
            total_segments: &self.total_segments,
            segment: &self.segment,
            projection_expression: &self.projection_expression,
            filter_expression: &self.filter_expression,
            expression_attribute_names: &self.expression_attribute_names,
            expression_attribute_values: &self.expression_attribute_values,
            consistent_read: &self.consistent_read,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ScanInput`](crate::input::ScanInput)
    pub fn builder() -> crate::input::scan_input::Builder {
        crate::input::scan_input::Builder::default()
    }
}

/// See [`TagResourceInput`](crate::input::TagResourceInput)
pub mod tag_resource_input {

    use crate::input::TagResourceInput;
    use crate::model::Tag;
    use crate::operation::TagResource;
    /// A builder for [`TagResourceInput`](crate::input::TagResourceInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        resource_arn: ::std::option::Option<::std::string::String>,
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    }
    impl Builder {
        /// <p>Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.resource_arn = Some(inp.into());
            self
        }
        /// <p>The tags to be assigned to the Amazon DynamoDB resource.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`TagResource`](crate::operation::TagResource)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<TagResource, ()> {
            let op = TagResource::new(TagResourceInput {
                resource_arn: self.resource_arn,
                tags: self.tags,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl TagResourceInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.TagResource")
    }
    fn body(&self) -> TagResourceInputBody {
        TagResourceInputBody {
            resource_arn: &self.resource_arn,
            tags: &self.tags,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
}

/// See [`TransactGetItemsInput`](crate::input::TransactGetItemsInput)
pub mod transact_get_items_input {

    use crate::input::TransactGetItemsInput;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::TransactGetItem;
    use crate::operation::TransactGetItems;
    /// A builder for [`TransactGetItemsInput`](crate::input::TransactGetItemsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        transact_items: ::std::option::Option<::std::vec::Vec<TransactGetItem>>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    }
    impl Builder {
        /// <p>An ordered array of up to 25 <code>TransactGetItem</code> objects,
        /// each of which contains a <code>Get</code> structure.</p>
        pub fn transact_items(mut self, inp: ::std::vec::Vec<TransactGetItem>) -> Self {
            self.transact_items = Some(inp);
            self
        }
        /// <p>A value of <code>TOTAL</code> causes consumed capacity information
        /// to be returned, and a value of <code>NONE</code> prevents that information
        /// from being returned. No other value is valid.</p>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`TransactGetItems`](crate::operation::TransactGetItems)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<TransactGetItems, ()> {
            let op = TransactGetItems::new(TransactGetItemsInput {
                transact_items: self.transact_items,
                return_consumed_capacity: self.return_consumed_capacity,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl TransactGetItemsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.TransactGetItems")
    }
    fn body(&self) -> TransactGetItemsInputBody {
        TransactGetItemsInputBody {
            transact_items: &self.transact_items,
            return_consumed_capacity: &self.return_consumed_capacity,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`TransactGetItemsInput`](crate::input::TransactGetItemsInput)
    pub fn builder() -> crate::input::transact_get_items_input::Builder {
        crate::input::transact_get_items_input::Builder::default()
    }
}

/// See [`TransactWriteItemsInput`](crate::input::TransactWriteItemsInput)
pub mod transact_write_items_input {

    use crate::input::TransactWriteItemsInput;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::ReturnItemCollectionMetrics;
    use crate::model::TransactWriteItem;
    use crate::operation::TransactWriteItems;
    /// A builder for [`TransactWriteItemsInput`](crate::input::TransactWriteItemsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        transact_items: ::std::option::Option<::std::vec::Vec<TransactWriteItem>>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
        client_request_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>An ordered array of up to 25 <code>TransactWriteItem</code> objects, each of which
        /// contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or
        /// <code>Delete</code> object. These can operate on items in different tables, but the
        /// tables must reside in the same AWS account and Region, and no two of them can operate on
        /// the same item. </p>
        pub fn transact_items(mut self, inp: ::std::vec::Vec<TransactWriteItem>) -> Self {
            self.transact_items = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>Determines whether item collection metrics are returned. If set to
        /// <code>SIZE</code>, the response includes statistics about item collections (if any), that
        /// were modified during the operation and are returned in the response.
        /// If set to <code>NONE</code> (the default), no statistics are returned.
        /// </p>
        pub fn return_item_collection_metrics(mut self, inp: ReturnItemCollectionMetrics) -> Self {
            self.return_item_collection_metrics = Some(inp);
            self
        }
        /// <p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code>
        /// idempotent, meaning that multiple identical calls have the same effect as one single call.</p>
        /// <p>Although multiple identical calls using the same client request token produce the same
        /// result on the server (no side effects), the responses to the calls might not be the
        /// same. If the <code>ReturnConsumedCapacity></code> parameter is set, then the initial
        /// <code>TransactWriteItems</code> call returns the amount of write capacity units
        /// consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with
        /// the same client token return the number of read capacity units consumed in reading the
        /// item.</p>
        /// <p>A client request token is valid for 10 minutes after the first request that uses it is
        /// completed. After 10 minutes, any request with the same client token is treated as a new
        /// request. Do not resubmit the same request with the same client token for more than 10
        /// minutes, or the result might not be idempotent.</p>
        /// <p>If you submit a request with the same client token but a change in other parameters
        /// within the 10-minute idempotency window, DynamoDB returns an
        /// <code>IdempotentParameterMismatch</code> exception.</p>
        pub fn client_request_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.client_request_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`TransactWriteItems`](crate::operation::TransactWriteItems)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<TransactWriteItems, ()> {
            let op = TransactWriteItems::new(TransactWriteItemsInput {
                transact_items: self.transact_items,
                return_consumed_capacity: self.return_consumed_capacity,
                return_item_collection_metrics: self.return_item_collection_metrics,
                client_request_token: self
                    .client_request_token
                    .or_else(|| Some(_config.token_provider.token())),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl TransactWriteItemsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.TransactWriteItems")
    }
    fn body(&self) -> TransactWriteItemsInputBody {
        TransactWriteItemsInputBody {
            transact_items: &self.transact_items,
            return_consumed_capacity: &self.return_consumed_capacity,
            return_item_collection_metrics: &self.return_item_collection_metrics,
            client_request_token: &self.client_request_token,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`TransactWriteItemsInput`](crate::input::TransactWriteItemsInput)
    pub fn builder() -> crate::input::transact_write_items_input::Builder {
        crate::input::transact_write_items_input::Builder::default()
    }
}

/// See [`UntagResourceInput`](crate::input::UntagResourceInput)
pub mod untag_resource_input {

    use crate::input::UntagResourceInput;
    use crate::operation::UntagResource;
    /// A builder for [`UntagResourceInput`](crate::input::UntagResourceInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        resource_arn: ::std::option::Option<::std::string::String>,
        tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>The DynamoDB resource that the tags will be removed from. This value is an Amazon
        /// Resource Name (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.resource_arn = Some(inp.into());
            self
        }
        /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list
        /// will be removed from the DynamoDB resource.</p>
        pub fn tag_keys(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.tag_keys = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UntagResource`](crate::operation::UntagResource)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UntagResource, ()> {
            let op = UntagResource::new(UntagResourceInput {
                resource_arn: self.resource_arn,
                tag_keys: self.tag_keys,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UntagResourceInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UntagResource")
    }
    fn body(&self) -> UntagResourceInputBody {
        UntagResourceInputBody {
            resource_arn: &self.resource_arn,
            tag_keys: &self.tag_keys,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
}

/// See [`UpdateContinuousBackupsInput`](crate::input::UpdateContinuousBackupsInput)
pub mod update_continuous_backups_input {

    use crate::input::UpdateContinuousBackupsInput;
    use crate::model::PointInTimeRecoverySpecification;
    use crate::operation::UpdateContinuousBackups;
    /// A builder for [`UpdateContinuousBackupsInput`](crate::input::UpdateContinuousBackupsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        point_in_time_recovery_specification:
            ::std::option::Option<PointInTimeRecoverySpecification>,
    }
    impl Builder {
        /// <p>The name of the table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Represents the settings used to enable point in time recovery.</p>
        pub fn point_in_time_recovery_specification(
            mut self,
            inp: PointInTimeRecoverySpecification,
        ) -> Self {
            self.point_in_time_recovery_specification = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateContinuousBackups`](crate::operation::UpdateContinuousBackups)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateContinuousBackups, ()> {
            let op = UpdateContinuousBackups::new(UpdateContinuousBackupsInput {
                table_name: self.table_name,
                point_in_time_recovery_specification: self.point_in_time_recovery_specification,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateContinuousBackupsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UpdateContinuousBackups")
    }
    fn body(&self) -> UpdateContinuousBackupsInputBody {
        UpdateContinuousBackupsInputBody {
            table_name: &self.table_name,
            point_in_time_recovery_specification: &self.point_in_time_recovery_specification,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateContinuousBackupsInput`](crate::input::UpdateContinuousBackupsInput)
    pub fn builder() -> crate::input::update_continuous_backups_input::Builder {
        crate::input::update_continuous_backups_input::Builder::default()
    }
}

/// See [`UpdateContributorInsightsInput`](crate::input::UpdateContributorInsightsInput)
pub mod update_contributor_insights_input {

    use crate::input::UpdateContributorInsightsInput;
    use crate::model::ContributorInsightsAction;
    use crate::operation::UpdateContributorInsights;
    /// A builder for [`UpdateContributorInsightsInput`](crate::input::UpdateContributorInsightsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        index_name: ::std::option::Option<::std::string::String>,
        contributor_insights_action: ::std::option::Option<ContributorInsightsAction>,
    }
    impl Builder {
        /// <p>The name of the table.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The global secondary index name, if applicable.</p>
        pub fn index_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.index_name = Some(inp.into());
            self
        }
        /// <p>Represents the contributor insights action.</p>
        pub fn contributor_insights_action(mut self, inp: ContributorInsightsAction) -> Self {
            self.contributor_insights_action = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateContributorInsights`](crate::operation::UpdateContributorInsights)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateContributorInsights, ()> {
            let op = UpdateContributorInsights::new(UpdateContributorInsightsInput {
                table_name: self.table_name,
                index_name: self.index_name,
                contributor_insights_action: self.contributor_insights_action,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateContributorInsightsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.UpdateContributorInsights",
            )
    }
    fn body(&self) -> UpdateContributorInsightsInputBody {
        UpdateContributorInsightsInputBody {
            table_name: &self.table_name,
            index_name: &self.index_name,
            contributor_insights_action: &self.contributor_insights_action,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateContributorInsightsInput`](crate::input::UpdateContributorInsightsInput)
    pub fn builder() -> crate::input::update_contributor_insights_input::Builder {
        crate::input::update_contributor_insights_input::Builder::default()
    }
}

/// See [`UpdateGlobalTableInput`](crate::input::UpdateGlobalTableInput)
pub mod update_global_table_input {

    use crate::input::UpdateGlobalTableInput;
    use crate::model::ReplicaUpdate;
    use crate::operation::UpdateGlobalTable;
    /// A builder for [`UpdateGlobalTableInput`](crate::input::UpdateGlobalTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_table_name: ::std::option::Option<::std::string::String>,
        replica_updates: ::std::option::Option<::std::vec::Vec<ReplicaUpdate>>,
    }
    impl Builder {
        /// <p>The global table name.</p>
        pub fn global_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.global_table_name = Some(inp.into());
            self
        }
        /// <p>A list of Regions that should be added or removed from the global table.</p>
        pub fn replica_updates(mut self, inp: ::std::vec::Vec<ReplicaUpdate>) -> Self {
            self.replica_updates = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateGlobalTable`](crate::operation::UpdateGlobalTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateGlobalTable, ()> {
            let op = UpdateGlobalTable::new(UpdateGlobalTableInput {
                global_table_name: self.global_table_name,
                replica_updates: self.replica_updates,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateGlobalTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UpdateGlobalTable")
    }
    fn body(&self) -> UpdateGlobalTableInputBody {
        UpdateGlobalTableInputBody {
            global_table_name: &self.global_table_name,
            replica_updates: &self.replica_updates,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateGlobalTableInput`](crate::input::UpdateGlobalTableInput)
    pub fn builder() -> crate::input::update_global_table_input::Builder {
        crate::input::update_global_table_input::Builder::default()
    }
}

/// See [`UpdateGlobalTableSettingsInput`](crate::input::UpdateGlobalTableSettingsInput)
pub mod update_global_table_settings_input {

    use crate::input::UpdateGlobalTableSettingsInput;
    use crate::model::AutoScalingSettingsUpdate;
    use crate::model::BillingMode;
    use crate::model::GlobalTableGlobalSecondaryIndexSettingsUpdate;
    use crate::model::ReplicaSettingsUpdate;
    use crate::operation::UpdateGlobalTableSettings;
    /// A builder for [`UpdateGlobalTableSettingsInput`](crate::input::UpdateGlobalTableSettingsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_table_name: ::std::option::Option<::std::string::String>,
        global_table_billing_mode: ::std::option::Option<BillingMode>,
        global_table_provisioned_write_capacity_units: ::std::option::Option<i64>,
        global_table_provisioned_write_capacity_auto_scaling_settings_update:
            ::std::option::Option<AutoScalingSettingsUpdate>,
        global_table_global_secondary_index_settings_update:
            ::std::option::Option<::std::vec::Vec<GlobalTableGlobalSecondaryIndexSettingsUpdate>>,
        replica_settings_update: ::std::option::Option<::std::vec::Vec<ReplicaSettingsUpdate>>,
    }
    impl Builder {
        /// <p>The name of the global table</p>
        pub fn global_table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.global_table_name = Some(inp.into());
            self
        }
        /// <p>The billing mode of the global table. If <code>GlobalTableBillingMode</code> is not specified, the global table defaults to <code>PROVISIONED</code> capacity billing mode.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn global_table_billing_mode(mut self, inp: BillingMode) -> Self {
            self.global_table_billing_mode = Some(inp);
            self
        }
        /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code>
        /// </p>
        pub fn global_table_provisioned_write_capacity_units(mut self, inp: i64) -> Self {
            self.global_table_provisioned_write_capacity_units = Some(inp);
            self
        }
        /// <p>Auto scaling settings for managing provisioned write capacity for the global
        /// table.</p>
        pub fn global_table_provisioned_write_capacity_auto_scaling_settings_update(
            mut self,
            inp: AutoScalingSettingsUpdate,
        ) -> Self {
            self.global_table_provisioned_write_capacity_auto_scaling_settings_update = Some(inp);
            self
        }
        /// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
        pub fn global_table_global_secondary_index_settings_update(
            mut self,
            inp: ::std::vec::Vec<GlobalTableGlobalSecondaryIndexSettingsUpdate>,
        ) -> Self {
            self.global_table_global_secondary_index_settings_update = Some(inp);
            self
        }
        /// <p>Represents the settings for a global table in a Region that will be modified.</p>
        pub fn replica_settings_update(
            mut self,
            inp: ::std::vec::Vec<ReplicaSettingsUpdate>,
        ) -> Self {
            self.replica_settings_update = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateGlobalTableSettings`](crate::operation::UpdateGlobalTableSettings)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateGlobalTableSettings, ()> {
            let op = UpdateGlobalTableSettings::new(UpdateGlobalTableSettingsInput {
                global_table_name: self.global_table_name,
                global_table_billing_mode: self.global_table_billing_mode,
                global_table_provisioned_write_capacity_units: self
                    .global_table_provisioned_write_capacity_units,
                global_table_provisioned_write_capacity_auto_scaling_settings_update: self
                    .global_table_provisioned_write_capacity_auto_scaling_settings_update,
                global_table_global_secondary_index_settings_update: self
                    .global_table_global_secondary_index_settings_update,
                replica_settings_update: self.replica_settings_update,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateGlobalTableSettingsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.UpdateGlobalTableSettings",
            )
    }
    fn body(&self) -> UpdateGlobalTableSettingsInputBody {
        UpdateGlobalTableSettingsInputBody {
            global_table_name: &self.global_table_name,
            global_table_billing_mode: &self.global_table_billing_mode,
            global_table_provisioned_write_capacity_units: &self
                .global_table_provisioned_write_capacity_units,
            global_table_provisioned_write_capacity_auto_scaling_settings_update: &self
                .global_table_provisioned_write_capacity_auto_scaling_settings_update,
            global_table_global_secondary_index_settings_update: &self
                .global_table_global_secondary_index_settings_update,
            replica_settings_update: &self.replica_settings_update,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateGlobalTableSettingsInput`](crate::input::UpdateGlobalTableSettingsInput)
    pub fn builder() -> crate::input::update_global_table_settings_input::Builder {
        crate::input::update_global_table_settings_input::Builder::default()
    }
}

/// See [`UpdateItemInput`](crate::input::UpdateItemInput)
pub mod update_item_input {

    use crate::input::UpdateItemInput;
    use crate::model::AttributeValue;
    use crate::model::AttributeValueUpdate;
    use crate::model::ConditionalOperator;
    use crate::model::ExpectedAttributeValue;
    use crate::model::ReturnConsumedCapacity;
    use crate::model::ReturnItemCollectionMetrics;
    use crate::model::ReturnValue;
    use crate::operation::UpdateItem;
    /// A builder for [`UpdateItemInput`](crate::input::UpdateItemInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        key: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
        attribute_updates: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValueUpdate>,
        >,
        expected: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        >,
        conditional_operator: ::std::option::Option<ConditionalOperator>,
        return_values: ::std::option::Option<ReturnValue>,
        return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
        return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
        update_expression: ::std::option::Option<::std::string::String>,
        condition_expression: ::std::option::Option<::std::string::String>,
        expression_attribute_names: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        expression_attribute_values: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, AttributeValue>,
        >,
    }
    impl Builder {
        /// <p>The name of the table containing the item to update.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p>
        /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
        pub fn key(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.key = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>UpdateExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn attribute_updates(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValueUpdate>,
        ) -> Self {
            self.attribute_updates = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn expected(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
        ) -> Self {
            self.expected = Some(inp);
            self
        }
        /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
        /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn conditional_operator(mut self, inp: ConditionalOperator) -> Self {
            self.conditional_operator = Some(inp);
            self
        }
        /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear
        /// before or after they are updated. For <code>UpdateItem</code>, the valid values
        /// are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
        /// <code>NONE</code>, then nothing is returned. (This setting is the default for
        /// <code>ReturnValues</code>.)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p>
        /// </li>
        /// </ul>
        /// <p>There is no additional cost associated with requesting a return value aside from the
        /// small network and processing overhead of receiving a larger response. No read capacity
        /// units are consumed.</p>
        /// <p>The values returned are strongly consistent.</p>
        pub fn return_values(mut self, inp: ReturnValue) -> Self {
            self.return_values = Some(inp);
            self
        }
        /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
        /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
        /// </li>
        /// </ul>
        pub fn return_consumed_capacity(mut self, inp: ReturnConsumedCapacity) -> Self {
            self.return_consumed_capacity = Some(inp);
            self
        }
        /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
        /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
        pub fn return_item_collection_metrics(mut self, inp: ReturnItemCollectionMetrics) -> Self {
            self.return_item_collection_metrics = Some(inp);
            self
        }
        /// <p>An expression that defines one or more attributes to be updated, the action to be
        /// performed on them, and new values for them.</p>
        /// <p>The following action values are available for <code>UpdateExpression</code>.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SET</code> - Adds one or more attributes and values to an item. If any of
        /// these attributes already exist, they are replaced by the new values. You can
        /// also use <code>SET</code> to add or subtract from an attribute that is of type
        /// Number. For example: <code>SET myNum = myNum + :val</code>
        /// </p>
        /// <p>
        /// <code>SET</code> supports the following functions:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p>
        /// </li>
        /// </ul>
        /// <p>These function names are case-sensitive.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>REMOVE</code> - Removes one or more attributes from an item.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of
        /// <code>ADD</code> depends on the data type of the attribute:</p>
        /// <ul>
        /// <li>
        /// <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then
        /// <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a
        /// negative number, then it is subtracted from the existing attribute.</p>
        /// <note>
        /// <p>If you use <code>ADD</code> to increment or decrement a number value for an item
        /// that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial
        /// value.</p>
        /// <p>Similarly, if you use <code>ADD</code> for an existing item to increment
        /// or decrement an attribute value that doesn't exist before the
        /// update, DynamoDB uses <code>0</code> as the initial value. For
        /// example, suppose that the item you want to update doesn't have an
        /// attribute named <code>itemcount</code>, but you decide to
        /// <code>ADD</code> the number <code>3</code> to this attribute
        /// anyway. DynamoDB will create the <code>itemcount</code> attribute,
        /// set its initial value to <code>0</code>, and finally add
        /// <code>3</code> to it. The result will be a new
        /// <code>itemcount</code> attribute in the item, with a value of
        /// <code>3</code>.</p>
        /// </note>
        /// </li>
        /// <li>
        /// <p>If the existing data type is a set and if <code>Value</code> is also a set, then
        /// <code>Value</code> is added to the existing set. For example, if the attribute value is the set
        /// <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then
        /// the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code>
        /// action is specified for a set attribute and the attribute type specified does not
        /// match the existing set type. </p>
        /// <p>Both sets must have the same primitive data type. For example, if the existing data
        /// type is a set of strings, the <code>Value</code> must also be a set of strings.</p>
        /// </li>
        /// </ul>
        /// <important>
        /// <p>The <code>ADD</code> action only supports Number and set data types. In addition,
        /// <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p>
        /// </important>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DELETE</code> - Deletes an element from a set.</p>
        /// <p>If a set of values is specified, then those values are subtracted from the old
        /// set. For example, if the attribute value was the set <code>[a,b,c]</code> and the
        /// <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value
        /// is <code>[b]</code>. Specifying an empty set is an error.</p>
        /// <important>
        /// <p>The <code>DELETE</code> action only supports set data types. In addition,
        /// <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p>
        /// </important>
        /// </li>
        /// </ul>
        /// <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1,
        /// b=:value2 DELETE :value3, :value4, :value5</code>
        /// </p>
        /// <p>For more information on update expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
        pub fn update_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.update_expression = Some(inp.into());
            self
        }
        /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
        /// <p>An expression can contain any of the following:</p>
        /// <ul>
        /// <li>
        /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
        /// </p>
        /// <p>These function names are case-sensitive.</p>
        /// </li>
        /// <li>
        /// <p>Comparison operators: <code>= | <> |
        /// < | > | <= | >= |
        /// BETWEEN | IN </code>
        /// </p>
        /// </li>
        /// <li>
        /// <p> Logical operators: <code>AND | OR | NOT</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn condition_expression(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.condition_expression = Some(inp.into());
            self
        }
        /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
        /// </li>
        /// <li>
        /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
        /// </li>
        /// <li>
        /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
        /// </li>
        /// </ul>
        /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Percentile</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly
        /// in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.) To work around this, you could specify the following for
        /// <code>ExpressionAttributeNames</code>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>{"#P":"Percentile"}</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>You could then use this substitution in an expression, as in this example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>#P = :val</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
        /// </note>
        /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_names(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.expression_attribute_names = Some(inp);
            self
        }
        /// <p>One or more values that can be substituted in an expression.</p>
        /// <p>Use the <b>:</b> (colon) character in an expression to
        /// dereference an attribute value. For example, suppose that you wanted to check whether
        /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
        /// <p>
        /// <code>Available | Backordered | Discontinued</code>
        /// </p>
        /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
        /// <p>
        /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
        /// </p>
        /// <p>You could then use these values in an expression, such as this:</p>
        /// <p>
        /// <code>ProductStatus IN (:avail, :back, :disc)</code>
        /// </p>
        /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
        /// Guide</i>.</p>
        pub fn expression_attribute_values(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, AttributeValue>,
        ) -> Self {
            self.expression_attribute_values = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateItem`](crate::operation::UpdateItem)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateItem, ()> {
            let op = UpdateItem::new(UpdateItemInput {
                table_name: self.table_name,
                key: self.key,
                attribute_updates: self.attribute_updates,
                expected: self.expected,
                conditional_operator: self.conditional_operator,
                return_values: self.return_values,
                return_consumed_capacity: self.return_consumed_capacity,
                return_item_collection_metrics: self.return_item_collection_metrics,
                update_expression: self.update_expression,
                condition_expression: self.condition_expression,
                expression_attribute_names: self.expression_attribute_names,
                expression_attribute_values: self.expression_attribute_values,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateItemInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UpdateItem")
    }
    fn body(&self) -> UpdateItemInputBody {
        UpdateItemInputBody {
            table_name: &self.table_name,
            key: &self.key,
            attribute_updates: &self.attribute_updates,
            expected: &self.expected,
            conditional_operator: &self.conditional_operator,
            return_values: &self.return_values,
            return_consumed_capacity: &self.return_consumed_capacity,
            return_item_collection_metrics: &self.return_item_collection_metrics,
            update_expression: &self.update_expression,
            condition_expression: &self.condition_expression,
            expression_attribute_names: &self.expression_attribute_names,
            expression_attribute_values: &self.expression_attribute_values,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateItemInput`](crate::input::UpdateItemInput)
    pub fn builder() -> crate::input::update_item_input::Builder {
        crate::input::update_item_input::Builder::default()
    }
}

/// See [`UpdateTableInput`](crate::input::UpdateTableInput)
pub mod update_table_input {

    use crate::input::UpdateTableInput;
    use crate::model::AttributeDefinition;
    use crate::model::BillingMode;
    use crate::model::GlobalSecondaryIndexUpdate;
    use crate::model::ProvisionedThroughput;
    use crate::model::ReplicationGroupUpdate;
    use crate::model::SSESpecification;
    use crate::model::StreamSpecification;
    use crate::operation::UpdateTable;
    /// A builder for [`UpdateTableInput`](crate::input::UpdateTableInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        attribute_definitions: ::std::option::Option<::std::vec::Vec<AttributeDefinition>>,
        table_name: ::std::option::Option<::std::string::String>,
        billing_mode: ::std::option::Option<BillingMode>,
        provisioned_throughput: ::std::option::Option<ProvisionedThroughput>,
        global_secondary_index_updates:
            ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndexUpdate>>,
        stream_specification: ::std::option::Option<StreamSpecification>,
        sse_specification: ::std::option::Option<SSESpecification>,
        replica_updates: ::std::option::Option<::std::vec::Vec<ReplicationGroupUpdate>>,
    }
    impl Builder {
        /// <p>An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.</p>
        pub fn attribute_definitions(mut self, inp: ::std::vec::Vec<AttributeDefinition>) -> Self {
            self.attribute_definitions = Some(inp);
            self
        }
        /// <p>The name of the table to be updated.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Controls how you are charged for read and write throughput and how you manage capacity.
        /// When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial
        /// provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes
        /// over the past 30 minutes.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
        /// </p>
        /// </li>
        /// </ul>
        pub fn billing_mode(mut self, inp: BillingMode) -> Self {
            self.billing_mode = Some(inp);
            self
        }
        /// <p>The new provisioned throughput settings for the specified table or index.</p>
        pub fn provisioned_throughput(mut self, inp: ProvisionedThroughput) -> Self {
            self.provisioned_throughput = Some(inp);
            self
        }
        /// <p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Create</code> - add a new global secondary index to the table.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Delete</code> - remove a global secondary index from the table.</p>
        /// </li>
        /// </ul>
        /// <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing Global Secondary
        /// Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
        pub fn global_secondary_index_updates(
            mut self,
            inp: ::std::vec::Vec<GlobalSecondaryIndexUpdate>,
        ) -> Self {
            self.global_secondary_index_updates = Some(inp);
            self
        }
        /// <p>Represents the DynamoDB Streams configuration for the table.</p>
        /// <note>
        /// <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a
        /// table that already has a stream, or if you try to disable a stream on a table that
        /// doesn't have a stream.</p>
        /// </note>
        pub fn stream_specification(mut self, inp: StreamSpecification) -> Self {
            self.stream_specification = Some(inp);
            self
        }
        /// <p>The new server-side encryption settings for the specified table.</p>
        pub fn sse_specification(mut self, inp: SSESpecification) -> Self {
            self.sse_specification = Some(inp);
            self
        }
        /// <p>A list of replica update actions (create, delete, or update) for the table.</p>
        /// <note>
        /// <p>This property only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version 2019.11.21</a> of global tables.</p>
        /// </note>
        pub fn replica_updates(mut self, inp: ::std::vec::Vec<ReplicationGroupUpdate>) -> Self {
            self.replica_updates = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateTable`](crate::operation::UpdateTable)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateTable, ()> {
            let op = UpdateTable::new(UpdateTableInput {
                attribute_definitions: self.attribute_definitions,
                table_name: self.table_name,
                billing_mode: self.billing_mode,
                provisioned_throughput: self.provisioned_throughput,
                global_secondary_index_updates: self.global_secondary_index_updates,
                stream_specification: self.stream_specification,
                sse_specification: self.sse_specification,
                replica_updates: self.replica_updates,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateTableInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UpdateTable")
    }
    fn body(&self) -> UpdateTableInputBody {
        UpdateTableInputBody {
            attribute_definitions: &self.attribute_definitions,
            table_name: &self.table_name,
            billing_mode: &self.billing_mode,
            provisioned_throughput: &self.provisioned_throughput,
            global_secondary_index_updates: &self.global_secondary_index_updates,
            stream_specification: &self.stream_specification,
            sse_specification: &self.sse_specification,
            replica_updates: &self.replica_updates,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateTableInput`](crate::input::UpdateTableInput)
    pub fn builder() -> crate::input::update_table_input::Builder {
        crate::input::update_table_input::Builder::default()
    }
}

/// See [`UpdateTableReplicaAutoScalingInput`](crate::input::UpdateTableReplicaAutoScalingInput)
pub mod update_table_replica_auto_scaling_input {

    use crate::input::UpdateTableReplicaAutoScalingInput;
    use crate::model::AutoScalingSettingsUpdate;
    use crate::model::GlobalSecondaryIndexAutoScalingUpdate;
    use crate::model::ReplicaAutoScalingUpdate;
    use crate::operation::UpdateTableReplicaAutoScaling;
    /// A builder for [`UpdateTableReplicaAutoScalingInput`](crate::input::UpdateTableReplicaAutoScalingInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        global_secondary_index_updates:
            ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndexAutoScalingUpdate>>,
        table_name: ::std::option::Option<::std::string::String>,
        provisioned_write_capacity_auto_scaling_update:
            ::std::option::Option<AutoScalingSettingsUpdate>,
        replica_updates: ::std::option::Option<::std::vec::Vec<ReplicaAutoScalingUpdate>>,
    }
    impl Builder {
        /// <p>Represents the auto scaling settings of the global secondary indexes of the replica
        /// to be updated.</p>
        pub fn global_secondary_index_updates(
            mut self,
            inp: ::std::vec::Vec<GlobalSecondaryIndexAutoScalingUpdate>,
        ) -> Self {
            self.global_secondary_index_updates = Some(inp);
            self
        }
        /// <p>The name of the global table to be updated.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Represents the auto scaling settings to be modified for a global table or global
        /// secondary index.</p>
        pub fn provisioned_write_capacity_auto_scaling_update(
            mut self,
            inp: AutoScalingSettingsUpdate,
        ) -> Self {
            self.provisioned_write_capacity_auto_scaling_update = Some(inp);
            self
        }
        /// <p>Represents the auto scaling settings of replicas of the table that will be
        /// modified.</p>
        pub fn replica_updates(mut self, inp: ::std::vec::Vec<ReplicaAutoScalingUpdate>) -> Self {
            self.replica_updates = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateTableReplicaAutoScaling`](crate::operation::UpdateTableReplicaAutoScaling)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateTableReplicaAutoScaling, ()> {
            let op = UpdateTableReplicaAutoScaling::new(UpdateTableReplicaAutoScalingInput {
                global_secondary_index_updates: self.global_secondary_index_updates,
                table_name: self.table_name,
                provisioned_write_capacity_auto_scaling_update: self
                    .provisioned_write_capacity_auto_scaling_update,
                replica_updates: self.replica_updates,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateTableReplicaAutoScalingInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header(
                "X-Amz-Target",
                "DynamoDB_20120810.UpdateTableReplicaAutoScaling",
            )
    }
    fn body(&self) -> UpdateTableReplicaAutoScalingInputBody {
        UpdateTableReplicaAutoScalingInputBody {
            global_secondary_index_updates: &self.global_secondary_index_updates,
            table_name: &self.table_name,
            provisioned_write_capacity_auto_scaling_update: &self
                .provisioned_write_capacity_auto_scaling_update,
            replica_updates: &self.replica_updates,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateTableReplicaAutoScalingInput`](crate::input::UpdateTableReplicaAutoScalingInput)
    pub fn builder() -> crate::input::update_table_replica_auto_scaling_input::Builder {
        crate::input::update_table_replica_auto_scaling_input::Builder::default()
    }
}

/// See [`UpdateTimeToLiveInput`](crate::input::UpdateTimeToLiveInput)
pub mod update_time_to_live_input {

    use crate::input::UpdateTimeToLiveInput;
    use crate::model::TimeToLiveSpecification;
    use crate::operation::UpdateTimeToLive;
    /// A builder for [`UpdateTimeToLiveInput`](crate::input::UpdateTimeToLiveInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        table_name: ::std::option::Option<::std::string::String>,
        time_to_live_specification: ::std::option::Option<TimeToLiveSpecification>,
    }
    impl Builder {
        /// <p>The name of the table to be configured.</p>
        pub fn table_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.table_name = Some(inp.into());
            self
        }
        /// <p>Represents the settings used to enable or disable Time to Live for the specified table.</p>
        pub fn time_to_live_specification(mut self, inp: TimeToLiveSpecification) -> Self {
            self.time_to_live_specification = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateTimeToLive`](crate::operation::UpdateTimeToLive)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateTimeToLive, ()> {
            let op = UpdateTimeToLive::new(UpdateTimeToLiveInput {
                table_name: self.table_name,
                time_to_live_specification: self.time_to_live_specification,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl UpdateTimeToLiveInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.0")
            .header("X-Amz-Target", "DynamoDB_20120810.UpdateTimeToLive")
    }
    fn body(&self) -> UpdateTimeToLiveInputBody {
        UpdateTimeToLiveInputBody {
            table_name: &self.table_name,
            time_to_live_specification: &self.time_to_live_specification,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateTimeToLiveInput`](crate::input::UpdateTimeToLiveInput)
    pub fn builder() -> crate::input::update_time_to_live_input::Builder {
        crate::input::update_time_to_live_input::Builder::default()
    }
}

/// <p>Represents the input of an <code>UpdateTimeToLive</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTimeToLiveInput {
    /// <p>The name of the table to be configured.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the settings used to enable or disable Time to Live for the specified table.</p>
    pub time_to_live_specification: ::std::option::Option<TimeToLiveSpecification>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTableReplicaAutoScalingInput {
    /// <p>Represents the auto scaling settings of the global secondary indexes of the replica
    /// to be updated.</p>
    pub global_secondary_index_updates:
        ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndexAutoScalingUpdate>>,
    /// <p>The name of the global table to be updated.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    /// secondary index.</p>
    pub provisioned_write_capacity_auto_scaling_update:
        ::std::option::Option<AutoScalingSettingsUpdate>,
    /// <p>Represents the auto scaling settings of replicas of the table that will be
    /// modified.</p>
    pub replica_updates: ::std::option::Option<::std::vec::Vec<ReplicaAutoScalingUpdate>>,
}

/// <p>Represents the input of an <code>UpdateTable</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTableInput {
    /// <p>An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.</p>
    pub attribute_definitions: ::std::option::Option<::std::vec::Vec<AttributeDefinition>>,
    /// <p>The name of the table to be updated.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity.
    /// When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial
    /// provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes
    /// over the past 30 minutes.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub billing_mode: ::std::option::Option<BillingMode>,
    /// <p>The new provisioned throughput settings for the specified table or index.</p>
    pub provisioned_throughput: ::std::option::Option<ProvisionedThroughput>,
    /// <p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Create</code> - add a new global secondary index to the table.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Delete</code> - remove a global secondary index from the table.</p>
    /// </li>
    /// </ul>
    /// <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing Global Secondary
    /// Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    pub global_secondary_index_updates:
        ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndexUpdate>>,
    /// <p>Represents the DynamoDB Streams configuration for the table.</p>
    /// <note>
    /// <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a
    /// table that already has a stream, or if you try to disable a stream on a table that
    /// doesn't have a stream.</p>
    /// </note>
    pub stream_specification: ::std::option::Option<StreamSpecification>,
    /// <p>The new server-side encryption settings for the specified table.</p>
    pub sse_specification: ::std::option::Option<SSESpecification>,
    /// <p>A list of replica update actions (create, delete, or update) for the table.</p>
    /// <note>
    /// <p>This property only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version 2019.11.21</a> of global tables.</p>
    /// </note>
    pub replica_updates: ::std::option::Option<::std::vec::Vec<ReplicationGroupUpdate>>,
}

/// <p>Represents the input of an <code>UpdateItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateItemInput {
    /// <p>The name of the table containing the item to update.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>This is a legacy parameter.  Use <code>UpdateExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attribute_updates: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, AttributeValueUpdate>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: ::std::option::Option<ConditionalOperator>,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear
    /// before or after they are updated. For <code>UpdateItem</code>, the valid values
    /// are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p>
    /// </li>
    /// </ul>
    /// <p>There is no additional cost associated with requesting a return value aside from the
    /// small network and processing overhead of receiving a larger response. No read capacity
    /// units are consumed.</p>
    /// <p>The values returned are strongly consistent.</p>
    pub return_values: ::std::option::Option<ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
    /// <p>An expression that defines one or more attributes to be updated, the action to be
    /// performed on them, and new values for them.</p>
    /// <p>The following action values are available for <code>UpdateExpression</code>.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SET</code> - Adds one or more attributes and values to an item. If any of
    /// these attributes already exist, they are replaced by the new values. You can
    /// also use <code>SET</code> to add or subtract from an attribute that is of type
    /// Number. For example: <code>SET myNum = myNum + :val</code>
    /// </p>
    /// <p>
    /// <code>SET</code> supports the following functions:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p>
    /// </li>
    /// </ul>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>REMOVE</code> - Removes one or more attributes from an item.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of
    /// <code>ADD</code> depends on the data type of the attribute:</p>
    /// <ul>
    /// <li>
    /// <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then
    /// <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a
    /// negative number, then it is subtracted from the existing attribute.</p>
    /// <note>
    /// <p>If you use <code>ADD</code> to increment or decrement a number value for an item
    /// that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial
    /// value.</p>
    /// <p>Similarly, if you use <code>ADD</code> for an existing item to increment
    /// or decrement an attribute value that doesn't exist before the
    /// update, DynamoDB uses <code>0</code> as the initial value. For
    /// example, suppose that the item you want to update doesn't have an
    /// attribute named <code>itemcount</code>, but you decide to
    /// <code>ADD</code> the number <code>3</code> to this attribute
    /// anyway. DynamoDB will create the <code>itemcount</code> attribute,
    /// set its initial value to <code>0</code>, and finally add
    /// <code>3</code> to it. The result will be a new
    /// <code>itemcount</code> attribute in the item, with a value of
    /// <code>3</code>.</p>
    /// </note>
    /// </li>
    /// <li>
    /// <p>If the existing data type is a set and if <code>Value</code> is also a set, then
    /// <code>Value</code> is added to the existing set. For example, if the attribute value is the set
    /// <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then
    /// the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code>
    /// action is specified for a set attribute and the attribute type specified does not
    /// match the existing set type. </p>
    /// <p>Both sets must have the same primitive data type. For example, if the existing data
    /// type is a set of strings, the <code>Value</code> must also be a set of strings.</p>
    /// </li>
    /// </ul>
    /// <important>
    /// <p>The <code>ADD</code> action only supports Number and set data types. In addition,
    /// <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p>
    /// </important>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DELETE</code> - Deletes an element from a set.</p>
    /// <p>If a set of values is specified, then those values are subtracted from the old
    /// set. For example, if the attribute value was the set <code>[a,b,c]</code> and the
    /// <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value
    /// is <code>[b]</code>. Specifying an empty set is an error.</p>
    /// <important>
    /// <p>The <code>DELETE</code> action only supports set data types. In addition,
    /// <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p>
    /// </important>
    /// </li>
    /// </ul>
    /// <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1,
    /// b=:value2 DELETE :value3, :value4, :value5</code>
    /// </p>
    /// <p>For more information on update expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub update_expression: ::std::option::Option<::std::string::String>,
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly
    /// in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.) To work around this, you could specify the following for
    /// <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to
    /// dereference an attribute value. For example, suppose that you wanted to check whether
    /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateGlobalTableSettingsInput {
    /// <p>The name of the global table</p>
    pub global_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The billing mode of the global table. If <code>GlobalTableBillingMode</code> is not specified, the global table defaults to <code>PROVISIONED</code> capacity billing mode.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub global_table_billing_mode: ::std::option::Option<BillingMode>,
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code>
    /// </p>
    pub global_table_provisioned_write_capacity_units: ::std::option::Option<i64>,
    /// <p>Auto scaling settings for managing provisioned write capacity for the global
    /// table.</p>
    pub global_table_provisioned_write_capacity_auto_scaling_settings_update:
        ::std::option::Option<AutoScalingSettingsUpdate>,
    /// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
    pub global_table_global_secondary_index_settings_update:
        ::std::option::Option<::std::vec::Vec<GlobalTableGlobalSecondaryIndexSettingsUpdate>>,
    /// <p>Represents the settings for a global table in a Region that will be modified.</p>
    pub replica_settings_update: ::std::option::Option<::std::vec::Vec<ReplicaSettingsUpdate>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateGlobalTableInput {
    /// <p>The global table name.</p>
    pub global_table_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of Regions that should be added or removed from the global table.</p>
    pub replica_updates: ::std::option::Option<::std::vec::Vec<ReplicaUpdate>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContributorInsightsInput {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The global secondary index name, if applicable.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the contributor insights action.</p>
    pub contributor_insights_action: ::std::option::Option<ContributorInsightsAction>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContinuousBackupsInput {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the settings used to enable point in time recovery.</p>
    pub point_in_time_recovery_specification:
        ::std::option::Option<PointInTimeRecoverySpecification>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UntagResourceInput {
    /// <p>The DynamoDB resource that the tags will be removed from. This value is an Amazon
    /// Resource Name (ARN).</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list
    /// will be removed from the DynamoDB resource.</p>
    pub tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransactWriteItemsInput {
    /// <p>An ordered array of up to 25 <code>TransactWriteItem</code> objects, each of which
    /// contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or
    /// <code>Delete</code> object. These can operate on items in different tables, but the
    /// tables must reside in the same AWS account and Region, and no two of them can operate on
    /// the same item. </p>
    pub transact_items: ::std::option::Option<::std::vec::Vec<TransactWriteItem>>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned. If set to
    /// <code>SIZE</code>, the response includes statistics about item collections (if any), that
    /// were modified during the operation and are returned in the response.
    /// If set to <code>NONE</code> (the default), no statistics are returned.
    /// </p>
    pub return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
    /// <p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code>
    /// idempotent, meaning that multiple identical calls have the same effect as one single call.</p>
    /// <p>Although multiple identical calls using the same client request token produce the same
    /// result on the server (no side effects), the responses to the calls might not be the
    /// same. If the <code>ReturnConsumedCapacity></code> parameter is set, then the initial
    /// <code>TransactWriteItems</code> call returns the amount of write capacity units
    /// consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with
    /// the same client token return the number of read capacity units consumed in reading the
    /// item.</p>
    /// <p>A client request token is valid for 10 minutes after the first request that uses it is
    /// completed. After 10 minutes, any request with the same client token is treated as a new
    /// request. Do not resubmit the same request with the same client token for more than 10
    /// minutes, or the result might not be idempotent.</p>
    /// <p>If you submit a request with the same client token but a change in other parameters
    /// within the 10-minute idempotency window, DynamoDB returns an
    /// <code>IdempotentParameterMismatch</code> exception.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransactGetItemsInput {
    /// <p>An ordered array of up to 25 <code>TransactGetItem</code> objects,
    /// each of which contains a <code>Get</code> structure.</p>
    pub transact_items: ::std::option::Option<::std::vec::Vec<TransactGetItem>>,
    /// <p>A value of <code>TOTAL</code> causes consumed capacity information
    /// to be returned, and a value of <code>NONE</code> prevents that information
    /// from being returned. No other value is valid.</p>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagResourceInput {
    /// <p>Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be assigned to the Amazon DynamoDB resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
}

/// <p>Represents the input of a <code>Scan</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanInput {
    /// <p>The name of the table containing the requested items; or, if you provide
    /// <code>IndexName</code>, the name of the table to which that index belongs.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a secondary index to scan. This index can be any local secondary index or global secondary index.  Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    /// If DynamoDB processes the number of items up to the limit while processing the results,
    /// it stops the operation and returns the matching values up to that point, and a key in
    /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
    /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Working with Queries</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The attributes to be returned in the
    /// result. You can retrieve all item attributes, specific item attributes, the count of
    /// matching items, or in the case of an index, some or all of the attributes projected into
    /// the index.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    /// specified table or index. If you query a local secondary index, then for each
    /// matching item in the index, DynamoDB fetches the entire item from the parent
    /// table. If the index is configured to project all item attributes, then all of
    /// the data can be obtained from the local secondary index, and no fetching is
    /// required.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    /// Retrieves all attributes that have been projected into the index. If the
    /// index is configured to project all attributes, this return value is
    /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>COUNT</code> - Returns the number of matching items, rather than the
    /// matching items themselves.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    /// <code>AttributesToGet</code>. This return value is equivalent to
    /// specifying <code>AttributesToGet</code> without specifying any value
    /// for <code>Select</code>.</p>
    /// <p>If you query or scan a local secondary index and request only attributes that
    /// are projected into that index, the operation reads only the index and not the
    /// table. If any of the requested attributes are not projected into the local
    /// secondary index, DynamoDB fetches each of these attributes from the parent
    /// table. This extra fetching incurs additional throughput cost and latency.</p>
    /// <p>If you query or scan a global secondary index, you can only request
    /// attributes that are projected into the index. Global secondary index queries
    /// cannot fetch attributes from the parent table.</p>
    /// </li>
    /// </ul>
    /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    /// use both <code>Select</code> and <code>AttributesToGet</code>
    /// together in a single request, unless the value for <code>Select</code> is
    /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    /// <code>AttributesToGet</code> without any value for
    /// <code>Select</code>.)</p>
    /// <note>
    /// <p>If you use the <code>ProjectionExpression</code> parameter, then
    /// the value for <code>Select</code> can only be
    /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    /// <code>Select</code> will return an error.</p>
    /// </note>
    pub select: ::std::option::Option<Select>,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub scan_filter:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: ::std::option::Option<ConditionalOperator>,
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>
    /// <p>In a parallel scan, a
    /// <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment
    /// whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>
    pub exclusive_start_key:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of
    /// segments into which the <code>Scan</code> operation will be divided. The value of
    /// <code>TotalSegments</code> corresponds to the number of application workers that will perform the
    /// parallel scan. For example, if you want to use four application threads to scan a table or an index,
    /// specify a <code>TotalSegments</code> value of 4.</p>
    /// <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal
    /// to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will
    /// be sequential rather than parallel.</p>
    /// <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>
    pub total_segments: ::std::option::Option<i32>,
    /// <p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be
    /// scanned by an application worker.</p>
    /// <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to
    /// use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value
    /// of 0, the second thread specifies 1, and so on.</p>
    /// <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be
    /// used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code>
    /// operation.</p>
    /// <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value
    /// provided for <code>TotalSegments</code>.</p>
    /// <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>
    pub segment: ::std::option::Option<i32>,
    /// <p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub projection_expression: ::std::option::Option<::std::string::String>,
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but
    /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    /// criteria are not returned.</p>
    /// <note>
    /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    /// filtering does not consume any additional read capacity units.</p>
    /// </note>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub filter_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to
    /// dereference an attribute value. For example, suppose that you wanted to check whether
    /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>A Boolean value that determines the read consistency model during the scan:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from
    /// <code>Scan</code> might not contain the results from other recently
    /// completed write operations (<code>PutItem</code>, <code>UpdateItem</code>, or
    /// <code>DeleteItem</code>).</p>
    /// </li>
    /// <li>
    /// <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p>
    /// </li>
    /// </ul>
    /// <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p>
    /// <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>
    pub consistent_read: ::std::option::Option<bool>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreTableToPointInTimeInput {
    /// <p>The DynamoDB table that will be restored. This value is an Amazon
    /// Resource Name (ARN).</p>
    pub source_table_arn: ::std::option::Option<::std::string::String>,
    /// <p>Name of the source table that is being restored.</p>
    pub source_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the new table to which it must be restored to.</p>
    pub target_table_name: ::std::option::Option<::std::string::String>,
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code>
    /// is typically 5 minutes before the current time. </p>
    pub use_latest_restorable_time: ::std::option::Option<bool>,
    /// <p>Time in the past to restore the table to.</p>
    pub restore_date_time: ::std::option::Option<Instant>,
    /// <p>The billing mode of the restored table.</p>
    pub billing_mode_override: ::std::option::Option<BillingMode>,
    /// <p>List of global secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub global_secondary_index_override:
        ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
    /// <p>List of local secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub local_secondary_index_override: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub provisioned_throughput_override: ::std::option::Option<ProvisionedThroughput>,
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub sse_specification_override: ::std::option::Option<SSESpecification>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreTableFromBackupInput {
    /// <p>The name of the new table to which the backup must be restored.</p>
    pub target_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    pub backup_arn: ::std::option::Option<::std::string::String>,
    /// <p>The billing mode of the restored table.</p>
    pub billing_mode_override: ::std::option::Option<BillingMode>,
    /// <p>List of global secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub global_secondary_index_override:
        ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
    /// <p>List of local secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub local_secondary_index_override: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub provisioned_throughput_override: ::std::option::Option<ProvisionedThroughput>,
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub sse_specification_override: ::std::option::Option<SSESpecification>,
}

/// <p>Represents the input of a <code>Query</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryInput {
    /// <p>The name of the table containing the requested items.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that
    /// if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code>
    /// </p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>The attributes to be returned in the
    /// result. You can retrieve all item attributes, specific item attributes, the count of
    /// matching items, or in the case of an index, some or all of the attributes projected into
    /// the index.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    /// specified table or index. If you query a local secondary index, then for each
    /// matching item in the index, DynamoDB fetches the entire item from the parent
    /// table. If the index is configured to project all item attributes, then all of
    /// the data can be obtained from the local secondary index, and no fetching is
    /// required.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    /// Retrieves all attributes that have been projected into the index. If the
    /// index is configured to project all attributes, this return value is
    /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>COUNT</code> - Returns the number of matching items, rather than the
    /// matching items themselves.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    /// <code>AttributesToGet</code>. This return value is equivalent to
    /// specifying <code>AttributesToGet</code> without specifying any value
    /// for <code>Select</code>.</p>
    /// <p>If you query or scan a local secondary index and request only attributes that
    /// are projected into that index, the operation will read only the index and not
    /// the table. If any of the requested attributes are not projected into the local
    /// secondary index, DynamoDB fetches each of these attributes from the parent
    /// table. This extra fetching incurs additional throughput cost and latency.</p>
    /// <p>If you query or scan a global secondary index, you can only request
    /// attributes that are projected into the index. Global secondary index queries
    /// cannot fetch attributes from the parent table.</p>
    /// </li>
    /// </ul>
    /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    /// use both <code>Select</code> and <code>AttributesToGet</code>
    /// together in a single request, unless the value for <code>Select</code> is
    /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    /// <code>AttributesToGet</code> without any value for
    /// <code>Select</code>.)</p>
    /// <note>
    /// <p>If you use the <code>ProjectionExpression</code> parameter, then
    /// the value for <code>Select</code> can only be
    /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    /// <code>Select</code> will return an error.</p>
    /// </note>
    pub select: ::std::option::Option<Select>,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    /// If DynamoDB processes the number of items up to the limit while processing the results,
    /// it stops the operation and returns the matching values up to that point, and a key in
    /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
    /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query and Scan</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    /// <p>Strongly consistent reads
    /// are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to
    /// <code>true</code>, you will receive a <code>ValidationException</code>.</p>
    pub consistent_read: ::std::option::Option<bool>,
    /// <p>This is a legacy parameter.  Use <code>KeyConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub key_conditions:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub query_filter:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, Condition>>,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: ::std::option::Option<ConditionalOperator>,
    /// <p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p>
    /// <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p>
    /// <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>
    pub scan_index_forward: ::std::option::Option<bool>,
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number, or Binary. No
    /// set data types are allowed.</p>
    pub exclusive_start_key:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub projection_expression: ::std::option::Option<::std::string::String>,
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but
    /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    /// criteria are not returned.</p>
    /// <p>A <code>FilterExpression</code> does not allow key attributes.  You cannot define a filter expression based on a partition key or a sort key.</p>
    /// <note>
    /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    /// filtering does not consume any additional read capacity units.</p>
    /// </note>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
    /// Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub filter_expression: ::std::option::Option<::std::string::String>,
    /// <p>The condition that specifies the key values for items to be retrieved by the
    /// <code>Query</code> action.</p>
    /// <p>The condition must perform an equality test on a single partition key value.</p>
    /// <p>The condition can optionally perform one of several comparison tests on a single
    /// sort key value. This allows <code>Query</code> to retrieve one item with a given
    /// partition key value and sort key value, or several items that have the same partition
    /// key value but different sort key values.</p>
    /// <p>The partition key equality test is required, and must be specified in the following format:</p>
    /// <p>
    /// <code>partitionKeyName</code>
    /// <i>=</i>
    /// <code>:partitionkeyval</code>
    /// </p>
    /// <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition
    /// for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p>
    /// <p>
    /// <code>partitionKeyName</code>
    /// <code>=</code>
    /// <code>:partitionkeyval</code>
    /// <code>AND</code>
    /// <code>sortKeyName</code>
    /// <code>=</code>
    /// <code>:sortkeyval</code>
    /// </p>
    /// <p>Valid comparisons for the sort key condition are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>=</code>
    /// <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code><</code>
    /// <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code><=</code>
    /// <code>:sortkeyval</code> - true if the sort key value is less than or equal to
    /// <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>></code>
    /// <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>>= </code>
    /// <code>:sortkeyval</code> - true if the sort key value is greater than
    /// or equal to <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>BETWEEN</code>
    /// <code>:sortkeyval1</code>
    /// <code>AND</code>
    /// <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to
    /// <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>begins_with (</code>
    /// <code>sortKeyName</code>, <code>:sortkeyval</code>
    /// <code>)</code> -
    /// true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.)  Note that the function name
    /// <code>begins_with</code> is case-sensitive.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as
    /// <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p>
    /// <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of
    /// the partition key and sort key with placeholder tokens. This option might be necessary if an attribute
    /// name conflicts with a DynamoDB reserved word. For example, the following
    /// <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved
    /// word:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Size = :myval</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute
    /// name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#S = :myval</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For a list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
    /// Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>,
    /// see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using Placeholders for Attribute
    /// Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub key_condition_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for
    /// <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the
    /// <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expression_attribute_values:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
}

/// <p>Represents the input of a <code>PutItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutItemInput {
    /// <p>The name of the table to contain the item.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p>
    /// <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p>
    /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    /// <p>Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.</p>
    /// <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    /// <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>
    pub item:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
    >,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    /// were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the
    /// content of the old item is returned.</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    /// <code>PutItem</code> does not recognize any values other than <code>NONE</code> or
    /// <code>ALL_OLD</code>.</p>
    /// </note>
    pub return_values: ::std::option::Option<ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: ::std::option::Option<ConditionalOperator>,
    /// <p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to
    /// succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information on condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTagsOfResourceInput {
    /// <p>The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    /// call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>ListTables</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTablesInput {
    /// <p>The first table name that this operation will evaluate. Use the value that was returned for
    /// <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page
    /// of results.</p>
    pub exclusive_start_table_name: ::std::option::Option<::std::string::String>,
    /// <p>A maximum number of table names to return. If this parameter is not specified, the limit is 100.</p>
    pub limit: ::std::option::Option<i32>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGlobalTablesInput {
    /// <p>The first global table name that this operation will evaluate.</p>
    pub exclusive_start_global_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
    /// with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Lists the global tables in a specific Region.</p>
    pub region_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExportsInput {
    /// <p>The Amazon Resource Name (ARN) associated with the exported table.</p>
    pub table_arn: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    /// call to <code>ListExports</code>. When provided in this manner, the API fetches the next
    /// page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListContributorInsightsInput {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A token to for the desired page, if there is one.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of results to return per page.</p>
    pub max_results: i32,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBackupsInput {
    /// <p>The backups from the table specified by <code>TableName</code> are listed. </p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of backups to return at once.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Only backups created after this time are listed. <code>TimeRangeLowerBound</code> is inclusive.</p>
    pub time_range_lower_bound: ::std::option::Option<Instant>,
    /// <p>Only backups created before this time are listed. <code>TimeRangeUpperBound</code> is exclusive. </p>
    pub time_range_upper_bound: ::std::option::Option<Instant>,
    /// <p>
    /// <code>LastEvaluatedBackupArn</code> is the Amazon Resource Name (ARN) of the backup last
    /// evaluated when the current page of results was returned, inclusive of the current page
    /// of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a
    /// new <code>ListBackups</code> operation in order to fetch the next page of results. </p>
    pub exclusive_start_backup_arn: ::std::option::Option<::std::string::String>,
    /// <p>The backups from the table specified by <code>BackupType</code> are listed.</p>
    /// <p>Where <code>BackupType</code> can be:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>USER</code> - On-demand backup created by you.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SYSTEM</code> - On-demand backup automatically created by
    /// DynamoDB.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All types of on-demand backups (USER and SYSTEM).</p>
    /// </li>
    /// </ul>
    pub backup_type: ::std::option::Option<BackupTypeFilter>,
}

/// <p>Represents the input of a <code>GetItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetItemInput {
    /// <p>The name of the table containing the requested item.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    /// the item to retrieve.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    pub consistent_read: ::std::option::Option<bool>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes are returned. If any of the
    /// requested attributes are not found, they do not appear in the result.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub projection_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportTableToPointInTimeInput {
    /// <p>The Amazon Resource Name (ARN) associated with the table to export.</p>
    pub table_arn: ::std::option::Option<::std::string::String>,
    /// <p>Time in the past from which to export table data. The table export will be a snapshot
    /// of the table's state at this point in time.</p>
    pub export_time: ::std::option::Option<Instant>,
    /// <p>Providing a <code>ClientToken</code> makes the call to
    /// <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple
    /// identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is
    /// completed. After 8 hours, any request with the same client token is treated as a new
    /// request. Do not resubmit the same request with the same client token for more than 8
    /// hours, or the result might not be idempotent.</p>
    /// <p>If you submit a request with the same client token but a change in other parameters
    /// within the 8-hour idempotency window, DynamoDB returns an
    /// <code>IdempotentParameterMismatch</code> exception.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    pub s3_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the AWS account that owns the bucket the export will be stored in.</p>
    pub s3_bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported
    /// snapshot.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Type of encryption used on the bucket where export data will be stored. Valid values
    /// for <code>S3SseAlgorithm</code> are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KMS</code> - server-side encryption with AWS KMS managed keys</p>
    /// </li>
    /// </ul>
    pub s3_sse_algorithm: ::std::option::Option<S3SseAlgorithm>,
    /// <p>The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will
    /// be stored (if applicable).</p>
    pub s3_sse_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The format for the exported data. Valid values for <code>ExportFormat</code> are
    /// <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
    pub export_format: ::std::option::Option<ExportFormat>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteTransactionInput {
    /// <p>
    /// The list of PartiQL statements representing the transaction to run.
    /// </p>
    pub transact_statements: ::std::option::Option<::std::vec::Vec<ParameterizedStatement>>,
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteStatementInput {
    /// <p>
    /// The PartiQL statement representing the operation to run.
    /// </p>
    pub statement: ::std::option::Option<::std::string::String>,
    /// <p>
    /// The parameters for the PartiQL statement, if any.
    /// </p>
    pub parameters: ::std::option::Option<::std::vec::Vec<AttributeValue>>,
    /// <p>
    /// The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    /// </p>
    pub consistent_read: ::std::option::Option<bool>,
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    pub next_token: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableKinesisStreamingDestinationInput {
    /// <p>The name of the DynamoDB table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for a Kinesis data stream.</p>
    pub stream_arn: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisableKinesisStreamingDestinationInput {
    /// <p>The name of the DynamoDB table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for a Kinesis data stream.</p>
    pub stream_arn: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTimeToLiveInput {
    /// <p>The name of the table to be described.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTableReplicaAutoScalingInput {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>DescribeTable</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTableInput {
    /// <p>The name of the table to describe.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>DescribeLimits</code> operation. Has no content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLimitsInput {}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeKinesisStreamingDestinationInput {
    /// <p>The name of the table being described.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeGlobalTableSettingsInput {
    /// <p>The name of the global table to describe.</p>
    pub global_table_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeGlobalTableInput {
    /// <p>The name of the global table.</p>
    pub global_table_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeExportInput {
    /// <p>The Amazon Resource Name (ARN) associated with the export.</p>
    pub export_arn: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEndpointsInput {}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeContributorInsightsInput {
    /// <p>The name of the table to describe.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the global secondary index to describe, if applicable.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeContinuousBackupsInput {
    /// <p>Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeBackupInput {
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    pub backup_arn: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>DeleteTable</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteTableInput {
    /// <p>The name of the table to delete.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>DeleteItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteItemInput {
    /// <p>The name of the table from which to delete the item.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    /// the item to delete.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ExpectedAttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: ::std::option::Option<ConditionalOperator>,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    /// were deleted. For <code>DeleteItem</code>, the valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - The content of the old item is returned.</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    /// <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or
    /// <code>ALL_OLD</code>.</p>
    /// </note>
    pub return_values: ::std::option::Option<ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
    /// <p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to
    /// succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: ::std::option::Option<::std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, AttributeValue>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteBackupInput {
    /// <p>The ARN associated with the backup.</p>
    pub backup_arn: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>CreateTable</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTableInput {
    /// <p>An array of attributes that describe the key schema for the table and indexes.</p>
    pub attribute_definitions: ::std::option::Option<::std::vec::Vec<AttributeDefinition>>,
    /// <p>The name of the table to create.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the attributes that make up the primary key for a table or an index. The attributes
    /// in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more
    /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the
    /// <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>Each <code>KeySchemaElement</code> in the array is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AttributeName</code> - The name of this key attribute.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeyType</code> - The role that the key attribute will assume:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>HASH</code> - partition key</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RANGE</code> - sort key</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The partition key of an item is also known as its <i>hash
    /// attribute</i>. The term "hash attribute" derives from the DynamoDB usage of
    /// an internal hash function to evenly distribute data items across partitions, based
    /// on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>.
    /// The term "range attribute" derives from the way DynamoDB stores items with the same
    /// partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    /// <p>For a simple primary key (partition key), you must provide
    /// exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p>
    /// <p>For a composite primary key (partition key and sort key), you must provide exactly two
    /// elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>,
    /// and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub key_schema: ::std::option::Option<::std::vec::Vec<KeySchemaElement>>,
    /// <p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p>
    /// <p>Each local secondary index in the array includes the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p>
    /// <p></p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with
    /// the same partition key as the table.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Projection</code> - Specifies
    /// attributes that are copied (projected) from the table into the index. These are in
    /// addition to the primary key attributes and index key
    /// attributes, which are automatically projected. Each
    /// attribute specification is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ProjectionType</code> - One
    /// of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    /// index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>INCLUDE</code> - Only the specified table attributes are
    /// projected into the index. The list of projected attributes is in
    /// <code>NonKeyAttributes</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All of the table attributes are projected into the
    /// index.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NonKeyAttributes</code> - A list of one or more non-key
    /// attribute names that are projected into the secondary index. The total
    /// count of attributes provided in <code>NonKeyAttributes</code>,
    /// summed across all of the secondary indexes, must not exceed 100. If you
    /// project the same attribute into two different indexes, this counts as
    /// two distinct attributes when determining the total.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub local_secondary_indexes: ::std::option::Option<::std::vec::Vec<LocalSecondaryIndex>>,
    /// <p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p>
    /// <p></p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Projection</code> - Specifies
    /// attributes that are copied (projected) from the table into the index. These are in
    /// addition to the primary key attributes and index key
    /// attributes, which are automatically projected. Each
    /// attribute specification is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ProjectionType</code> - One
    /// of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    /// index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>INCLUDE</code> - Only the specified table attributes are
    /// projected into the index. The list of projected attributes is in
    /// <code>NonKeyAttributes</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All of the table attributes are projected into the
    /// index.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
    /// projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
    /// consisting of read and write capacity units.</p>
    /// </li>
    /// </ul>
    pub global_secondary_indexes: ::std::option::Option<::std::vec::Vec<GlobalSecondaryIndex>>,
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub billing_mode: ::std::option::Option<BillingMode>,
    /// <p>Represents the provisioned throughput settings for a specified table or index. The
    /// settings can be modified using the <code>UpdateTable</code> operation.</p>
    /// <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you
    /// set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this
    /// property.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
    /// Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub provisioned_throughput: ::std::option::Option<ProvisionedThroughput>,
    /// <p>The settings for DynamoDB Streams on the table. These settings consist of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled
    /// (true) or disabled (false).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code>
    /// determines what information is written to the table's stream. Valid values for
    /// <code>StreamViewType</code> are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the
    /// stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written
    /// to the stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is
    /// written to the stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are
    /// written to the stream.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub stream_specification: ::std::option::Option<StreamSpecification>,
    /// <p>Represents the settings used to enable server-side encryption.</p>
    pub sse_specification: ::std::option::Option<SSESpecification>,
    /// <p>A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGlobalTableInput {
    /// <p>The global table name.</p>
    pub global_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The Regions where the global table needs to be created.</p>
    pub replication_group: ::std::option::Option<::std::vec::Vec<Replica>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBackupInput {
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>Specified name for the backup.</p>
    pub backup_name: ::std::option::Option<::std::string::String>,
}

/// <p>Represents the input of a <code>BatchWriteItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchWriteItemInput {
    /// <p>A map of one or more table names and, for each table, a list of operations to be performed
    /// (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the
    /// following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
    /// item to be deleted is identified by a <code>Key</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
    /// Each entry in this map consists of an attribute name and an attribute value. For each
    /// primary key, you must provide <i>all</i> of the key attributes. For example, with a
    /// simple primary key, you only need to provide a value for the partition key. For a
    /// composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
    /// be put is identified by an <code>Item</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Item</code> - A map of attributes and their values. Each entry in
    /// this map consists of an attribute name and an attribute value. Attribute
    /// values must not be null; string and binary type attributes must have
    /// lengths greater than zero; and set type attributes must not be empty.
    /// Requests that contain empty values are rejected with a
    /// <code>ValidationException</code> exception.</p>
    /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub request_items: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<WriteRequest>>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics: ::std::option::Option<ReturnItemCollectionMetrics>,
}

/// <p>Represents the input of a <code>BatchGetItem</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetItemInput {
    /// <p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p>
    /// <p>Each element in the map of items to retrieve consists of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if
    /// <code>false</code> (the default), an eventually consistent read is used.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB
    /// Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Keys</code> - An array of primary key attribute values that define specific items in the
    /// table. For each primary key, you must provide <i>all</i> of the key attributes. For
    /// example, with a simple primary key, you only need to provide the partition key value. For a
    /// composite key, you must provide <i>both</i> the partition key value and the sort key value.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ProjectionExpression</code> - A string that identifies one or more
    /// attributes to retrieve from the table. These attributes can include scalars,
    /// sets, or elements of a JSON document. The attributes in the expression must be
    /// separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes are returned. If any
    /// of the requested attributes are not found, they do not appear in the
    /// result.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>AttributesToGet</code> - This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    /// </p>
    /// </li>
    /// </ul>
    pub request_items: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, KeysAndAttributes>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: ::std::option::Option<ReturnConsumedCapacity>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchExecuteStatementInput {
    /// <p>
    /// The list of PartiQL statements representing the batch to run.
    /// </p>
    pub statements: ::std::option::Option<::std::vec::Vec<BatchStatementRequest>>,
}
