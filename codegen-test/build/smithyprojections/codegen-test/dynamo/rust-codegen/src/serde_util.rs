// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use smithy_types::Blob;
use smithy_types::Instant;
pub fn stdoptionoptioninstant_epoch_seconds_ser<S>(
    _inp: &::std::option::Option<Instant>,
    _serializer: S,
) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
where
    S: ::serde::Serializer,
{
    use ::serde::Serialize;
    let el = _inp;
    el.as_ref()
        .map(|el| crate::instant_epoch::InstantEpoch(*el))
        .serialize(_serializer)
}

pub fn stdoptionoptioninstant_epoch_seconds_deser<'de, D>(
    _deser: D,
) -> Result<::std::option::Option<Instant>, D::Error>
where
    D: ::serde::Deserializer<'de>,
{
    use ::serde::Deserialize;
    Ok(
        ::std::option::Option::<crate::instant_epoch::InstantEpoch>::deserialize(_deser)?
            .map(|el| el.0),
    )
}

pub fn blob_ser<S>(
    _inp: &Blob,
    _serializer: S,
) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
where
    S: ::serde::Serializer,
{
    use ::serde::Serialize;
    let el = _inp;
    crate::blob_serde::BlobSer(el).serialize(_serializer)
}

pub fn blob_deser<'de, D>(_deser: D) -> Result<Blob, D::Error>
where
    D: ::serde::Deserializer<'de>,
{
    use ::serde::Deserialize;
    Ok(crate::blob_serde::BlobDeser::deserialize(_deser)?.0)
}

pub fn stdvecvecblob_ser<S>(
    _inp: &[Blob],
    _serializer: S,
) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
where
    S: ::serde::Serializer,
{
    use ::serde::Serialize;
    let el = _inp;
    el.iter()
        .map(|el| crate::blob_serde::BlobSer(el))
        .collect::<Vec<_>>()
        .serialize(_serializer)
}

pub fn stdvecvecblob_deser<'de, D>(_deser: D) -> Result<::std::vec::Vec<Blob>, D::Error>
where
    D: ::serde::Deserializer<'de>,
{
    use ::serde::Deserialize;
    Ok(
        ::std::vec::Vec::<crate::blob_serde::BlobDeser>::deserialize(_deser)?
            .into_iter()
            .map(|el| el.0)
            .collect(),
    )
}
