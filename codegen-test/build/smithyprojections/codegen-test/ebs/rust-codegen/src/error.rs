// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::AccessDeniedExceptionReason;
use crate::model::RequestThrottledExceptionReason;
use crate::model::ResourceNotFoundExceptionReason;
use crate::model::ServiceQuotaExceededExceptionReason;
use crate::model::ValidationExceptionReason;
/// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationError {
    pub message: Option<String>,
    /// <p>The reason for the validation exception.</p>
    pub reason: Option<ValidationExceptionReason>,
}
impl ValidationError {
    /// Creates a new builder-style object to manufacture [`ValidationError`](crate::error::ValidationError)
    pub fn builder() -> crate::error::validation_error::Builder {
        crate::error::validation_error::Builder::default()
    }
}
impl ValidationError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ValidationError")?;
        Ok(())
    }
}
impl ::std::error::Error for ValidationError {}
/// See [`ValidationError`](crate::error::ValidationError)
pub mod validation_error {

    use crate::error::ValidationError;
    use crate::model::ValidationExceptionReason;
    /// A builder for [`ValidationError`](crate::error::ValidationError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
        reason: Option<ValidationExceptionReason>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// <p>The reason for the validation exception.</p>
        pub fn reason(mut self, inp: ValidationExceptionReason) -> Self {
            self.reason = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ValidationError`](crate::error::ValidationError)
        pub fn build(self) -> ValidationError {
            ValidationError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}

/// <p>Your current service quotas do not allow you to perform this action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceQuotaExceededError {
    /// <p>The reason for the exception.</p>
    pub reason: Option<ServiceQuotaExceededExceptionReason>,
    pub message: Option<String>,
}
impl ServiceQuotaExceededError {
    /// Creates a new builder-style object to manufacture [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    pub fn builder() -> crate::error::service_quota_exceeded_error::Builder {
        crate::error::service_quota_exceeded_error::Builder::default()
    }
}
impl ServiceQuotaExceededError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ServiceQuotaExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ServiceQuotaExceededError")?;
        Ok(())
    }
}
impl ::std::error::Error for ServiceQuotaExceededError {}
/// See [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
pub mod service_quota_exceeded_error {

    use crate::error::ServiceQuotaExceededError;
    use crate::model::ServiceQuotaExceededExceptionReason;
    /// A builder for [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        reason: Option<ServiceQuotaExceededExceptionReason>,
        message: Option<String>,
    }
    impl Builder {
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, inp: ServiceQuotaExceededExceptionReason) -> Self {
            self.reason = Some(inp);
            self
        }
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
        pub fn build(self) -> ServiceQuotaExceededError {
            ServiceQuotaExceededError {
                reason: self.reason,
                message: self.message,
            }
        }
    }
}

/// <p>The specified resource does not exist.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceNotFoundError {
    pub message: Option<String>,
    /// <p>The reason for the exception.</p>
    pub reason: Option<ResourceNotFoundExceptionReason>,
}
impl ResourceNotFoundError {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    pub fn builder() -> crate::error::resource_not_found_error::Builder {
        crate::error::resource_not_found_error::Builder::default()
    }
}
impl ResourceNotFoundError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundError")?;
        Ok(())
    }
}
impl ::std::error::Error for ResourceNotFoundError {}
/// See [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
pub mod resource_not_found_error {

    use crate::error::ResourceNotFoundError;
    use crate::model::ResourceNotFoundExceptionReason;
    /// A builder for [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
        reason: Option<ResourceNotFoundExceptionReason>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, inp: ResourceNotFoundExceptionReason) -> Self {
            self.reason = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
        pub fn build(self) -> ResourceNotFoundError {
            ResourceNotFoundError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}

/// <p>The number of API requests has exceed the maximum allowed API request throttling
/// limit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestThrottledError {
    pub message: Option<String>,
    /// <p>The reason for the exception.</p>
    pub reason: Option<RequestThrottledExceptionReason>,
}
impl RequestThrottledError {
    /// Creates a new builder-style object to manufacture [`RequestThrottledError`](crate::error::RequestThrottledError)
    pub fn builder() -> crate::error::request_throttled_error::Builder {
        crate::error::request_throttled_error::Builder::default()
    }
}
impl RequestThrottledError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for RequestThrottledError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "RequestThrottledError")?;
        Ok(())
    }
}
impl ::std::error::Error for RequestThrottledError {}
/// See [`RequestThrottledError`](crate::error::RequestThrottledError)
pub mod request_throttled_error {

    use crate::error::RequestThrottledError;
    use crate::model::RequestThrottledExceptionReason;
    /// A builder for [`RequestThrottledError`](crate::error::RequestThrottledError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
        reason: Option<RequestThrottledExceptionReason>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, inp: RequestThrottledExceptionReason) -> Self {
            self.reason = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`RequestThrottledError`](crate::error::RequestThrottledError)
        pub fn build(self) -> RequestThrottledError {
            RequestThrottledError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}

/// <p>An internal error has occurred.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternalServerError {
    pub message: Option<String>,
}
impl InternalServerError {
    /// Creates a new builder-style object to manufacture [`InternalServerError`](crate::error::InternalServerError)
    pub fn builder() -> crate::error::internal_server_error::Builder {
        crate::error::internal_server_error::Builder::default()
    }
}
impl InternalServerError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Server }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for InternalServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServerError")?;
        Ok(())
    }
}
impl ::std::error::Error for InternalServerError {}
/// See [`InternalServerError`](crate::error::InternalServerError)
pub mod internal_server_error {

    use crate::error::InternalServerError;
    /// A builder for [`InternalServerError`](crate::error::InternalServerError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InternalServerError`](crate::error::InternalServerError)
        pub fn build(self) -> InternalServerError {
            InternalServerError {
                message: self.message,
            }
        }
    }
}

/// <p>The request uses the same client token as a previous, but non-identical
/// request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConflictError {
    pub message: Option<String>,
}
impl ConflictError {
    /// Creates a new builder-style object to manufacture [`ConflictError`](crate::error::ConflictError)
    pub fn builder() -> crate::error::conflict_error::Builder {
        crate::error::conflict_error::Builder::default()
    }
}
impl ConflictError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Server }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ConflictError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConflictError")?;
        Ok(())
    }
}
impl ::std::error::Error for ConflictError {}
/// See [`ConflictError`](crate::error::ConflictError)
pub mod conflict_error {

    use crate::error::ConflictError;
    /// A builder for [`ConflictError`](crate::error::ConflictError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ConflictError`](crate::error::ConflictError)
        pub fn build(self) -> ConflictError {
            ConflictError {
                message: self.message,
            }
        }
    }
}

/// <p>You have reached the limit for concurrent API requests. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapi-performance">Optimizing performance of the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud
/// User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConcurrentLimitExceededError {
    pub message: Option<String>,
}
impl ConcurrentLimitExceededError {
    /// Creates a new builder-style object to manufacture [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
    pub fn builder() -> crate::error::concurrent_limit_exceeded_error::Builder {
        crate::error::concurrent_limit_exceeded_error::Builder::default()
    }
}
impl ConcurrentLimitExceededError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for ConcurrentLimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConcurrentLimitExceededError")?;
        Ok(())
    }
}
impl ::std::error::Error for ConcurrentLimitExceededError {}
/// See [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
pub mod concurrent_limit_exceeded_error {

    use crate::error::ConcurrentLimitExceededError;
    /// A builder for [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
        pub fn build(self) -> ConcurrentLimitExceededError {
            ConcurrentLimitExceededError {
                message: self.message,
            }
        }
    }
}

/// <p>You do not have sufficient access to perform this action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessDeniedError {
    pub message: Option<String>,
    /// <p>The reason for the exception.</p>
    pub reason: Option<AccessDeniedExceptionReason>,
}
impl AccessDeniedError {
    /// Creates a new builder-style object to manufacture [`AccessDeniedError`](crate::error::AccessDeniedError)
    pub fn builder() -> crate::error::access_denied_error::Builder {
        crate::error::access_denied_error::Builder::default()
    }
}
impl AccessDeniedError {
    // TODO: create shared runtime crate
    // fn at_fault(&self) -> ErrorCause { ErrorCause::Client }
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
}
impl ::std::fmt::Display for AccessDeniedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AccessDeniedError")?;
        Ok(())
    }
}
impl ::std::error::Error for AccessDeniedError {}
/// See [`AccessDeniedError`](crate::error::AccessDeniedError)
pub mod access_denied_error {

    use crate::error::AccessDeniedError;
    use crate::model::AccessDeniedExceptionReason;
    /// A builder for [`AccessDeniedError`](crate::error::AccessDeniedError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: Option<String>,
        reason: Option<AccessDeniedExceptionReason>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, inp: AccessDeniedExceptionReason) -> Self {
            self.reason = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`AccessDeniedError`](crate::error::AccessDeniedError)
        pub fn build(self) -> AccessDeniedError {
            AccessDeniedError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}
