// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ValidationExceptionReason {
    InvalidBlock,
    InvalidBlockToken,
    InvalidContentEncoding,
    InvalidCustomerKey,
    InvalidDependencyRequest,
    InvalidPageToken,
    InvalidParameterValue,
    InvalidSnapshotId,
    InvalidTag,
    InvalidVolumeSize,
    UnrelatedSnapshots,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for ValidationExceptionReason
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "INVALID_BLOCK" => ValidationExceptionReason::InvalidBlock,
            "INVALID_BLOCK_TOKEN" => ValidationExceptionReason::InvalidBlockToken,
            "INVALID_CONTENT_ENCODING" => ValidationExceptionReason::InvalidContentEncoding,
            "INVALID_CUSTOMER_KEY" => ValidationExceptionReason::InvalidCustomerKey,
            "INVALID_DEPENDENCY_REQUEST" => ValidationExceptionReason::InvalidDependencyRequest,
            "INVALID_PAGE_TOKEN" => ValidationExceptionReason::InvalidPageToken,
            "INVALID_PARAMETER_VALUE" => ValidationExceptionReason::InvalidParameterValue,
            "INVALID_SNAPSHOT_ID" => ValidationExceptionReason::InvalidSnapshotId,
            "INVALID_TAG" => ValidationExceptionReason::InvalidTag,
            "INVALID_VOLUME_SIZE" => ValidationExceptionReason::InvalidVolumeSize,
            "UNRELATED_SNAPSHOTS" => ValidationExceptionReason::UnrelatedSnapshots,
            other => ValidationExceptionReason::Unknown(other.to_owned()),
        }
    }
}
impl ValidationExceptionReason {
    pub fn as_str(&self) -> &str {
        match self {
            ValidationExceptionReason::InvalidBlock => "INVALID_BLOCK",
            ValidationExceptionReason::InvalidBlockToken => "INVALID_BLOCK_TOKEN",
            ValidationExceptionReason::InvalidContentEncoding => "INVALID_CONTENT_ENCODING",
            ValidationExceptionReason::InvalidCustomerKey => "INVALID_CUSTOMER_KEY",
            ValidationExceptionReason::InvalidDependencyRequest => "INVALID_DEPENDENCY_REQUEST",
            ValidationExceptionReason::InvalidPageToken => "INVALID_PAGE_TOKEN",
            ValidationExceptionReason::InvalidParameterValue => "INVALID_PARAMETER_VALUE",
            ValidationExceptionReason::InvalidSnapshotId => "INVALID_SNAPSHOT_ID",
            ValidationExceptionReason::InvalidTag => "INVALID_TAG",
            ValidationExceptionReason::InvalidVolumeSize => "INVALID_VOLUME_SIZE",
            ValidationExceptionReason::UnrelatedSnapshots => "UNRELATED_SNAPSHOTS",
            ValidationExceptionReason::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for ValidationExceptionReason {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for ValidationExceptionReason {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ServiceQuotaExceededExceptionReason {
    DependencyServiceQuotaExceeded,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for ServiceQuotaExceededExceptionReason
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "DEPENDENCY_SERVICE_QUOTA_EXCEEDED" => {
                ServiceQuotaExceededExceptionReason::DependencyServiceQuotaExceeded
            }
            other => ServiceQuotaExceededExceptionReason::Unknown(other.to_owned()),
        }
    }
}
impl ServiceQuotaExceededExceptionReason {
    pub fn as_str(&self) -> &str {
        match self {
            ServiceQuotaExceededExceptionReason::DependencyServiceQuotaExceeded => {
                "DEPENDENCY_SERVICE_QUOTA_EXCEEDED"
            }
            ServiceQuotaExceededExceptionReason::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for ServiceQuotaExceededExceptionReason {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for ServiceQuotaExceededExceptionReason {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ResourceNotFoundExceptionReason {
    DependencyResourceNotFound,
    SnapshotNotFound,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for ResourceNotFoundExceptionReason
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "DEPENDENCY_RESOURCE_NOT_FOUND" => {
                ResourceNotFoundExceptionReason::DependencyResourceNotFound
            }
            "SNAPSHOT_NOT_FOUND" => ResourceNotFoundExceptionReason::SnapshotNotFound,
            other => ResourceNotFoundExceptionReason::Unknown(other.to_owned()),
        }
    }
}
impl ResourceNotFoundExceptionReason {
    pub fn as_str(&self) -> &str {
        match self {
            ResourceNotFoundExceptionReason::DependencyResourceNotFound => {
                "DEPENDENCY_RESOURCE_NOT_FOUND"
            }
            ResourceNotFoundExceptionReason::SnapshotNotFound => "SNAPSHOT_NOT_FOUND",
            ResourceNotFoundExceptionReason::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for ResourceNotFoundExceptionReason {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for ResourceNotFoundExceptionReason {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum RequestThrottledExceptionReason {
    AccountThrottled,
    DependencyRequestThrottled,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for RequestThrottledExceptionReason
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "ACCOUNT_THROTTLED" => RequestThrottledExceptionReason::AccountThrottled,
            "DEPENDENCY_REQUEST_THROTTLED" => {
                RequestThrottledExceptionReason::DependencyRequestThrottled
            }
            other => RequestThrottledExceptionReason::Unknown(other.to_owned()),
        }
    }
}
impl RequestThrottledExceptionReason {
    pub fn as_str(&self) -> &str {
        match self {
            RequestThrottledExceptionReason::AccountThrottled => "ACCOUNT_THROTTLED",
            RequestThrottledExceptionReason::DependencyRequestThrottled => {
                "DEPENDENCY_REQUEST_THROTTLED"
            }
            RequestThrottledExceptionReason::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for RequestThrottledExceptionReason {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for RequestThrottledExceptionReason {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum AccessDeniedExceptionReason {
    DependencyAccessDenied,
    UnauthorizedAccount,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for AccessDeniedExceptionReason
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "DEPENDENCY_ACCESS_DENIED" => AccessDeniedExceptionReason::DependencyAccessDenied,
            "UNAUTHORIZED_ACCOUNT" => AccessDeniedExceptionReason::UnauthorizedAccount,
            other => AccessDeniedExceptionReason::Unknown(other.to_owned()),
        }
    }
}
impl AccessDeniedExceptionReason {
    pub fn as_str(&self) -> &str {
        match self {
            AccessDeniedExceptionReason::DependencyAccessDenied => "DEPENDENCY_ACCESS_DENIED",
            AccessDeniedExceptionReason::UnauthorizedAccount => "UNAUTHORIZED_ACCOUNT",
            AccessDeniedExceptionReason::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for AccessDeniedExceptionReason {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for AccessDeniedExceptionReason {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum Status {
    Completed,
    Error,
    Pending,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for Status
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "completed" => Status::Completed,
            "error" => Status::Error,
            "pending" => Status::Pending,
            other => Status::Unknown(other.to_owned()),
        }
    }
}
impl Status {
    pub fn as_str(&self) -> &str {
        match self {
            Status::Completed => "completed",
            Status::Error => "error",
            Status::Pending => "pending",
            Status::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for Status {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for Status {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

/// <p>Describes a tag.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Tag {
    /// <p>The key of the tag.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The value of the tag.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
/// See [`Tag`](crate::model::Tag)
pub mod tag {

    use crate::model::Tag;
    /// A builder for [`Tag`](crate::model::Tag)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key: ::std::option::Option<::std::string::String>,
        value: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The key of the tag.</p>
        pub fn key(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key = Some(inp.into());
            self
        }
        /// <p>The value of the tag.</p>
        pub fn value(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.value = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`Tag`](crate::model::Tag)
        pub fn build(self) -> Tag {
            Tag {
                key: self.key,
                value: self.value,
            }
        }
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::model::Tag)
    pub fn builder() -> crate::model::tag::Builder {
        crate::model::tag::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ChecksumAlgorithm {
    ChecksumAlgorithmSha256,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for ChecksumAlgorithm
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "SHA256" => ChecksumAlgorithm::ChecksumAlgorithmSha256,
            other => ChecksumAlgorithm::Unknown(other.to_owned()),
        }
    }
}
impl ChecksumAlgorithm {
    pub fn as_str(&self) -> &str {
        match self {
            ChecksumAlgorithm::ChecksumAlgorithmSha256 => "SHA256",
            ChecksumAlgorithm::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for ChecksumAlgorithm {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for ChecksumAlgorithm {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}

/// <p>A block of data in an Amazon Elastic Block Store snapshot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Block {
    /// <p>The block token for the block index.</p>
    pub block_token: ::std::option::Option<::std::string::String>,
    /// <p>The block index.</p>
    pub block_index: ::std::option::Option<i32>,
}
/// See [`Block`](crate::model::Block)
pub mod block {

    use crate::model::Block;
    /// A builder for [`Block`](crate::model::Block)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        block_token: ::std::option::Option<::std::string::String>,
        block_index: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The block token for the block index.</p>
        pub fn block_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.block_token = Some(inp.into());
            self
        }
        /// <p>The block index.</p>
        pub fn block_index(mut self, inp: i32) -> Self {
            self.block_index = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`Block`](crate::model::Block)
        pub fn build(self) -> Block {
            Block {
                block_token: self.block_token,
                block_index: self.block_index,
            }
        }
    }
}
impl Block {
    /// Creates a new builder-style object to manufacture [`Block`](crate::model::Block)
    pub fn builder() -> crate::model::block::Builder {
        crate::model::block::Builder::default()
    }
}

/// <p>A block of data in an Amazon Elastic Block Store snapshot that is different from another snapshot of
/// the same volume/snapshot lineage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangedBlock {
    /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in
    /// the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot
    /// does not have the changed block that is on the second snapshot.</p>
    pub first_block_token: ::std::option::Option<::std::string::String>,
    /// <p>The block index.</p>
    pub block_index: ::std::option::Option<i32>,
    /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in
    /// the <code>ListChangedBlocks</code> operation.</p>
    pub second_block_token: ::std::option::Option<::std::string::String>,
}
/// See [`ChangedBlock`](crate::model::ChangedBlock)
pub mod changed_block {

    use crate::model::ChangedBlock;
    /// A builder for [`ChangedBlock`](crate::model::ChangedBlock)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        first_block_token: ::std::option::Option<::std::string::String>,
        block_index: ::std::option::Option<i32>,
        second_block_token: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in
        /// the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot
        /// does not have the changed block that is on the second snapshot.</p>
        pub fn first_block_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.first_block_token = Some(inp.into());
            self
        }
        /// <p>The block index.</p>
        pub fn block_index(mut self, inp: i32) -> Self {
            self.block_index = Some(inp);
            self
        }
        /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in
        /// the <code>ListChangedBlocks</code> operation.</p>
        pub fn second_block_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.second_block_token = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ChangedBlock`](crate::model::ChangedBlock)
        pub fn build(self) -> ChangedBlock {
            ChangedBlock {
                first_block_token: self.first_block_token,
                block_index: self.block_index,
                second_block_token: self.second_block_token,
            }
        }
    }
}
impl ChangedBlock {
    /// Creates a new builder-style object to manufacture [`ChangedBlock`](crate::model::ChangedBlock)
    pub fn builder() -> crate::model::changed_block::Builder {
        crate::model::changed_block::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ChecksumAggregationMethod {
    ChecksumAggregationLinear,
    Unknown(String),
}
impl<T> ::std::convert::From<T> for ChecksumAggregationMethod
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        match s.as_ref() {
            "LINEAR" => ChecksumAggregationMethod::ChecksumAggregationLinear,
            other => ChecksumAggregationMethod::Unknown(other.to_owned()),
        }
    }
}
impl ChecksumAggregationMethod {
    pub fn as_str(&self) -> &str {
        match self {
            ChecksumAggregationMethod::ChecksumAggregationLinear => "LINEAR",
            ChecksumAggregationMethod::Unknown(s) => s.as_ref(),
        }
    }
}

impl ::serde::Serialize for ChecksumAggregationMethod {
    fn serialize<S>(
        &self,
        serializer: S,
    ) -> Result<<S as ::serde::Serializer>::Ok, <S as ::serde::Serializer>::Error>
    where
        S: ::serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}

impl<'de> ::serde::Deserialize<'de> for ChecksumAggregationMethod {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let data = <&str>::deserialize(deserializer)?;
        Ok(Self::from(data))
    }
}
