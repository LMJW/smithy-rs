// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::ChecksumAggregationMethod;
use crate::model::ChecksumAlgorithm;
use crate::model::Tag;
use smithy_types::Blob;
use std::fmt::Write;
/// See [`CompleteSnapshotInput`](crate::input::CompleteSnapshotInput)
pub mod complete_snapshot_input {

    use crate::input::CompleteSnapshotInput;
    use crate::model::ChecksumAggregationMethod;
    use crate::model::ChecksumAlgorithm;
    use crate::operation::CompleteSnapshot;
    /// A builder for [`CompleteSnapshotInput`](crate::input::CompleteSnapshotInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        changed_blocks_count: ::std::option::Option<i32>,
        checksum_aggregation_method: ::std::option::Option<ChecksumAggregationMethod>,
        checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
        snapshot_id: ::std::option::Option<::std::string::String>,
        checksum: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The number of blocks that were written to the snapshot.</p>
        pub fn changed_blocks_count(mut self, inp: i32) -> Self {
            self.changed_blocks_count = Some(inp);
            self
        }
        /// <p>The aggregation method used to generate the checksum. Currently, the only supported
        /// aggregation method is <code>LINEAR</code>.</p>
        pub fn checksum_aggregation_method(mut self, inp: ChecksumAggregationMethod) -> Self {
            self.checksum_aggregation_method = Some(inp);
            self
        }
        /// <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
        /// is <code>SHA256</code>.</p>
        pub fn checksum_algorithm(mut self, inp: ChecksumAlgorithm) -> Self {
            self.checksum_algorithm = Some(inp);
            self
        }
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        /// <p>An aggregated Base-64 SHA256 checksum based on the checksums of each written
        /// block.</p>
        /// <p>To generate the aggregated checksum using the linear aggregation method, arrange the
        /// checksums for each written block in ascending order of their block index, concatenate
        /// them to form a single string, and then generate the checksum on the entire string using
        /// the SHA256 algorithm.</p>
        pub fn checksum(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.checksum = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CompleteSnapshot`](crate::operation::CompleteSnapshot)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CompleteSnapshot, ()> {
            let op = CompleteSnapshot::new(CompleteSnapshotInput {
                changed_blocks_count: self.changed_blocks_count,
                checksum_aggregation_method: self.checksum_aggregation_method,
                checksum_algorithm: self.checksum_algorithm,
                snapshot_id: self.snapshot_id.unwrap_or_default(),
                checksum: self.checksum,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl CompleteSnapshotInput {
    fn uri_base(&self, output: &mut String) {
        write!(
            output,
            "/snapshots/completion/{SnapshotId}",
            SnapshotId = ::smithy_http::label::fmt_string(&self.snapshot_id, false)
        )
        .expect("formatting should succeed")
    }
    fn add_headers(&self, mut builder: ::http::request::Builder) -> ::http::request::Builder {
        if let Some(inner_1) = &self.changed_blocks_count {
            let formatted_2 = ::smithy_http::query::fmt_default(&inner_1);
            if !formatted_2.is_empty() {
                builder = builder.header(
                    "x-amz-ChangedBlocksCount",
                    ::smithy_http::query::fmt_default(&inner_1),
                );
            }
        }
        if let Some(inner_3) = &self.checksum_aggregation_method {
            let formatted_4 = ::smithy_http::query::fmt_string(&inner_3.as_str());
            if !formatted_4.is_empty() {
                builder = builder.header(
                    "x-amz-Checksum-Aggregation-Method",
                    ::smithy_http::query::fmt_string(&inner_3.as_str()),
                );
            }
        }
        if let Some(inner_5) = &self.checksum_algorithm {
            let formatted_6 = ::smithy_http::query::fmt_string(&inner_5.as_str());
            if !formatted_6.is_empty() {
                builder = builder.header(
                    "x-amz-Checksum-Algorithm",
                    ::smithy_http::query::fmt_string(&inner_5.as_str()),
                );
            }
        }
        if let Some(inner_7) = &self.checksum {
            let formatted_8 = ::smithy_http::query::fmt_string(&inner_7);
            if !formatted_8.is_empty() {
                builder =
                    builder.header("x-amz-Checksum", ::smithy_http::query::fmt_string(&inner_7));
            }
        }
        builder
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        let builder = self.add_headers(builder);
        builder.method("POST").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CompleteSnapshotInput`](crate::input::CompleteSnapshotInput)
    pub fn builder() -> crate::input::complete_snapshot_input::Builder {
        crate::input::complete_snapshot_input::Builder::default()
    }
}

/// See [`GetSnapshotBlockInput`](crate::input::GetSnapshotBlockInput)
pub mod get_snapshot_block_input {

    use crate::input::GetSnapshotBlockInput;
    use crate::operation::GetSnapshotBlock;
    /// A builder for [`GetSnapshotBlockInput`](crate::input::GetSnapshotBlockInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        snapshot_id: ::std::option::Option<::std::string::String>,
        block_token: ::std::option::Option<::std::string::String>,
        block_index: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The ID of the snapshot containing the block from which to get data.</p>
        pub fn snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        /// <p>The block token of the block from which to get data.</p>
        /// <p>Obtain the <code>BlockToken</code> by running the <code>ListChangedBlocks</code> or
        /// <code>ListSnapshotBlocks</code> operations.</p>
        pub fn block_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.block_token = Some(inp.into());
            self
        }
        /// <p>The block index of the block from which to get data.</p>
        /// <p>Obtain the <code>BlockIndex</code> by running the <code>ListChangedBlocks</code> or
        /// <code>ListSnapshotBlocks</code> operations.</p>
        pub fn block_index(mut self, inp: i32) -> Self {
            self.block_index = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetSnapshotBlock`](crate::operation::GetSnapshotBlock)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetSnapshotBlock, ()> {
            let op = GetSnapshotBlock::new(GetSnapshotBlockInput {
                snapshot_id: self.snapshot_id.unwrap_or_default(),
                block_token: self.block_token,
                block_index: self.block_index.unwrap_or_default(),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl GetSnapshotBlockInput {
    fn uri_base(&self, output: &mut String) {
        write!(
            output,
            "/snapshots/{SnapshotId}/blocks/{BlockIndex}",
            SnapshotId = ::smithy_http::label::fmt_string(&self.snapshot_id, false),
            BlockIndex = ::smithy_http::label::fmt_default(&self.block_index)
        )
        .expect("formatting should succeed")
    }
    fn uri_query(&self, output: &mut String) {
        let mut params = Vec::new();
        if let Some(inner_9) = &self.block_token {
            params.push(("blockToken", ::smithy_http::query::fmt_string(&inner_9)));
        }
        ::smithy_http::query::write(params, output)
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        self.uri_query(&mut uri);
        builder.method("GET").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetSnapshotBlockInput`](crate::input::GetSnapshotBlockInput)
    pub fn builder() -> crate::input::get_snapshot_block_input::Builder {
        crate::input::get_snapshot_block_input::Builder::default()
    }
}

/// See [`ListChangedBlocksInput`](crate::input::ListChangedBlocksInput)
pub mod list_changed_blocks_input {

    use crate::input::ListChangedBlocksInput;
    use crate::operation::ListChangedBlocks;
    /// A builder for [`ListChangedBlocksInput`](crate::input::ListChangedBlocksInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        second_snapshot_id: ::std::option::Option<::std::string::String>,
        first_snapshot_id: ::std::option::Option<::std::string::String>,
        next_token: ::std::option::Option<::std::string::String>,
        max_results: ::std::option::Option<i32>,
        starting_block_index: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The ID of the second snapshot to use for the comparison.</p>
        /// <important>
        /// <p>The <code>SecondSnapshotId</code> parameter must be specified with a
        /// <code>FirstSnapshotID</code> parameter; otherwise, an error occurs.</p>
        /// </important>
        pub fn second_snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.second_snapshot_id = Some(inp.into());
            self
        }
        /// <p>The ID of the first snapshot to use for the comparison.</p>
        /// <important>
        /// <p>The <code>FirstSnapshotID</code> parameter must be specified with a
        /// <code>SecondSnapshotId</code> parameter; otherwise, an error occurs.</p>
        /// </important>
        pub fn first_snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.first_snapshot_id = Some(inp.into());
            self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// <p>The number of results to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.max_results = Some(inp);
            self
        }
        /// <p>The block index from which the comparison should start.</p>
        /// <p>The list in the response will start from this block index or the next valid block
        /// index in the snapshots.</p>
        pub fn starting_block_index(mut self, inp: i32) -> Self {
            self.starting_block_index = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListChangedBlocks`](crate::operation::ListChangedBlocks)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListChangedBlocks, ()> {
            let op = ListChangedBlocks::new(ListChangedBlocksInput {
                second_snapshot_id: self.second_snapshot_id.unwrap_or_default(),
                first_snapshot_id: self.first_snapshot_id,
                next_token: self.next_token,
                max_results: self.max_results,
                starting_block_index: self.starting_block_index,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListChangedBlocksInput {
    fn uri_base(&self, output: &mut String) {
        write!(
            output,
            "/snapshots/{SecondSnapshotId}/changedblocks",
            SecondSnapshotId = ::smithy_http::label::fmt_string(&self.second_snapshot_id, false)
        )
        .expect("formatting should succeed")
    }
    fn uri_query(&self, output: &mut String) {
        let mut params = Vec::new();
        if let Some(inner_10) = &self.first_snapshot_id {
            params.push((
                "firstSnapshotId",
                ::smithy_http::query::fmt_string(&inner_10),
            ));
        }
        if let Some(inner_11) = &self.next_token {
            params.push(("pageToken", ::smithy_http::query::fmt_string(&inner_11)));
        }
        if let Some(inner_12) = &self.max_results {
            params.push(("maxResults", ::smithy_http::query::fmt_default(&inner_12)));
        }
        if let Some(inner_13) = &self.starting_block_index {
            params.push((
                "startingBlockIndex",
                ::smithy_http::query::fmt_default(&inner_13),
            ));
        }
        ::smithy_http::query::write(params, output)
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        self.uri_query(&mut uri);
        builder.method("GET").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListChangedBlocksInput`](crate::input::ListChangedBlocksInput)
    pub fn builder() -> crate::input::list_changed_blocks_input::Builder {
        crate::input::list_changed_blocks_input::Builder::default()
    }
}

/// See [`ListSnapshotBlocksInput`](crate::input::ListSnapshotBlocksInput)
pub mod list_snapshot_blocks_input {

    use crate::input::ListSnapshotBlocksInput;
    use crate::operation::ListSnapshotBlocks;
    /// A builder for [`ListSnapshotBlocksInput`](crate::input::ListSnapshotBlocksInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        max_results: ::std::option::Option<i32>,
        starting_block_index: ::std::option::Option<i32>,
        next_token: ::std::option::Option<::std::string::String>,
        snapshot_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The number of results to return.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.max_results = Some(inp);
            self
        }
        /// <p>The block index from which the list should start. The list in the response will start
        /// from this block index or the next valid block index in the snapshot.</p>
        pub fn starting_block_index(mut self, inp: i32) -> Self {
            self.starting_block_index = Some(inp);
            self
        }
        /// <p>The token to request the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// <p>The ID of the snapshot from which to get block indexes and block tokens.</p>
        pub fn snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListSnapshotBlocks`](crate::operation::ListSnapshotBlocks)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListSnapshotBlocks, ()> {
            let op = ListSnapshotBlocks::new(ListSnapshotBlocksInput {
                max_results: self.max_results,
                starting_block_index: self.starting_block_index,
                next_token: self.next_token,
                snapshot_id: self.snapshot_id.unwrap_or_default(),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl ListSnapshotBlocksInput {
    fn uri_base(&self, output: &mut String) {
        write!(
            output,
            "/snapshots/{SnapshotId}/blocks",
            SnapshotId = ::smithy_http::label::fmt_string(&self.snapshot_id, false)
        )
        .expect("formatting should succeed")
    }
    fn uri_query(&self, output: &mut String) {
        let mut params = Vec::new();
        if let Some(inner_14) = &self.max_results {
            params.push(("maxResults", ::smithy_http::query::fmt_default(&inner_14)));
        }
        if let Some(inner_15) = &self.starting_block_index {
            params.push((
                "startingBlockIndex",
                ::smithy_http::query::fmt_default(&inner_15),
            ));
        }
        if let Some(inner_16) = &self.next_token {
            params.push(("pageToken", ::smithy_http::query::fmt_string(&inner_16)));
        }
        ::smithy_http::query::write(params, output)
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        self.uri_query(&mut uri);
        builder.method("GET").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListSnapshotBlocksInput`](crate::input::ListSnapshotBlocksInput)
    pub fn builder() -> crate::input::list_snapshot_blocks_input::Builder {
        crate::input::list_snapshot_blocks_input::Builder::default()
    }
}

/// See [`PutSnapshotBlockInput`](crate::input::PutSnapshotBlockInput)
pub mod put_snapshot_block_input {

    use crate::input::PutSnapshotBlockInput;
    use crate::model::ChecksumAlgorithm;
    use crate::operation::PutSnapshotBlock;
    use smithy_types::Blob;
    /// A builder for [`PutSnapshotBlockInput`](crate::input::PutSnapshotBlockInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        snapshot_id: ::std::option::Option<::std::string::String>,
        block_index: ::std::option::Option<i32>,
        checksum: ::std::option::Option<::std::string::String>,
        progress: ::std::option::Option<i32>,
        block_data: ::std::option::Option<Blob>,
        data_length: ::std::option::Option<i32>,
        checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
    }
    impl Builder {
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        /// <p>The block index of the block in which to write the data. A block index is a logical
        /// index in units of <code>512</code> KiB blocks. To identify the block index, divide
        /// the logical offset of the data in the logical volume by the block size (logical offset of
        /// data/<code>524288</code>). The logical offset of the data must be <code>512</code>
        /// KiB aligned.</p>
        pub fn block_index(mut self, inp: i32) -> Self {
            self.block_index = Some(inp);
            self
        }
        /// <p>A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are
        /// supported.</p>
        pub fn checksum(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.checksum = Some(inp.into());
            self
        }
        /// <p>The progress of the write process, as a percentage.</p>
        pub fn progress(mut self, inp: i32) -> Self {
            self.progress = Some(inp);
            self
        }
        /// <p>The data to write to the block.</p>
        /// <p>The block data is not signed as part of the Signature Version 4 signing process. As a
        /// result, you must generate and provide a Base64-encoded SHA256 checksum for the block
        /// data using the <b>x-amz-Checksum</b> header. Also, you
        /// must specify the checksum algorithm using the <b>x-amz-Checksum-Algorithm</b>
        /// header. The checksum that you provide is part of the Signature Version 4 signing process.
        /// It is validated against a checksum generated by Amazon EBS to ensure the validity and authenticity
        /// of the data. If the checksums do not correspond, the request fails. For more information,
        /// see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-checksums">
        /// Using checksums with the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud User
        /// Guide</i>.</p>
        pub fn block_data(mut self, inp: Blob) -> Self {
            self.block_data = Some(inp);
            self
        }
        /// <p>The size of the data to write to the block, in bytes. Currently, the only supported
        /// size is <code>524288</code>.</p>
        /// <p>Valid values: <code>524288</code>
        /// </p>
        pub fn data_length(mut self, inp: i32) -> Self {
            self.data_length = Some(inp);
            self
        }
        /// <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
        /// is <code>SHA256</code>.</p>
        pub fn checksum_algorithm(mut self, inp: ChecksumAlgorithm) -> Self {
            self.checksum_algorithm = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`PutSnapshotBlock`](crate::operation::PutSnapshotBlock)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<PutSnapshotBlock, ()> {
            let op = PutSnapshotBlock::new(PutSnapshotBlockInput {
                snapshot_id: self.snapshot_id.unwrap_or_default(),
                block_index: self.block_index.unwrap_or_default(),
                checksum: self.checksum,
                progress: self.progress,
                block_data: self.block_data,
                data_length: self.data_length,
                checksum_algorithm: self.checksum_algorithm,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl PutSnapshotBlockInput {
    fn uri_base(&self, output: &mut String) {
        write!(
            output,
            "/snapshots/{SnapshotId}/blocks/{BlockIndex}",
            SnapshotId = ::smithy_http::label::fmt_string(&self.snapshot_id, false),
            BlockIndex = ::smithy_http::label::fmt_default(&self.block_index)
        )
        .expect("formatting should succeed")
    }
    fn add_headers(&self, mut builder: ::http::request::Builder) -> ::http::request::Builder {
        if let Some(inner_17) = &self.checksum {
            let formatted_18 = ::smithy_http::query::fmt_string(&inner_17);
            if !formatted_18.is_empty() {
                builder = builder.header(
                    "x-amz-Checksum",
                    ::smithy_http::query::fmt_string(&inner_17),
                );
            }
        }
        if let Some(inner_19) = &self.progress {
            let formatted_20 = ::smithy_http::query::fmt_default(&inner_19);
            if !formatted_20.is_empty() {
                builder = builder.header(
                    "x-amz-Progress",
                    ::smithy_http::query::fmt_default(&inner_19),
                );
            }
        }
        if let Some(inner_21) = &self.data_length {
            let formatted_22 = ::smithy_http::query::fmt_default(&inner_21);
            if !formatted_22.is_empty() {
                builder = builder.header(
                    "x-amz-Data-Length",
                    ::smithy_http::query::fmt_default(&inner_21),
                );
            }
        }
        if let Some(inner_23) = &self.checksum_algorithm {
            let formatted_24 = ::smithy_http::query::fmt_string(&inner_23.as_str());
            if !formatted_24.is_empty() {
                builder = builder.header(
                    "x-amz-Checksum-Algorithm",
                    ::smithy_http::query::fmt_string(&inner_23.as_str()),
                );
            }
        }
        builder
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        let builder = self.add_headers(builder);
        builder.method("PUT").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/octet-stream");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`PutSnapshotBlockInput`](crate::input::PutSnapshotBlockInput)
    pub fn builder() -> crate::input::put_snapshot_block_input::Builder {
        crate::input::put_snapshot_block_input::Builder::default()
    }
}

/// See [`StartSnapshotInput`](crate::input::StartSnapshotInput)
pub mod start_snapshot_input {

    use crate::input::StartSnapshotInput;
    use crate::model::Tag;
    use crate::operation::StartSnapshot;
    /// A builder for [`StartSnapshotInput`](crate::input::StartSnapshotInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        timeout: ::std::option::Option<i32>,
        client_token: ::std::option::Option<::std::string::String>,
        volume_size: ::std::option::Option<i64>,
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
        encrypted: ::std::option::Option<bool>,
        kms_key_arn: ::std::option::Option<::std::string::String>,
        parent_snapshot_id: ::std::option::Option<::std::string::String>,
        description: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The amount of time (in minutes) after which the snapshot is automatically cancelled
        /// if:</p>
        /// <ul>
        /// <li>
        /// <p>No blocks are written to the snapshot.</p>
        /// </li>
        /// <li>
        /// <p>The snapshot is not completed after writing the last block of data.</p>
        /// </li>
        /// </ul>
        /// <p>If no value is specified, the timeout defaults to <code>60</code> minutes.</p>
        pub fn timeout(mut self, inp: i32) -> Self {
            self.timeout = Some(inp);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Idempotency ensures that an API request completes only once. With an idempotent
        /// request, if the original request completes successfully. The subsequent retries with the same
        /// client token return the result from the original successful request and they have no additional
        /// effect.</p>
        /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-direct-api-idempotency.html">
        /// Idempotency for StartSnapshot API</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn client_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        /// <p>The size of the volume, in GiB. The maximum size is <code>16384</code> GiB (16
        /// TiB).</p>
        pub fn volume_size(mut self, inp: i64) -> Self {
            self.volume_size = Some(inp);
            self
        }
        /// <p>The tags to apply to the snapshot.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// <p>Indicates whether to encrypt the snapshot. To create an encrypted snapshot, specify
        /// <code>true</code>. To create an unencrypted snapshot, omit this parameter.</p>
        /// <p>If you specify a value for <b>ParentSnapshotId</b>, omit
        /// this parameter.</p>
        /// <p>If you specify <code>true</code>, the snapshot is encrypted using the CMK specified
        /// using the <b>KmsKeyArn</b> parameter. If no value is specified
        /// for <b>KmsKeyArn</b>, the default CMK for your account is
        /// used. If no default CMK has been specified for your account, the AWS managed CMK is used.
        /// To set a default CMK for your account, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyEbsDefaultKmsKeyId.html">
        /// ModifyEbsDefaultKmsKeyId</a>.</p>
        /// <p>If your account is enabled for encryption by default, you cannot set this parameter to
        /// <code>false</code>. In this case, you can omit this parameter.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-encryption">
        /// Using encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.encrypted = Some(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS)
        /// customer master key (CMK) to be used to encrypt the snapshot. If you do not specify a
        /// CMK, the default AWS managed CMK is used.</p>
        /// <p>If you specify a <b>ParentSnapshotId</b>, omit this
        /// parameter; the snapshot will be encrypted using the same CMK that was used to encrypt
        /// the parent snapshot.</p>
        /// <p>If <b>Encrypted</b> is set to <code>true</code>,
        /// you must specify a CMK ARN. </p>
        pub fn kms_key_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.kms_key_arn = Some(inp.into());
            self
        }
        /// <p>The ID of the parent snapshot. If there is no parent snapshot, or if you are creating
        /// the first snapshot for an on-premises volume, omit this parameter.</p>
        /// <p>If your account is enabled for encryption by default, you cannot use an unencrypted
        /// snapshot as a parent snapshot. You must first create an encrypted copy of the parent
        /// snapshot using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CopySnapshot.html">CopySnapshot</a>.</p>
        pub fn parent_snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.parent_snapshot_id = Some(inp.into());
            self
        }
        /// <p>A description for the snapshot.</p>
        pub fn description(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`StartSnapshot`](crate::operation::StartSnapshot)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<StartSnapshot, ()> {
            let op = StartSnapshot::new(StartSnapshotInput {
                timeout: self.timeout,
                client_token: self
                    .client_token
                    .or_else(|| Some(_config.token_provider.token())),
                volume_size: self.volume_size,
                tags: self.tags,
                encrypted: self.encrypted,
                kms_key_arn: self.kms_key_arn,
                parent_snapshot_id: self.parent_snapshot_id,
                description: self.description,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            ::smithy_http::operation::Operation::new(request, op)
        }
    }
}
impl StartSnapshotInput {
    fn uri_base(&self, output: &mut String) {
        write!(output, "/snapshots").expect("formatting should succeed")
    }
    fn update_http_builder(&self, builder: ::http::request::Builder) -> ::http::request::Builder {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        builder.method("POST").uri(uri)
    }
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        "body not generated yet".into()
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`StartSnapshotInput`](crate::input::StartSnapshotInput)
    pub fn builder() -> crate::input::start_snapshot_input::Builder {
        crate::input::start_snapshot_input::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSnapshotInput {
    /// <p>The amount of time (in minutes) after which the snapshot is automatically cancelled
    /// if:</p>
    /// <ul>
    /// <li>
    /// <p>No blocks are written to the snapshot.</p>
    /// </li>
    /// <li>
    /// <p>The snapshot is not completed after writing the last block of data.</p>
    /// </li>
    /// </ul>
    /// <p>If no value is specified, the timeout defaults to <code>60</code> minutes.</p>
    pub timeout: ::std::option::Option<i32>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request. Idempotency ensures that an API request completes only once. With an idempotent
    /// request, if the original request completes successfully. The subsequent retries with the same
    /// client token return the result from the original successful request and they have no additional
    /// effect.</p>
    /// <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-direct-api-idempotency.html">
    /// Idempotency for StartSnapshot API</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The size of the volume, in GiB. The maximum size is <code>16384</code> GiB (16
    /// TiB).</p>
    pub volume_size: ::std::option::Option<i64>,
    /// <p>The tags to apply to the snapshot.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    /// <p>Indicates whether to encrypt the snapshot. To create an encrypted snapshot, specify
    /// <code>true</code>. To create an unencrypted snapshot, omit this parameter.</p>
    /// <p>If you specify a value for <b>ParentSnapshotId</b>, omit
    /// this parameter.</p>
    /// <p>If you specify <code>true</code>, the snapshot is encrypted using the CMK specified
    /// using the <b>KmsKeyArn</b> parameter. If no value is specified
    /// for <b>KmsKeyArn</b>, the default CMK for your account is
    /// used. If no default CMK has been specified for your account, the AWS managed CMK is used.
    /// To set a default CMK for your account, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyEbsDefaultKmsKeyId.html">
    /// ModifyEbsDefaultKmsKeyId</a>.</p>
    /// <p>If your account is enabled for encryption by default, you cannot set this parameter to
    /// <code>false</code>. In this case, you can omit this parameter.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-encryption">
    /// Using encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub encrypted: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS)
    /// customer master key (CMK) to be used to encrypt the snapshot. If you do not specify a
    /// CMK, the default AWS managed CMK is used.</p>
    /// <p>If you specify a <b>ParentSnapshotId</b>, omit this
    /// parameter; the snapshot will be encrypted using the same CMK that was used to encrypt
    /// the parent snapshot.</p>
    /// <p>If <b>Encrypted</b> is set to <code>true</code>,
    /// you must specify a CMK ARN. </p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the parent snapshot. If there is no parent snapshot, or if you are creating
    /// the first snapshot for an on-premises volume, omit this parameter.</p>
    /// <p>If your account is enabled for encryption by default, you cannot use an unencrypted
    /// snapshot as a parent snapshot. You must first create an encrypted copy of the parent
    /// snapshot using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CopySnapshot.html">CopySnapshot</a>.</p>
    pub parent_snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>A description for the snapshot.</p>
    pub description: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSnapshotBlockInput {
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::string::String,
    /// <p>The block index of the block in which to write the data. A block index is a logical
    /// index in units of <code>512</code> KiB blocks. To identify the block index, divide
    /// the logical offset of the data in the logical volume by the block size (logical offset of
    /// data/<code>524288</code>). The logical offset of the data must be <code>512</code>
    /// KiB aligned.</p>
    pub block_index: i32,
    /// <p>A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are
    /// supported.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
    /// <p>The progress of the write process, as a percentage.</p>
    pub progress: ::std::option::Option<i32>,
    /// <p>The data to write to the block.</p>
    /// <p>The block data is not signed as part of the Signature Version 4 signing process. As a
    /// result, you must generate and provide a Base64-encoded SHA256 checksum for the block
    /// data using the <b>x-amz-Checksum</b> header. Also, you
    /// must specify the checksum algorithm using the <b>x-amz-Checksum-Algorithm</b>
    /// header. The checksum that you provide is part of the Signature Version 4 signing process.
    /// It is validated against a checksum generated by Amazon EBS to ensure the validity and authenticity
    /// of the data. If the checksums do not correspond, the request fails. For more information,
    /// see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-checksums">
    /// Using checksums with the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud User
    /// Guide</i>.</p>
    pub block_data: ::std::option::Option<Blob>,
    /// <p>The size of the data to write to the block, in bytes. Currently, the only supported
    /// size is <code>524288</code>.</p>
    /// <p>Valid values: <code>524288</code>
    /// </p>
    pub data_length: ::std::option::Option<i32>,
    /// <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
    /// is <code>SHA256</code>.</p>
    pub checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSnapshotBlocksInput {
    /// <p>The number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The block index from which the list should start. The list in the response will start
    /// from this block index or the next valid block index in the snapshot.</p>
    pub starting_block_index: ::std::option::Option<i32>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the snapshot from which to get block indexes and block tokens.</p>
    pub snapshot_id: ::std::string::String,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListChangedBlocksInput {
    /// <p>The ID of the second snapshot to use for the comparison.</p>
    /// <important>
    /// <p>The <code>SecondSnapshotId</code> parameter must be specified with a
    /// <code>FirstSnapshotID</code> parameter; otherwise, an error occurs.</p>
    /// </important>
    pub second_snapshot_id: ::std::string::String,
    /// <p>The ID of the first snapshot to use for the comparison.</p>
    /// <important>
    /// <p>The <code>FirstSnapshotID</code> parameter must be specified with a
    /// <code>SecondSnapshotId</code> parameter; otherwise, an error occurs.</p>
    /// </important>
    pub first_snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The block index from which the comparison should start.</p>
    /// <p>The list in the response will start from this block index or the next valid block
    /// index in the snapshots.</p>
    pub starting_block_index: ::std::option::Option<i32>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSnapshotBlockInput {
    /// <p>The ID of the snapshot containing the block from which to get data.</p>
    pub snapshot_id: ::std::string::String,
    /// <p>The block token of the block from which to get data.</p>
    /// <p>Obtain the <code>BlockToken</code> by running the <code>ListChangedBlocks</code> or
    /// <code>ListSnapshotBlocks</code> operations.</p>
    pub block_token: ::std::option::Option<::std::string::String>,
    /// <p>The block index of the block from which to get data.</p>
    /// <p>Obtain the <code>BlockIndex</code> by running the <code>ListChangedBlocks</code> or
    /// <code>ListSnapshotBlocks</code> operations.</p>
    pub block_index: i32,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompleteSnapshotInput {
    /// <p>The number of blocks that were written to the snapshot.</p>
    pub changed_blocks_count: ::std::option::Option<i32>,
    /// <p>The aggregation method used to generate the checksum. Currently, the only supported
    /// aggregation method is <code>LINEAR</code>.</p>
    pub checksum_aggregation_method: ::std::option::Option<ChecksumAggregationMethod>,
    /// <p>The algorithm used to generate the checksum. Currently, the only supported algorithm
    /// is <code>SHA256</code>.</p>
    pub checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::string::String,
    /// <p>An aggregated Base-64 SHA256 checksum based on the checksums of each written
    /// block.</p>
    /// <p>To generate the aggregated checksum using the linear aggregation method, arrange the
    /// checksums for each written block in ascending order of their block index, concatenate
    /// them to form a single string, and then generate the checksum on the entire string using
    /// the SHA256 algorithm.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
}
