// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::Block;
use crate::model::ChangedBlock;
use crate::model::ChecksumAlgorithm;
use crate::model::Status;
use crate::model::Tag;
use smithy_stream::ByteStream;
use smithy_types::Instant;
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSnapshotOutput {
    /// <p>The tags applied to the snapshot. You can specify up to 50 tags per snapshot. For more
    /// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html"> Tagging your Amazon EC2
    /// resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer
    /// master key (CMK) used to encrypt the snapshot.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID of the snapshot owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    pub volume_size: ::std::option::Option<i64>,
    /// <p>The ID of the parent snapshot.</p>
    pub parent_snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the snapshot.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub block_size: ::std::option::Option<i32>,
    /// <p>The timestamp when the snapshot was created.</p>
    pub start_time: ::std::option::Option<Instant>,
    /// <p>The status of the snapshot.</p>
    pub status: ::std::option::Option<Status>,
}
/// See [`StartSnapshotOutput`](crate::output::StartSnapshotOutput)
pub mod start_snapshot_output {

    use crate::model::Status;
    use crate::model::Tag;
    use crate::output::StartSnapshotOutput;
    use smithy_types::Instant;
    /// A builder for [`StartSnapshotOutput`](crate::output::StartSnapshotOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
        kms_key_arn: ::std::option::Option<::std::string::String>,
        owner_id: ::std::option::Option<::std::string::String>,
        volume_size: ::std::option::Option<i64>,
        parent_snapshot_id: ::std::option::Option<::std::string::String>,
        description: ::std::option::Option<::std::string::String>,
        snapshot_id: ::std::option::Option<::std::string::String>,
        block_size: ::std::option::Option<i32>,
        start_time: ::std::option::Option<Instant>,
        status: ::std::option::Option<Status>,
    }
    impl Builder {
        /// <p>The tags applied to the snapshot. You can specify up to 50 tags per snapshot. For more
        /// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html"> Tagging your Amazon EC2
        /// resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer
        /// master key (CMK) used to encrypt the snapshot.</p>
        pub fn kms_key_arn(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.kms_key_arn = Some(inp.into());
            self
        }
        /// <p>The AWS account ID of the snapshot owner.</p>
        pub fn owner_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.owner_id = Some(inp.into());
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn volume_size(mut self, inp: i64) -> Self {
            self.volume_size = Some(inp);
            self
        }
        /// <p>The ID of the parent snapshot.</p>
        pub fn parent_snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.parent_snapshot_id = Some(inp.into());
            self
        }
        /// <p>The description of the snapshot.</p>
        pub fn description(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        /// <p>The size of the blocks in the snapshot, in bytes.</p>
        pub fn block_size(mut self, inp: i32) -> Self {
            self.block_size = Some(inp);
            self
        }
        /// <p>The timestamp when the snapshot was created.</p>
        pub fn start_time(mut self, inp: Instant) -> Self {
            self.start_time = Some(inp);
            self
        }
        /// <p>The status of the snapshot.</p>
        pub fn status(mut self, inp: Status) -> Self {
            self.status = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`StartSnapshotOutput`](crate::output::StartSnapshotOutput)
        pub fn build(self) -> StartSnapshotOutput {
            StartSnapshotOutput {
                tags: self.tags,
                kms_key_arn: self.kms_key_arn,
                owner_id: self.owner_id,
                volume_size: self.volume_size,
                parent_snapshot_id: self.parent_snapshot_id,
                description: self.description,
                snapshot_id: self.snapshot_id,
                block_size: self.block_size,
                start_time: self.start_time,
                status: self.status,
            }
        }
    }
}
impl StartSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`StartSnapshotOutput`](crate::output::StartSnapshotOutput)
    pub fn builder() -> crate::output::start_snapshot_output::Builder {
        crate::output::start_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSnapshotBlockOutput {
    /// <p>The algorithm used by Amazon EBS to generate the checksum.</p>
    pub checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
    /// <p>The SHA256 checksum generated for the block data by Amazon EBS.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
}
/// See [`PutSnapshotBlockOutput`](crate::output::PutSnapshotBlockOutput)
pub mod put_snapshot_block_output {

    use crate::model::ChecksumAlgorithm;
    use crate::output::PutSnapshotBlockOutput;
    /// A builder for [`PutSnapshotBlockOutput`](crate::output::PutSnapshotBlockOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
        checksum: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The algorithm used by Amazon EBS to generate the checksum.</p>
        pub fn checksum_algorithm(mut self, inp: ChecksumAlgorithm) -> Self {
            self.checksum_algorithm = Some(inp);
            self
        }
        /// <p>The SHA256 checksum generated for the block data by Amazon EBS.</p>
        pub fn checksum(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.checksum = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`PutSnapshotBlockOutput`](crate::output::PutSnapshotBlockOutput)
        pub fn build(self) -> PutSnapshotBlockOutput {
            PutSnapshotBlockOutput {
                checksum_algorithm: self.checksum_algorithm,
                checksum: self.checksum,
            }
        }
    }
}
impl PutSnapshotBlockOutput {
    /// Creates a new builder-style object to manufacture [`PutSnapshotBlockOutput`](crate::output::PutSnapshotBlockOutput)
    pub fn builder() -> crate::output::put_snapshot_block_output::Builder {
        crate::output::put_snapshot_block_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSnapshotBlocksOutput {
    /// <p>The size of the volume in GB.</p>
    pub volume_size: ::std::option::Option<i64>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there
    /// are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub expiry_time: ::std::option::Option<Instant>,
    /// <p>An array of objects containing information about the blocks.</p>
    pub blocks: ::std::option::Option<::std::vec::Vec<Block>>,
    /// <p>The size of the block.</p>
    pub block_size: ::std::option::Option<i32>,
}
/// See [`ListSnapshotBlocksOutput`](crate::output::ListSnapshotBlocksOutput)
pub mod list_snapshot_blocks_output {

    use crate::model::Block;
    use crate::output::ListSnapshotBlocksOutput;
    use smithy_types::Instant;
    /// A builder for [`ListSnapshotBlocksOutput`](crate::output::ListSnapshotBlocksOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        volume_size: ::std::option::Option<i64>,
        next_token: ::std::option::Option<::std::string::String>,
        expiry_time: ::std::option::Option<Instant>,
        blocks: ::std::option::Option<::std::vec::Vec<Block>>,
        block_size: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The size of the volume in GB.</p>
        pub fn volume_size(mut self, inp: i64) -> Self {
            self.volume_size = Some(inp);
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// <p>The time when the <code>BlockToken</code> expires.</p>
        pub fn expiry_time(mut self, inp: Instant) -> Self {
            self.expiry_time = Some(inp);
            self
        }
        /// <p>An array of objects containing information about the blocks.</p>
        pub fn blocks(mut self, inp: ::std::vec::Vec<Block>) -> Self {
            self.blocks = Some(inp);
            self
        }
        /// <p>The size of the block.</p>
        pub fn block_size(mut self, inp: i32) -> Self {
            self.block_size = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ListSnapshotBlocksOutput`](crate::output::ListSnapshotBlocksOutput)
        pub fn build(self) -> ListSnapshotBlocksOutput {
            ListSnapshotBlocksOutput {
                volume_size: self.volume_size,
                next_token: self.next_token,
                expiry_time: self.expiry_time,
                blocks: self.blocks,
                block_size: self.block_size,
            }
        }
    }
}
impl ListSnapshotBlocksOutput {
    /// Creates a new builder-style object to manufacture [`ListSnapshotBlocksOutput`](crate::output::ListSnapshotBlocksOutput)
    pub fn builder() -> crate::output::list_snapshot_blocks_output::Builder {
        crate::output::list_snapshot_blocks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListChangedBlocksOutput {
    /// <p>The size of the block.</p>
    pub block_size: ::std::option::Option<i32>,
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub expiry_time: ::std::option::Option<Instant>,
    /// <p>The size of the volume in GB.</p>
    pub volume_size: ::std::option::Option<i64>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there
    /// are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of objects containing information about the changed blocks.</p>
    pub changed_blocks: ::std::option::Option<::std::vec::Vec<ChangedBlock>>,
}
/// See [`ListChangedBlocksOutput`](crate::output::ListChangedBlocksOutput)
pub mod list_changed_blocks_output {

    use crate::model::ChangedBlock;
    use crate::output::ListChangedBlocksOutput;
    use smithy_types::Instant;
    /// A builder for [`ListChangedBlocksOutput`](crate::output::ListChangedBlocksOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        block_size: ::std::option::Option<i32>,
        expiry_time: ::std::option::Option<Instant>,
        volume_size: ::std::option::Option<i64>,
        next_token: ::std::option::Option<::std::string::String>,
        changed_blocks: ::std::option::Option<::std::vec::Vec<ChangedBlock>>,
    }
    impl Builder {
        /// <p>The size of the block.</p>
        pub fn block_size(mut self, inp: i32) -> Self {
            self.block_size = Some(inp);
            self
        }
        /// <p>The time when the <code>BlockToken</code> expires.</p>
        pub fn expiry_time(mut self, inp: Instant) -> Self {
            self.expiry_time = Some(inp);
            self
        }
        /// <p>The size of the volume in GB.</p>
        pub fn volume_size(mut self, inp: i64) -> Self {
            self.volume_size = Some(inp);
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        /// <p>An array of objects containing information about the changed blocks.</p>
        pub fn changed_blocks(mut self, inp: ::std::vec::Vec<ChangedBlock>) -> Self {
            self.changed_blocks = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ListChangedBlocksOutput`](crate::output::ListChangedBlocksOutput)
        pub fn build(self) -> ListChangedBlocksOutput {
            ListChangedBlocksOutput {
                block_size: self.block_size,
                expiry_time: self.expiry_time,
                volume_size: self.volume_size,
                next_token: self.next_token,
                changed_blocks: self.changed_blocks,
            }
        }
    }
}
impl ListChangedBlocksOutput {
    /// Creates a new builder-style object to manufacture [`ListChangedBlocksOutput`](crate::output::ListChangedBlocksOutput)
    pub fn builder() -> crate::output::list_changed_blocks_output::Builder {
        crate::output::list_changed_blocks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSnapshotBlockOutput<B> {
    /// <p>The size of the data in the block.</p>
    pub data_length: ::std::option::Option<i32>,
    /// <p>The algorithm used to generate the checksum for the block, such as SHA256.</p>
    pub checksum_algorithm: ::std::option::Option<ChecksumAlgorithm>,
    /// <p>The checksum generated for the block, which is Base64 encoded.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
    /// <p>The data content of the block.</p>
    pub block_data: ByteStream<B>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompleteSnapshotOutput {
    /// <p>The status of the snapshot.</p>
    pub status: ::std::option::Option<Status>,
}
/// See [`CompleteSnapshotOutput`](crate::output::CompleteSnapshotOutput)
pub mod complete_snapshot_output {

    use crate::model::Status;
    use crate::output::CompleteSnapshotOutput;
    /// A builder for [`CompleteSnapshotOutput`](crate::output::CompleteSnapshotOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        status: ::std::option::Option<Status>,
    }
    impl Builder {
        /// <p>The status of the snapshot.</p>
        pub fn status(mut self, inp: Status) -> Self {
            self.status = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`CompleteSnapshotOutput`](crate::output::CompleteSnapshotOutput)
        pub fn build(self) -> CompleteSnapshotOutput {
            CompleteSnapshotOutput {
                status: self.status,
            }
        }
    }
}
impl CompleteSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CompleteSnapshotOutput`](crate::output::CompleteSnapshotOutput)
    pub fn builder() -> crate::output::complete_snapshot_output::Builder {
        crate::output::complete_snapshot_output::Builder::default()
    }
}
