// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::ComplexNestedErrorData;
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum AllQueryStringTypesError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for AllQueryStringTypesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            AllQueryStringTypesError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl AllQueryStringTypesError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        AllQueryStringTypesError::Unhandled(err.into())
    }
}
impl ::std::error::Error for AllQueryStringTypesError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            AllQueryStringTypesError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ConstantAndVariableQueryStringError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for ConstantAndVariableQueryStringError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ConstantAndVariableQueryStringError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ConstantAndVariableQueryStringError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        ConstantAndVariableQueryStringError::Unhandled(err.into())
    }
}
impl ::std::error::Error for ConstantAndVariableQueryStringError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            ConstantAndVariableQueryStringError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ConstantQueryStringError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for ConstantQueryStringError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ConstantQueryStringError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl ConstantQueryStringError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        ConstantQueryStringError::Unhandled(err.into())
    }
}
impl ::std::error::Error for ConstantQueryStringError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            ConstantQueryStringError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum EmptyInputAndEmptyOutputError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for EmptyInputAndEmptyOutputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EmptyInputAndEmptyOutputError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl EmptyInputAndEmptyOutputError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        EmptyInputAndEmptyOutputError::Unhandled(err.into())
    }
}
impl ::std::error::Error for EmptyInputAndEmptyOutputError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            EmptyInputAndEmptyOutputError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GreetingWithErrorsError {
    InvalidGreeting(InvalidGreeting),
    ComplexError(ComplexError),
    FooError(FooError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for GreetingWithErrorsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GreetingWithErrorsError::InvalidGreeting(inner) => inner.fmt(f),
            GreetingWithErrorsError::ComplexError(inner) => inner.fmt(f),
            GreetingWithErrorsError::FooError(inner) => inner.fmt(f),
            GreetingWithErrorsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl GreetingWithErrorsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        GreetingWithErrorsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for GreetingWithErrorsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            GreetingWithErrorsError::InvalidGreeting(inner) => Some(inner),
            GreetingWithErrorsError::ComplexError(inner) => Some(inner),
            GreetingWithErrorsError::FooError(inner) => Some(inner),
            GreetingWithErrorsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpPayloadTraitsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpPayloadTraitsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpPayloadTraitsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpPayloadTraitsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpPayloadTraitsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpPayloadTraitsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpPayloadTraitsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpPayloadTraitsWithMediaTypeError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpPayloadTraitsWithMediaTypeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpPayloadTraitsWithMediaTypeError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpPayloadTraitsWithMediaTypeError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpPayloadTraitsWithMediaTypeError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpPayloadTraitsWithMediaTypeError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpPayloadTraitsWithMediaTypeError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpPayloadWithStructureError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpPayloadWithStructureError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpPayloadWithStructureError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpPayloadWithStructureError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpPayloadWithStructureError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpPayloadWithStructureError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpPayloadWithStructureError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpPrefixHeadersError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpPrefixHeadersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpPrefixHeadersError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpPrefixHeadersError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpPrefixHeadersError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpPrefixHeadersError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpPrefixHeadersError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpPrefixHeadersResponseError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpPrefixHeadersResponseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpPrefixHeadersResponseError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpPrefixHeadersResponseError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpPrefixHeadersResponseError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpPrefixHeadersResponseError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpPrefixHeadersResponseError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpRequestWithGreedyLabelInPathError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpRequestWithGreedyLabelInPathError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpRequestWithGreedyLabelInPathError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpRequestWithGreedyLabelInPathError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpRequestWithGreedyLabelInPathError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpRequestWithGreedyLabelInPathError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpRequestWithGreedyLabelInPathError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpRequestWithLabelsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpRequestWithLabelsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpRequestWithLabelsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpRequestWithLabelsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpRequestWithLabelsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpRequestWithLabelsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpRequestWithLabelsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpRequestWithLabelsAndTimestampFormatError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpRequestWithLabelsAndTimestampFormatError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpRequestWithLabelsAndTimestampFormatError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpRequestWithLabelsAndTimestampFormatError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpRequestWithLabelsAndTimestampFormatError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpRequestWithLabelsAndTimestampFormatError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpRequestWithLabelsAndTimestampFormatError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum HttpResponseCodeError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for HttpResponseCodeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HttpResponseCodeError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl HttpResponseCodeError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        HttpResponseCodeError::Unhandled(err.into())
    }
}
impl ::std::error::Error for HttpResponseCodeError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            HttpResponseCodeError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum IgnoreQueryParamsInResponseError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for IgnoreQueryParamsInResponseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            IgnoreQueryParamsInResponseError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl IgnoreQueryParamsInResponseError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        IgnoreQueryParamsInResponseError::Unhandled(err.into())
    }
}
impl ::std::error::Error for IgnoreQueryParamsInResponseError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            IgnoreQueryParamsInResponseError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum InlineDocumentError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for InlineDocumentError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            InlineDocumentError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl InlineDocumentError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        InlineDocumentError::Unhandled(err.into())
    }
}
impl ::std::error::Error for InlineDocumentError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            InlineDocumentError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum InlineDocumentAsPayloadError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for InlineDocumentAsPayloadError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            InlineDocumentAsPayloadError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl InlineDocumentAsPayloadError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        InlineDocumentAsPayloadError::Unhandled(err.into())
    }
}
impl ::std::error::Error for InlineDocumentAsPayloadError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            InlineDocumentAsPayloadError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum InputAndOutputWithHeadersError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for InputAndOutputWithHeadersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            InputAndOutputWithHeadersError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl InputAndOutputWithHeadersError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        InputAndOutputWithHeadersError::Unhandled(err.into())
    }
}
impl ::std::error::Error for InputAndOutputWithHeadersError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            InputAndOutputWithHeadersError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonBlobsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonBlobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonBlobsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonBlobsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonBlobsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonBlobsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonBlobsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonEnumsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonEnumsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonEnumsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonEnumsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonEnumsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonEnumsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonEnumsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonListsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonListsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonListsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonListsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonListsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonListsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonListsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonMapsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonMapsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonMapsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonMapsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonMapsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonMapsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonMapsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonTimestampsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonTimestampsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonTimestampsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonTimestampsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonTimestampsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonTimestampsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonTimestampsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum JsonUnionsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for JsonUnionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            JsonUnionsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl JsonUnionsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        JsonUnionsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for JsonUnionsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            JsonUnionsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum MediaTypeHeaderError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for MediaTypeHeaderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            MediaTypeHeaderError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl MediaTypeHeaderError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        MediaTypeHeaderError::Unhandled(err.into())
    }
}
impl ::std::error::Error for MediaTypeHeaderError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            MediaTypeHeaderError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum NoInputAndNoOutputError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for NoInputAndNoOutputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NoInputAndNoOutputError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl NoInputAndNoOutputError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        NoInputAndNoOutputError::Unhandled(err.into())
    }
}
impl ::std::error::Error for NoInputAndNoOutputError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            NoInputAndNoOutputError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum NoInputAndOutputError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for NoInputAndOutputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NoInputAndOutputError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl NoInputAndOutputError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        NoInputAndOutputError::Unhandled(err.into())
    }
}
impl ::std::error::Error for NoInputAndOutputError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            NoInputAndOutputError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum NullAndEmptyHeadersClientError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for NullAndEmptyHeadersClientError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NullAndEmptyHeadersClientError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl NullAndEmptyHeadersClientError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        NullAndEmptyHeadersClientError::Unhandled(err.into())
    }
}
impl ::std::error::Error for NullAndEmptyHeadersClientError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            NullAndEmptyHeadersClientError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum NullAndEmptyHeadersServerError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for NullAndEmptyHeadersServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NullAndEmptyHeadersServerError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl NullAndEmptyHeadersServerError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        NullAndEmptyHeadersServerError::Unhandled(err.into())
    }
}
impl ::std::error::Error for NullAndEmptyHeadersServerError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            NullAndEmptyHeadersServerError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum OmitsNullSerializesEmptyStringError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for OmitsNullSerializesEmptyStringError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OmitsNullSerializesEmptyStringError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl OmitsNullSerializesEmptyStringError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        OmitsNullSerializesEmptyStringError::Unhandled(err.into())
    }
}
impl ::std::error::Error for OmitsNullSerializesEmptyStringError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            OmitsNullSerializesEmptyStringError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum QueryIdempotencyTokenAutoFillError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for QueryIdempotencyTokenAutoFillError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            QueryIdempotencyTokenAutoFillError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl QueryIdempotencyTokenAutoFillError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        QueryIdempotencyTokenAutoFillError::Unhandled(err.into())
    }
}
impl ::std::error::Error for QueryIdempotencyTokenAutoFillError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            QueryIdempotencyTokenAutoFillError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum RecursiveShapesError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for RecursiveShapesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RecursiveShapesError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl RecursiveShapesError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        RecursiveShapesError::Unhandled(err.into())
    }
}
impl ::std::error::Error for RecursiveShapesError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            RecursiveShapesError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum SimpleScalarPropertiesError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for SimpleScalarPropertiesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SimpleScalarPropertiesError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl SimpleScalarPropertiesError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        SimpleScalarPropertiesError::Unhandled(err.into())
    }
}
impl ::std::error::Error for SimpleScalarPropertiesError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            SimpleScalarPropertiesError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum StreamingTraitsError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for StreamingTraitsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StreamingTraitsError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl StreamingTraitsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        StreamingTraitsError::Unhandled(err.into())
    }
}
impl ::std::error::Error for StreamingTraitsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            StreamingTraitsError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum StreamingTraitsRequireLengthError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for StreamingTraitsRequireLengthError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StreamingTraitsRequireLengthError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl StreamingTraitsRequireLengthError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        StreamingTraitsRequireLengthError::Unhandled(err.into())
    }
}
impl ::std::error::Error for StreamingTraitsRequireLengthError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            StreamingTraitsRequireLengthError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum StreamingTraitsWithMediaTypeError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for StreamingTraitsWithMediaTypeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StreamingTraitsWithMediaTypeError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl StreamingTraitsWithMediaTypeError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        StreamingTraitsWithMediaTypeError::Unhandled(err.into())
    }
}
impl ::std::error::Error for StreamingTraitsWithMediaTypeError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            StreamingTraitsWithMediaTypeError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum TimestampFormatHeadersError {
    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for TimestampFormatHeadersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TimestampFormatHeadersError::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl TimestampFormatHeadersError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        TimestampFormatHeadersError::Unhandled(err.into())
    }
}
impl ::std::error::Error for TimestampFormatHeadersError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            TimestampFormatHeadersError::Unhandled(inner) => Some(inner.as_ref()),
        }
    }
}

/// This error has test cases that test some of the dark corners of Amazon service
/// framework history. It should only be implemented by clients.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FooError {}
impl FooError {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "FooError"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for FooError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "FooError")?;
        Ok(())
    }
}
impl ::std::error::Error for FooError {}
/// See [`FooError`](crate::error::FooError)
pub mod foo_error {

    use crate::error::FooError;
    /// A builder for [`FooError`](crate::error::FooError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`FooError`](crate::error::FooError)
        pub fn build(self) -> FooError {
            FooError {}
        }
    }
}
impl FooError {
    /// Creates a new builder-style object to manufacture [`FooError`](crate::error::FooError)
    pub fn builder() -> crate::error::foo_error::Builder {
        crate::error::foo_error::Builder::default()
    }
}

/// This error is thrown when a request is invalid.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComplexError {
    pub header: ::std::option::Option<::std::string::String>,
    pub top_level: ::std::option::Option<::std::string::String>,
    pub nested: ::std::option::Option<ComplexNestedErrorData>,
}
impl ComplexError {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "ComplexError"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for ComplexError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ComplexError")?;
        Ok(())
    }
}
impl ::std::error::Error for ComplexError {}
/// See [`ComplexError`](crate::error::ComplexError)
pub mod complex_error {

    use crate::error::ComplexError;
    use crate::model::ComplexNestedErrorData;
    /// A builder for [`ComplexError`](crate::error::ComplexError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        header: ::std::option::Option<::std::string::String>,
        top_level: ::std::option::Option<::std::string::String>,
        nested: ::std::option::Option<ComplexNestedErrorData>,
    }
    impl Builder {
        pub fn header(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.header = Some(inp.into());
            self
        }
        pub fn top_level(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.top_level = Some(inp.into());
            self
        }
        pub fn nested(mut self, inp: ComplexNestedErrorData) -> Self {
            self.nested = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`ComplexError`](crate::error::ComplexError)
        pub fn build(self) -> ComplexError {
            ComplexError {
                header: self.header,
                top_level: self.top_level,
                nested: self.nested,
            }
        }
    }
}
impl ComplexError {
    /// Creates a new builder-style object to manufacture [`ComplexError`](crate::error::ComplexError)
    pub fn builder() -> crate::error::complex_error::Builder {
        crate::error::complex_error::Builder::default()
    }
}

/// This error is thrown when an invalid greeting value is provided.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvalidGreeting {
    pub message: ::std::option::Option<::std::string::String>,
}
impl InvalidGreeting {
    pub fn retryable(&self) -> bool {
        false
    }
    pub fn throttling(&self) -> bool {
        false
    }
    pub fn code(&self) -> &str {
        "InvalidGreeting"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InvalidGreeting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidGreeting")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidGreeting {}
/// See [`InvalidGreeting`](crate::error::InvalidGreeting)
pub mod invalid_greeting {

    use crate::error::InvalidGreeting;
    /// A builder for [`InvalidGreeting`](crate::error::InvalidGreeting)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidGreeting`](crate::error::InvalidGreeting)
        pub fn build(self) -> InvalidGreeting {
            InvalidGreeting {
                message: self.message,
            }
        }
    }
}
impl InvalidGreeting {
    /// Creates a new builder-style object to manufacture [`InvalidGreeting`](crate::error::InvalidGreeting)
    pub fn builder() -> crate::error::invalid_greeting::Builder {
        crate::error::invalid_greeting::Builder::default()
    }
}
