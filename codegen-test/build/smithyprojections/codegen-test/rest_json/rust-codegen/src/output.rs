// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::FooEnum;
use crate::model::GreetingStruct;
use crate::model::MyUnion;
use crate::model::NestedPayload;
use crate::model::RecursiveShapesInputOutputNested1;
use crate::model::StructureListMember;
use smithy_types::Blob;
use smithy_types::Document;
use smithy_types::Instant;
/// A shared structure that contains a single union member.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonUnionsOutput {
    /// A union with a representative set of types for members.
    pub contents: ::std::option::Option<MyUnion>,
}
/// See [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
pub mod json_unions_output {

    use crate::model::MyUnion;
    use crate::output::JsonUnionsOutput;
    /// A builder for [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        contents: ::std::option::Option<MyUnion>,
    }
    impl Builder {
        /// A union with a representative set of types for members.
        pub fn contents(mut self, inp: MyUnion) -> Self {
            self.contents = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
        pub fn build(self) -> JsonUnionsOutput {
            JsonUnionsOutput {
                contents: self.contents,
            }
        }
    }
}
impl JsonUnionsOutput {
    /// Creates a new builder-style object to manufacture [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    pub fn builder() -> crate::output::json_unions_output::Builder {
        crate::output::json_unions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InlineDocumentAsPayloadOutput {
    pub document_value: Document,
}
/// See [`InlineDocumentAsPayloadOutput`](crate::output::InlineDocumentAsPayloadOutput)
pub mod inline_document_as_payload_output {

    use crate::output::InlineDocumentAsPayloadOutput;
    use smithy_types::Document;
    /// A builder for [`InlineDocumentAsPayloadOutput`](crate::output::InlineDocumentAsPayloadOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        document_value: ::std::option::Option<Document>,
    }
    impl Builder {
        pub fn document_value(mut self, inp: Document) -> Self {
            self.document_value = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`InlineDocumentAsPayloadOutput`](crate::output::InlineDocumentAsPayloadOutput)
        pub fn build(self) -> Result<InlineDocumentAsPayloadOutput, String> {
            Ok(InlineDocumentAsPayloadOutput {
                document_value: self.document_value.ok_or(
                    "document_value is required when building InlineDocumentAsPayloadOutput",
                )?,
            })
        }
    }
}
impl InlineDocumentAsPayloadOutput {
    /// Creates a new builder-style object to manufacture [`InlineDocumentAsPayloadOutput`](crate::output::InlineDocumentAsPayloadOutput)
    pub fn builder() -> crate::output::inline_document_as_payload_output::Builder {
        crate::output::inline_document_as_payload_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InlineDocumentOutput {
    pub string_value: ::std::option::Option<::std::string::String>,
    pub document_value: Document,
}
/// See [`InlineDocumentOutput`](crate::output::InlineDocumentOutput)
pub mod inline_document_output {

    use crate::output::InlineDocumentOutput;
    use smithy_types::Document;
    /// A builder for [`InlineDocumentOutput`](crate::output::InlineDocumentOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        string_value: ::std::option::Option<::std::string::String>,
        document_value: ::std::option::Option<Document>,
    }
    impl Builder {
        pub fn string_value(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.string_value = Some(inp.into());
            self
        }
        pub fn document_value(mut self, inp: Document) -> Self {
            self.document_value = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`InlineDocumentOutput`](crate::output::InlineDocumentOutput)
        pub fn build(self) -> Result<InlineDocumentOutput, String> {
            Ok(InlineDocumentOutput {
                string_value: self.string_value,
                document_value: self
                    .document_value
                    .ok_or("document_value is required when building InlineDocumentOutput")?,
            })
        }
    }
}
impl InlineDocumentOutput {
    /// Creates a new builder-style object to manufacture [`InlineDocumentOutput`](crate::output::InlineDocumentOutput)
    pub fn builder() -> crate::output::inline_document_output::Builder {
        crate::output::inline_document_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonBlobsOutput {
    pub data: ::std::option::Option<Blob>,
}
/// See [`JsonBlobsOutput`](crate::output::JsonBlobsOutput)
pub mod json_blobs_output {

    use crate::output::JsonBlobsOutput;
    use smithy_types::Blob;
    /// A builder for [`JsonBlobsOutput`](crate::output::JsonBlobsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        data: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn data(mut self, inp: Blob) -> Self {
            self.data = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonBlobsOutput`](crate::output::JsonBlobsOutput)
        pub fn build(self) -> JsonBlobsOutput {
            JsonBlobsOutput { data: self.data }
        }
    }
}
impl JsonBlobsOutput {
    /// Creates a new builder-style object to manufacture [`JsonBlobsOutput`](crate::output::JsonBlobsOutput)
    pub fn builder() -> crate::output::json_blobs_output::Builder {
        crate::output::json_blobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonMapsOutput {
    pub dense_struct_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, GreetingStruct>>,
    pub sparse_struct_map: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::option::Option<GreetingStruct>>,
    >,
    pub dense_number_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
    pub dense_boolean_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, bool>>,
    pub dense_string_map: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    pub sparse_number_map: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::option::Option<i32>>,
    >,
    pub sparse_boolean_map: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::option::Option<bool>>,
    >,
    pub sparse_string_map: ::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::option::Option<::std::string::String>,
        >,
    >,
}
/// See [`JsonMapsOutput`](crate::output::JsonMapsOutput)
pub mod json_maps_output {

    use crate::model::GreetingStruct;
    use crate::output::JsonMapsOutput;
    /// A builder for [`JsonMapsOutput`](crate::output::JsonMapsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        dense_struct_map: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, GreetingStruct>,
        >,
        sparse_struct_map: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<GreetingStruct>,
            >,
        >,
        dense_number_map:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
        dense_boolean_map:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, bool>>,
        dense_string_map: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        sparse_number_map: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::option::Option<i32>>,
        >,
        sparse_boolean_map: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::option::Option<bool>>,
        >,
        sparse_string_map: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<::std::string::String>,
            >,
        >,
    }
    impl Builder {
        pub fn dense_struct_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, GreetingStruct>,
        ) -> Self {
            self.dense_struct_map = Some(inp);
            self
        }
        pub fn sparse_struct_map(
            mut self,
            inp: ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<GreetingStruct>,
            >,
        ) -> Self {
            self.sparse_struct_map = Some(inp);
            self
        }
        pub fn dense_number_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, i32>,
        ) -> Self {
            self.dense_number_map = Some(inp);
            self
        }
        pub fn dense_boolean_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, bool>,
        ) -> Self {
            self.dense_boolean_map = Some(inp);
            self
        }
        pub fn dense_string_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.dense_string_map = Some(inp);
            self
        }
        pub fn sparse_number_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::option::Option<i32>>,
        ) -> Self {
            self.sparse_number_map = Some(inp);
            self
        }
        pub fn sparse_boolean_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::option::Option<bool>>,
        ) -> Self {
            self.sparse_boolean_map = Some(inp);
            self
        }
        pub fn sparse_string_map(
            mut self,
            inp: ::std::collections::HashMap<
                ::std::string::String,
                ::std::option::Option<::std::string::String>,
            >,
        ) -> Self {
            self.sparse_string_map = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonMapsOutput`](crate::output::JsonMapsOutput)
        pub fn build(self) -> JsonMapsOutput {
            JsonMapsOutput {
                dense_struct_map: self.dense_struct_map,
                sparse_struct_map: self.sparse_struct_map,
                dense_number_map: self.dense_number_map,
                dense_boolean_map: self.dense_boolean_map,
                dense_string_map: self.dense_string_map,
                sparse_number_map: self.sparse_number_map,
                sparse_boolean_map: self.sparse_boolean_map,
                sparse_string_map: self.sparse_string_map,
            }
        }
    }
}
impl JsonMapsOutput {
    /// Creates a new builder-style object to manufacture [`JsonMapsOutput`](crate::output::JsonMapsOutput)
    pub fn builder() -> crate::output::json_maps_output::Builder {
        crate::output::json_maps_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonListsOutput {
    pub string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub sparse_string_list:
        ::std::option::Option<::std::vec::Vec<::std::option::Option<::std::string::String>>>,
    pub string_set: ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
    pub integer_list: ::std::option::Option<::std::vec::Vec<i32>>,
    pub boolean_list: ::std::option::Option<::std::vec::Vec<bool>>,
    pub timestamp_list: ::std::option::Option<::std::vec::Vec<Instant>>,
    pub enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
    /// A list of lists of strings.
    pub nested_string_list:
        ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub structure_list: ::std::option::Option<::std::vec::Vec<StructureListMember>>,
}
/// See [`JsonListsOutput`](crate::output::JsonListsOutput)
pub mod json_lists_output {

    use crate::model::FooEnum;
    use crate::model::StructureListMember;
    use crate::output::JsonListsOutput;
    use smithy_types::Instant;
    /// A builder for [`JsonListsOutput`](crate::output::JsonListsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        sparse_string_list:
            ::std::option::Option<::std::vec::Vec<::std::option::Option<::std::string::String>>>,
        string_set: ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
        integer_list: ::std::option::Option<::std::vec::Vec<i32>>,
        boolean_list: ::std::option::Option<::std::vec::Vec<bool>>,
        timestamp_list: ::std::option::Option<::std::vec::Vec<Instant>>,
        enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
        nested_string_list:
            ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
        structure_list: ::std::option::Option<::std::vec::Vec<StructureListMember>>,
    }
    impl Builder {
        pub fn string_list(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.string_list = Some(inp);
            self
        }
        pub fn sparse_string_list(
            mut self,
            inp: ::std::vec::Vec<::std::option::Option<::std::string::String>>,
        ) -> Self {
            self.sparse_string_list = Some(inp);
            self
        }
        pub fn string_set(
            mut self,
            inp: ::std::collections::BTreeSet<::std::string::String>,
        ) -> Self {
            self.string_set = Some(inp);
            self
        }
        pub fn integer_list(mut self, inp: ::std::vec::Vec<i32>) -> Self {
            self.integer_list = Some(inp);
            self
        }
        pub fn boolean_list(mut self, inp: ::std::vec::Vec<bool>) -> Self {
            self.boolean_list = Some(inp);
            self
        }
        pub fn timestamp_list(mut self, inp: ::std::vec::Vec<Instant>) -> Self {
            self.timestamp_list = Some(inp);
            self
        }
        pub fn enum_list(mut self, inp: ::std::vec::Vec<FooEnum>) -> Self {
            self.enum_list = Some(inp);
            self
        }
        /// A list of lists of strings.
        pub fn nested_string_list(
            mut self,
            inp: ::std::vec::Vec<::std::vec::Vec<::std::string::String>>,
        ) -> Self {
            self.nested_string_list = Some(inp);
            self
        }
        pub fn structure_list(mut self, inp: ::std::vec::Vec<StructureListMember>) -> Self {
            self.structure_list = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonListsOutput`](crate::output::JsonListsOutput)
        pub fn build(self) -> JsonListsOutput {
            JsonListsOutput {
                string_list: self.string_list,
                sparse_string_list: self.sparse_string_list,
                string_set: self.string_set,
                integer_list: self.integer_list,
                boolean_list: self.boolean_list,
                timestamp_list: self.timestamp_list,
                enum_list: self.enum_list,
                nested_string_list: self.nested_string_list,
                structure_list: self.structure_list,
            }
        }
    }
}
impl JsonListsOutput {
    /// Creates a new builder-style object to manufacture [`JsonListsOutput`](crate::output::JsonListsOutput)
    pub fn builder() -> crate::output::json_lists_output::Builder {
        crate::output::json_lists_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecursiveShapesOutput {
    pub nested: ::std::option::Option<RecursiveShapesInputOutputNested1>,
}
/// See [`RecursiveShapesOutput`](crate::output::RecursiveShapesOutput)
pub mod recursive_shapes_output {

    use crate::model::RecursiveShapesInputOutputNested1;
    use crate::output::RecursiveShapesOutput;
    /// A builder for [`RecursiveShapesOutput`](crate::output::RecursiveShapesOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        nested: ::std::option::Option<RecursiveShapesInputOutputNested1>,
    }
    impl Builder {
        pub fn nested(mut self, inp: RecursiveShapesInputOutputNested1) -> Self {
            self.nested = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`RecursiveShapesOutput`](crate::output::RecursiveShapesOutput)
        pub fn build(self) -> RecursiveShapesOutput {
            RecursiveShapesOutput {
                nested: self.nested,
            }
        }
    }
}
impl RecursiveShapesOutput {
    /// Creates a new builder-style object to manufacture [`RecursiveShapesOutput`](crate::output::RecursiveShapesOutput)
    pub fn builder() -> crate::output::recursive_shapes_output::Builder {
        crate::output::recursive_shapes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonEnumsOutput {
    pub foo_enum1: ::std::option::Option<FooEnum>,
    pub foo_enum2: ::std::option::Option<FooEnum>,
    pub foo_enum3: ::std::option::Option<FooEnum>,
    pub foo_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
    pub foo_enum_set: ::std::option::Option<::std::collections::BTreeSet<FooEnum>>,
    pub foo_enum_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, FooEnum>>,
}
/// See [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
pub mod json_enums_output {

    use crate::model::FooEnum;
    use crate::output::JsonEnumsOutput;
    /// A builder for [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo_enum1: ::std::option::Option<FooEnum>,
        foo_enum2: ::std::option::Option<FooEnum>,
        foo_enum3: ::std::option::Option<FooEnum>,
        foo_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
        foo_enum_set: ::std::option::Option<::std::collections::BTreeSet<FooEnum>>,
        foo_enum_map:
            ::std::option::Option<::std::collections::HashMap<::std::string::String, FooEnum>>,
    }
    impl Builder {
        pub fn foo_enum1(mut self, inp: FooEnum) -> Self {
            self.foo_enum1 = Some(inp);
            self
        }
        pub fn foo_enum2(mut self, inp: FooEnum) -> Self {
            self.foo_enum2 = Some(inp);
            self
        }
        pub fn foo_enum3(mut self, inp: FooEnum) -> Self {
            self.foo_enum3 = Some(inp);
            self
        }
        pub fn foo_enum_list(mut self, inp: ::std::vec::Vec<FooEnum>) -> Self {
            self.foo_enum_list = Some(inp);
            self
        }
        pub fn foo_enum_set(mut self, inp: ::std::collections::BTreeSet<FooEnum>) -> Self {
            self.foo_enum_set = Some(inp);
            self
        }
        pub fn foo_enum_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, FooEnum>,
        ) -> Self {
            self.foo_enum_map = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
        pub fn build(self) -> JsonEnumsOutput {
            JsonEnumsOutput {
                foo_enum1: self.foo_enum1,
                foo_enum2: self.foo_enum2,
                foo_enum3: self.foo_enum3,
                foo_enum_list: self.foo_enum_list,
                foo_enum_set: self.foo_enum_set,
                foo_enum_map: self.foo_enum_map,
            }
        }
    }
}
impl JsonEnumsOutput {
    /// Creates a new builder-style object to manufacture [`JsonEnumsOutput`](crate::output::JsonEnumsOutput)
    pub fn builder() -> crate::output::json_enums_output::Builder {
        crate::output::json_enums_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonTimestampsOutput {
    pub normal: ::std::option::Option<Instant>,
    pub date_time: ::std::option::Option<Instant>,
    pub epoch_seconds: ::std::option::Option<Instant>,
    pub http_date: ::std::option::Option<Instant>,
}
/// See [`JsonTimestampsOutput`](crate::output::JsonTimestampsOutput)
pub mod json_timestamps_output {

    use crate::output::JsonTimestampsOutput;
    use smithy_types::Instant;
    /// A builder for [`JsonTimestampsOutput`](crate::output::JsonTimestampsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        normal: ::std::option::Option<Instant>,
        date_time: ::std::option::Option<Instant>,
        epoch_seconds: ::std::option::Option<Instant>,
        http_date: ::std::option::Option<Instant>,
    }
    impl Builder {
        pub fn normal(mut self, inp: Instant) -> Self {
            self.normal = Some(inp);
            self
        }
        pub fn date_time(mut self, inp: Instant) -> Self {
            self.date_time = Some(inp);
            self
        }
        pub fn epoch_seconds(mut self, inp: Instant) -> Self {
            self.epoch_seconds = Some(inp);
            self
        }
        pub fn http_date(mut self, inp: Instant) -> Self {
            self.http_date = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonTimestampsOutput`](crate::output::JsonTimestampsOutput)
        pub fn build(self) -> JsonTimestampsOutput {
            JsonTimestampsOutput {
                normal: self.normal,
                date_time: self.date_time,
                epoch_seconds: self.epoch_seconds,
                http_date: self.http_date,
            }
        }
    }
}
impl JsonTimestampsOutput {
    /// Creates a new builder-style object to manufacture [`JsonTimestampsOutput`](crate::output::JsonTimestampsOutput)
    pub fn builder() -> crate::output::json_timestamps_output::Builder {
        crate::output::json_timestamps_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SimpleScalarPropertiesOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub string_value: ::std::option::Option<::std::string::String>,
    pub true_boolean_value: ::std::option::Option<bool>,
    pub false_boolean_value: ::std::option::Option<bool>,
    pub byte_value: ::std::option::Option<i8>,
    pub short_value: ::std::option::Option<i16>,
    pub integer_value: ::std::option::Option<i32>,
    pub long_value: ::std::option::Option<i64>,
    pub float_value: ::std::option::Option<f32>,
    pub double_value: ::std::option::Option<f64>,
}
/// See [`SimpleScalarPropertiesOutput`](crate::output::SimpleScalarPropertiesOutput)
pub mod simple_scalar_properties_output {

    use crate::output::SimpleScalarPropertiesOutput;
    /// A builder for [`SimpleScalarPropertiesOutput`](crate::output::SimpleScalarPropertiesOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        string_value: ::std::option::Option<::std::string::String>,
        true_boolean_value: ::std::option::Option<bool>,
        false_boolean_value: ::std::option::Option<bool>,
        byte_value: ::std::option::Option<i8>,
        short_value: ::std::option::Option<i16>,
        integer_value: ::std::option::Option<i32>,
        long_value: ::std::option::Option<i64>,
        float_value: ::std::option::Option<f32>,
        double_value: ::std::option::Option<f64>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn string_value(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.string_value = Some(inp.into());
            self
        }
        pub fn true_boolean_value(mut self, inp: bool) -> Self {
            self.true_boolean_value = Some(inp);
            self
        }
        pub fn false_boolean_value(mut self, inp: bool) -> Self {
            self.false_boolean_value = Some(inp);
            self
        }
        pub fn byte_value(mut self, inp: i8) -> Self {
            self.byte_value = Some(inp);
            self
        }
        pub fn short_value(mut self, inp: i16) -> Self {
            self.short_value = Some(inp);
            self
        }
        pub fn integer_value(mut self, inp: i32) -> Self {
            self.integer_value = Some(inp);
            self
        }
        pub fn long_value(mut self, inp: i64) -> Self {
            self.long_value = Some(inp);
            self
        }
        pub fn float_value(mut self, inp: f32) -> Self {
            self.float_value = Some(inp);
            self
        }
        pub fn double_value(mut self, inp: f64) -> Self {
            self.double_value = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`SimpleScalarPropertiesOutput`](crate::output::SimpleScalarPropertiesOutput)
        pub fn build(self) -> SimpleScalarPropertiesOutput {
            SimpleScalarPropertiesOutput {
                foo: self.foo,
                string_value: self.string_value,
                true_boolean_value: self.true_boolean_value,
                false_boolean_value: self.false_boolean_value,
                byte_value: self.byte_value,
                short_value: self.short_value,
                integer_value: self.integer_value,
                long_value: self.long_value,
                float_value: self.float_value,
                double_value: self.double_value,
            }
        }
    }
}
impl SimpleScalarPropertiesOutput {
    /// Creates a new builder-style object to manufacture [`SimpleScalarPropertiesOutput`](crate::output::SimpleScalarPropertiesOutput)
    pub fn builder() -> crate::output::simple_scalar_properties_output::Builder {
        crate::output::simple_scalar_properties_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GreetingWithErrorsOutput {
    pub greeting: ::std::option::Option<::std::string::String>,
}
/// See [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
pub mod greeting_with_errors_output {

    use crate::output::GreetingWithErrorsOutput;
    /// A builder for [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        greeting: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn greeting(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.greeting = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
        pub fn build(self) -> GreetingWithErrorsOutput {
            GreetingWithErrorsOutput {
                greeting: self.greeting,
            }
        }
    }
}
impl GreetingWithErrorsOutput {
    /// Creates a new builder-style object to manufacture [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    pub fn builder() -> crate::output::greeting_with_errors_output::Builder {
        crate::output::greeting_with_errors_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingTraitsWithMediaTypeOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub blob: ::std::option::Option<Blob>,
}
/// See [`StreamingTraitsWithMediaTypeOutput`](crate::output::StreamingTraitsWithMediaTypeOutput)
pub mod streaming_traits_with_media_type_output {

    use crate::output::StreamingTraitsWithMediaTypeOutput;
    use smithy_types::Blob;
    /// A builder for [`StreamingTraitsWithMediaTypeOutput`](crate::output::StreamingTraitsWithMediaTypeOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        blob: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`StreamingTraitsWithMediaTypeOutput`](crate::output::StreamingTraitsWithMediaTypeOutput)
        pub fn build(self) -> StreamingTraitsWithMediaTypeOutput {
            StreamingTraitsWithMediaTypeOutput {
                foo: self.foo,
                blob: self.blob,
            }
        }
    }
}
impl StreamingTraitsWithMediaTypeOutput {
    /// Creates a new builder-style object to manufacture [`StreamingTraitsWithMediaTypeOutput`](crate::output::StreamingTraitsWithMediaTypeOutput)
    pub fn builder() -> crate::output::streaming_traits_with_media_type_output::Builder {
        crate::output::streaming_traits_with_media_type_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingTraitsRequireLengthOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub blob: ::std::option::Option<Blob>,
}
/// See [`StreamingTraitsRequireLengthOutput`](crate::output::StreamingTraitsRequireLengthOutput)
pub mod streaming_traits_require_length_output {

    use crate::output::StreamingTraitsRequireLengthOutput;
    use smithy_types::Blob;
    /// A builder for [`StreamingTraitsRequireLengthOutput`](crate::output::StreamingTraitsRequireLengthOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        blob: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`StreamingTraitsRequireLengthOutput`](crate::output::StreamingTraitsRequireLengthOutput)
        pub fn build(self) -> StreamingTraitsRequireLengthOutput {
            StreamingTraitsRequireLengthOutput {
                foo: self.foo,
                blob: self.blob,
            }
        }
    }
}
impl StreamingTraitsRequireLengthOutput {
    /// Creates a new builder-style object to manufacture [`StreamingTraitsRequireLengthOutput`](crate::output::StreamingTraitsRequireLengthOutput)
    pub fn builder() -> crate::output::streaming_traits_require_length_output::Builder {
        crate::output::streaming_traits_require_length_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingTraitsOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub blob: ::std::option::Option<Blob>,
}
/// See [`StreamingTraitsOutput`](crate::output::StreamingTraitsOutput)
pub mod streaming_traits_output {

    use crate::output::StreamingTraitsOutput;
    use smithy_types::Blob;
    /// A builder for [`StreamingTraitsOutput`](crate::output::StreamingTraitsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        blob: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`StreamingTraitsOutput`](crate::output::StreamingTraitsOutput)
        pub fn build(self) -> StreamingTraitsOutput {
            StreamingTraitsOutput {
                foo: self.foo,
                blob: self.blob,
            }
        }
    }
}
impl StreamingTraitsOutput {
    /// Creates a new builder-style object to manufacture [`StreamingTraitsOutput`](crate::output::StreamingTraitsOutput)
    pub fn builder() -> crate::output::streaming_traits_output::Builder {
        crate::output::streaming_traits_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpResponseCodeOutput {
    pub status: ::std::option::Option<i32>,
}
/// See [`HttpResponseCodeOutput`](crate::output::HttpResponseCodeOutput)
pub mod http_response_code_output {

    use crate::output::HttpResponseCodeOutput;
    /// A builder for [`HttpResponseCodeOutput`](crate::output::HttpResponseCodeOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        status: ::std::option::Option<i32>,
    }
    impl Builder {
        pub fn status(mut self, inp: i32) -> Self {
            self.status = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpResponseCodeOutput`](crate::output::HttpResponseCodeOutput)
        pub fn build(self) -> HttpResponseCodeOutput {
            HttpResponseCodeOutput {
                status: self.status,
            }
        }
    }
}
impl HttpResponseCodeOutput {
    /// Creates a new builder-style object to manufacture [`HttpResponseCodeOutput`](crate::output::HttpResponseCodeOutput)
    pub fn builder() -> crate::output::http_response_code_output::Builder {
        crate::output::http_response_code_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPayloadWithStructureOutput {
    pub nested: ::std::option::Option<NestedPayload>,
}
/// See [`HttpPayloadWithStructureOutput`](crate::output::HttpPayloadWithStructureOutput)
pub mod http_payload_with_structure_output {

    use crate::model::NestedPayload;
    use crate::output::HttpPayloadWithStructureOutput;
    /// A builder for [`HttpPayloadWithStructureOutput`](crate::output::HttpPayloadWithStructureOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        nested: ::std::option::Option<NestedPayload>,
    }
    impl Builder {
        pub fn nested(mut self, inp: NestedPayload) -> Self {
            self.nested = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpPayloadWithStructureOutput`](crate::output::HttpPayloadWithStructureOutput)
        pub fn build(self) -> HttpPayloadWithStructureOutput {
            HttpPayloadWithStructureOutput {
                nested: self.nested,
            }
        }
    }
}
impl HttpPayloadWithStructureOutput {
    /// Creates a new builder-style object to manufacture [`HttpPayloadWithStructureOutput`](crate::output::HttpPayloadWithStructureOutput)
    pub fn builder() -> crate::output::http_payload_with_structure_output::Builder {
        crate::output::http_payload_with_structure_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPayloadTraitsWithMediaTypeOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub blob: ::std::option::Option<Blob>,
}
/// See [`HttpPayloadTraitsWithMediaTypeOutput`](crate::output::HttpPayloadTraitsWithMediaTypeOutput)
pub mod http_payload_traits_with_media_type_output {

    use crate::output::HttpPayloadTraitsWithMediaTypeOutput;
    use smithy_types::Blob;
    /// A builder for [`HttpPayloadTraitsWithMediaTypeOutput`](crate::output::HttpPayloadTraitsWithMediaTypeOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        blob: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpPayloadTraitsWithMediaTypeOutput`](crate::output::HttpPayloadTraitsWithMediaTypeOutput)
        pub fn build(self) -> HttpPayloadTraitsWithMediaTypeOutput {
            HttpPayloadTraitsWithMediaTypeOutput {
                foo: self.foo,
                blob: self.blob,
            }
        }
    }
}
impl HttpPayloadTraitsWithMediaTypeOutput {
    /// Creates a new builder-style object to manufacture [`HttpPayloadTraitsWithMediaTypeOutput`](crate::output::HttpPayloadTraitsWithMediaTypeOutput)
    pub fn builder() -> crate::output::http_payload_traits_with_media_type_output::Builder {
        crate::output::http_payload_traits_with_media_type_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPayloadTraitsOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub blob: ::std::option::Option<Blob>,
}
/// See [`HttpPayloadTraitsOutput`](crate::output::HttpPayloadTraitsOutput)
pub mod http_payload_traits_output {

    use crate::output::HttpPayloadTraitsOutput;
    use smithy_types::Blob;
    /// A builder for [`HttpPayloadTraitsOutput`](crate::output::HttpPayloadTraitsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        blob: ::std::option::Option<Blob>,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn blob(mut self, inp: Blob) -> Self {
            self.blob = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpPayloadTraitsOutput`](crate::output::HttpPayloadTraitsOutput)
        pub fn build(self) -> HttpPayloadTraitsOutput {
            HttpPayloadTraitsOutput {
                foo: self.foo,
                blob: self.blob,
            }
        }
    }
}
impl HttpPayloadTraitsOutput {
    /// Creates a new builder-style object to manufacture [`HttpPayloadTraitsOutput`](crate::output::HttpPayloadTraitsOutput)
    pub fn builder() -> crate::output::http_payload_traits_output::Builder {
        crate::output::http_payload_traits_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPrefixHeadersResponseOutput {
    pub prefix_headers: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
}
/// See [`HttpPrefixHeadersResponseOutput`](crate::output::HttpPrefixHeadersResponseOutput)
pub mod http_prefix_headers_response_output {

    use crate::output::HttpPrefixHeadersResponseOutput;
    /// A builder for [`HttpPrefixHeadersResponseOutput`](crate::output::HttpPrefixHeadersResponseOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        prefix_headers: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
    }
    impl Builder {
        pub fn prefix_headers(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.prefix_headers = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpPrefixHeadersResponseOutput`](crate::output::HttpPrefixHeadersResponseOutput)
        pub fn build(self) -> HttpPrefixHeadersResponseOutput {
            HttpPrefixHeadersResponseOutput {
                prefix_headers: self.prefix_headers,
            }
        }
    }
}
impl HttpPrefixHeadersResponseOutput {
    /// Creates a new builder-style object to manufacture [`HttpPrefixHeadersResponseOutput`](crate::output::HttpPrefixHeadersResponseOutput)
    pub fn builder() -> crate::output::http_prefix_headers_response_output::Builder {
        crate::output::http_prefix_headers_response_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpPrefixHeadersOutput {
    pub foo: ::std::option::Option<::std::string::String>,
    pub foo_map: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
}
/// See [`HttpPrefixHeadersOutput`](crate::output::HttpPrefixHeadersOutput)
pub mod http_prefix_headers_output {

    use crate::output::HttpPrefixHeadersOutput;
    /// A builder for [`HttpPrefixHeadersOutput`](crate::output::HttpPrefixHeadersOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        foo: ::std::option::Option<::std::string::String>,
        foo_map: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
    }
    impl Builder {
        pub fn foo(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.foo = Some(inp.into());
            self
        }
        pub fn foo_map(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.foo_map = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`HttpPrefixHeadersOutput`](crate::output::HttpPrefixHeadersOutput)
        pub fn build(self) -> HttpPrefixHeadersOutput {
            HttpPrefixHeadersOutput {
                foo: self.foo,
                foo_map: self.foo_map,
            }
        }
    }
}
impl HttpPrefixHeadersOutput {
    /// Creates a new builder-style object to manufacture [`HttpPrefixHeadersOutput`](crate::output::HttpPrefixHeadersOutput)
    pub fn builder() -> crate::output::http_prefix_headers_output::Builder {
        crate::output::http_prefix_headers_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryIdempotencyTokenAutoFillOutput {}
/// See [`QueryIdempotencyTokenAutoFillOutput`](crate::output::QueryIdempotencyTokenAutoFillOutput)
pub mod query_idempotency_token_auto_fill_output {

    use crate::output::QueryIdempotencyTokenAutoFillOutput;
    /// A builder for [`QueryIdempotencyTokenAutoFillOutput`](crate::output::QueryIdempotencyTokenAutoFillOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`QueryIdempotencyTokenAutoFillOutput`](crate::output::QueryIdempotencyTokenAutoFillOutput)
        pub fn build(self) -> QueryIdempotencyTokenAutoFillOutput {
            QueryIdempotencyTokenAutoFillOutput {}
        }
    }
}
impl QueryIdempotencyTokenAutoFillOutput {
    /// Creates a new builder-style object to manufacture [`QueryIdempotencyTokenAutoFillOutput`](crate::output::QueryIdempotencyTokenAutoFillOutput)
    pub fn builder() -> crate::output::query_idempotency_token_auto_fill_output::Builder {
        crate::output::query_idempotency_token_auto_fill_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OmitsNullSerializesEmptyStringOutput {}
/// See [`OmitsNullSerializesEmptyStringOutput`](crate::output::OmitsNullSerializesEmptyStringOutput)
pub mod omits_null_serializes_empty_string_output {

    use crate::output::OmitsNullSerializesEmptyStringOutput;
    /// A builder for [`OmitsNullSerializesEmptyStringOutput`](crate::output::OmitsNullSerializesEmptyStringOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`OmitsNullSerializesEmptyStringOutput`](crate::output::OmitsNullSerializesEmptyStringOutput)
        pub fn build(self) -> OmitsNullSerializesEmptyStringOutput {
            OmitsNullSerializesEmptyStringOutput {}
        }
    }
}
impl OmitsNullSerializesEmptyStringOutput {
    /// Creates a new builder-style object to manufacture [`OmitsNullSerializesEmptyStringOutput`](crate::output::OmitsNullSerializesEmptyStringOutput)
    pub fn builder() -> crate::output::omits_null_serializes_empty_string_output::Builder {
        crate::output::omits_null_serializes_empty_string_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IgnoreQueryParamsInResponseOutput {
    pub baz: ::std::option::Option<::std::string::String>,
}
/// See [`IgnoreQueryParamsInResponseOutput`](crate::output::IgnoreQueryParamsInResponseOutput)
pub mod ignore_query_params_in_response_output {

    use crate::output::IgnoreQueryParamsInResponseOutput;
    /// A builder for [`IgnoreQueryParamsInResponseOutput`](crate::output::IgnoreQueryParamsInResponseOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        baz: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn baz(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.baz = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`IgnoreQueryParamsInResponseOutput`](crate::output::IgnoreQueryParamsInResponseOutput)
        pub fn build(self) -> IgnoreQueryParamsInResponseOutput {
            IgnoreQueryParamsInResponseOutput { baz: self.baz }
        }
    }
}
impl IgnoreQueryParamsInResponseOutput {
    /// Creates a new builder-style object to manufacture [`IgnoreQueryParamsInResponseOutput`](crate::output::IgnoreQueryParamsInResponseOutput)
    pub fn builder() -> crate::output::ignore_query_params_in_response_output::Builder {
        crate::output::ignore_query_params_in_response_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConstantAndVariableQueryStringOutput {}
/// See [`ConstantAndVariableQueryStringOutput`](crate::output::ConstantAndVariableQueryStringOutput)
pub mod constant_and_variable_query_string_output {

    use crate::output::ConstantAndVariableQueryStringOutput;
    /// A builder for [`ConstantAndVariableQueryStringOutput`](crate::output::ConstantAndVariableQueryStringOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ConstantAndVariableQueryStringOutput`](crate::output::ConstantAndVariableQueryStringOutput)
        pub fn build(self) -> ConstantAndVariableQueryStringOutput {
            ConstantAndVariableQueryStringOutput {}
        }
    }
}
impl ConstantAndVariableQueryStringOutput {
    /// Creates a new builder-style object to manufacture [`ConstantAndVariableQueryStringOutput`](crate::output::ConstantAndVariableQueryStringOutput)
    pub fn builder() -> crate::output::constant_and_variable_query_string_output::Builder {
        crate::output::constant_and_variable_query_string_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConstantQueryStringOutput {}
/// See [`ConstantQueryStringOutput`](crate::output::ConstantQueryStringOutput)
pub mod constant_query_string_output {

    use crate::output::ConstantQueryStringOutput;
    /// A builder for [`ConstantQueryStringOutput`](crate::output::ConstantQueryStringOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ConstantQueryStringOutput`](crate::output::ConstantQueryStringOutput)
        pub fn build(self) -> ConstantQueryStringOutput {
            ConstantQueryStringOutput {}
        }
    }
}
impl ConstantQueryStringOutput {
    /// Creates a new builder-style object to manufacture [`ConstantQueryStringOutput`](crate::output::ConstantQueryStringOutput)
    pub fn builder() -> crate::output::constant_query_string_output::Builder {
        crate::output::constant_query_string_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AllQueryStringTypesOutput {}
/// See [`AllQueryStringTypesOutput`](crate::output::AllQueryStringTypesOutput)
pub mod all_query_string_types_output {

    use crate::output::AllQueryStringTypesOutput;
    /// A builder for [`AllQueryStringTypesOutput`](crate::output::AllQueryStringTypesOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AllQueryStringTypesOutput`](crate::output::AllQueryStringTypesOutput)
        pub fn build(self) -> AllQueryStringTypesOutput {
            AllQueryStringTypesOutput {}
        }
    }
}
impl AllQueryStringTypesOutput {
    /// Creates a new builder-style object to manufacture [`AllQueryStringTypesOutput`](crate::output::AllQueryStringTypesOutput)
    pub fn builder() -> crate::output::all_query_string_types_output::Builder {
        crate::output::all_query_string_types_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpRequestWithGreedyLabelInPathOutput {}
/// See [`HttpRequestWithGreedyLabelInPathOutput`](crate::output::HttpRequestWithGreedyLabelInPathOutput)
pub mod http_request_with_greedy_label_in_path_output {

    use crate::output::HttpRequestWithGreedyLabelInPathOutput;
    /// A builder for [`HttpRequestWithGreedyLabelInPathOutput`](crate::output::HttpRequestWithGreedyLabelInPathOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`HttpRequestWithGreedyLabelInPathOutput`](crate::output::HttpRequestWithGreedyLabelInPathOutput)
        pub fn build(self) -> HttpRequestWithGreedyLabelInPathOutput {
            HttpRequestWithGreedyLabelInPathOutput {}
        }
    }
}
impl HttpRequestWithGreedyLabelInPathOutput {
    /// Creates a new builder-style object to manufacture [`HttpRequestWithGreedyLabelInPathOutput`](crate::output::HttpRequestWithGreedyLabelInPathOutput)
    pub fn builder() -> crate::output::http_request_with_greedy_label_in_path_output::Builder {
        crate::output::http_request_with_greedy_label_in_path_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpRequestWithLabelsAndTimestampFormatOutput {}
/// See [`HttpRequestWithLabelsAndTimestampFormatOutput`](crate::output::HttpRequestWithLabelsAndTimestampFormatOutput)
pub mod http_request_with_labels_and_timestamp_format_output {

    use crate::output::HttpRequestWithLabelsAndTimestampFormatOutput;
    /// A builder for [`HttpRequestWithLabelsAndTimestampFormatOutput`](crate::output::HttpRequestWithLabelsAndTimestampFormatOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`HttpRequestWithLabelsAndTimestampFormatOutput`](crate::output::HttpRequestWithLabelsAndTimestampFormatOutput)
        pub fn build(self) -> HttpRequestWithLabelsAndTimestampFormatOutput {
            HttpRequestWithLabelsAndTimestampFormatOutput {}
        }
    }
}
impl HttpRequestWithLabelsAndTimestampFormatOutput {
    /// Creates a new builder-style object to manufacture [`HttpRequestWithLabelsAndTimestampFormatOutput`](crate::output::HttpRequestWithLabelsAndTimestampFormatOutput)
    pub fn builder() -> crate::output::http_request_with_labels_and_timestamp_format_output::Builder
    {
        crate::output::http_request_with_labels_and_timestamp_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpRequestWithLabelsOutput {}
/// See [`HttpRequestWithLabelsOutput`](crate::output::HttpRequestWithLabelsOutput)
pub mod http_request_with_labels_output {

    use crate::output::HttpRequestWithLabelsOutput;
    /// A builder for [`HttpRequestWithLabelsOutput`](crate::output::HttpRequestWithLabelsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`HttpRequestWithLabelsOutput`](crate::output::HttpRequestWithLabelsOutput)
        pub fn build(self) -> HttpRequestWithLabelsOutput {
            HttpRequestWithLabelsOutput {}
        }
    }
}
impl HttpRequestWithLabelsOutput {
    /// Creates a new builder-style object to manufacture [`HttpRequestWithLabelsOutput`](crate::output::HttpRequestWithLabelsOutput)
    pub fn builder() -> crate::output::http_request_with_labels_output::Builder {
        crate::output::http_request_with_labels_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaTypeHeaderOutput {
    pub json: ::std::option::Option<::std::string::String>,
}
/// See [`MediaTypeHeaderOutput`](crate::output::MediaTypeHeaderOutput)
pub mod media_type_header_output {

    use crate::output::MediaTypeHeaderOutput;
    /// A builder for [`MediaTypeHeaderOutput`](crate::output::MediaTypeHeaderOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        json: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn json(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.json = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`MediaTypeHeaderOutput`](crate::output::MediaTypeHeaderOutput)
        pub fn build(self) -> MediaTypeHeaderOutput {
            MediaTypeHeaderOutput { json: self.json }
        }
    }
}
impl MediaTypeHeaderOutput {
    /// Creates a new builder-style object to manufacture [`MediaTypeHeaderOutput`](crate::output::MediaTypeHeaderOutput)
    pub fn builder() -> crate::output::media_type_header_output::Builder {
        crate::output::media_type_header_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimestampFormatHeadersOutput {
    pub member_epoch_seconds: ::std::option::Option<Instant>,
    pub member_http_date: ::std::option::Option<Instant>,
    pub member_date_time: ::std::option::Option<Instant>,
    pub default_format: ::std::option::Option<Instant>,
    pub target_epoch_seconds: ::std::option::Option<Instant>,
    pub target_http_date: ::std::option::Option<Instant>,
    pub target_date_time: ::std::option::Option<Instant>,
}
/// See [`TimestampFormatHeadersOutput`](crate::output::TimestampFormatHeadersOutput)
pub mod timestamp_format_headers_output {

    use crate::output::TimestampFormatHeadersOutput;
    use smithy_types::Instant;
    /// A builder for [`TimestampFormatHeadersOutput`](crate::output::TimestampFormatHeadersOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        member_epoch_seconds: ::std::option::Option<Instant>,
        member_http_date: ::std::option::Option<Instant>,
        member_date_time: ::std::option::Option<Instant>,
        default_format: ::std::option::Option<Instant>,
        target_epoch_seconds: ::std::option::Option<Instant>,
        target_http_date: ::std::option::Option<Instant>,
        target_date_time: ::std::option::Option<Instant>,
    }
    impl Builder {
        pub fn member_epoch_seconds(mut self, inp: Instant) -> Self {
            self.member_epoch_seconds = Some(inp);
            self
        }
        pub fn member_http_date(mut self, inp: Instant) -> Self {
            self.member_http_date = Some(inp);
            self
        }
        pub fn member_date_time(mut self, inp: Instant) -> Self {
            self.member_date_time = Some(inp);
            self
        }
        pub fn default_format(mut self, inp: Instant) -> Self {
            self.default_format = Some(inp);
            self
        }
        pub fn target_epoch_seconds(mut self, inp: Instant) -> Self {
            self.target_epoch_seconds = Some(inp);
            self
        }
        pub fn target_http_date(mut self, inp: Instant) -> Self {
            self.target_http_date = Some(inp);
            self
        }
        pub fn target_date_time(mut self, inp: Instant) -> Self {
            self.target_date_time = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`TimestampFormatHeadersOutput`](crate::output::TimestampFormatHeadersOutput)
        pub fn build(self) -> TimestampFormatHeadersOutput {
            TimestampFormatHeadersOutput {
                member_epoch_seconds: self.member_epoch_seconds,
                member_http_date: self.member_http_date,
                member_date_time: self.member_date_time,
                default_format: self.default_format,
                target_epoch_seconds: self.target_epoch_seconds,
                target_http_date: self.target_http_date,
                target_date_time: self.target_date_time,
            }
        }
    }
}
impl TimestampFormatHeadersOutput {
    /// Creates a new builder-style object to manufacture [`TimestampFormatHeadersOutput`](crate::output::TimestampFormatHeadersOutput)
    pub fn builder() -> crate::output::timestamp_format_headers_output::Builder {
        crate::output::timestamp_format_headers_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NullAndEmptyHeadersServerOutput {
    pub a: ::std::option::Option<::std::string::String>,
    pub b: ::std::option::Option<::std::string::String>,
    pub c: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
/// See [`NullAndEmptyHeadersServerOutput`](crate::output::NullAndEmptyHeadersServerOutput)
pub mod null_and_empty_headers_server_output {

    use crate::output::NullAndEmptyHeadersServerOutput;
    /// A builder for [`NullAndEmptyHeadersServerOutput`](crate::output::NullAndEmptyHeadersServerOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        a: ::std::option::Option<::std::string::String>,
        b: ::std::option::Option<::std::string::String>,
        c: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        pub fn a(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.a = Some(inp.into());
            self
        }
        pub fn b(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.b = Some(inp.into());
            self
        }
        pub fn c(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.c = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`NullAndEmptyHeadersServerOutput`](crate::output::NullAndEmptyHeadersServerOutput)
        pub fn build(self) -> NullAndEmptyHeadersServerOutput {
            NullAndEmptyHeadersServerOutput {
                a: self.a,
                b: self.b,
                c: self.c,
            }
        }
    }
}
impl NullAndEmptyHeadersServerOutput {
    /// Creates a new builder-style object to manufacture [`NullAndEmptyHeadersServerOutput`](crate::output::NullAndEmptyHeadersServerOutput)
    pub fn builder() -> crate::output::null_and_empty_headers_server_output::Builder {
        crate::output::null_and_empty_headers_server_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NullAndEmptyHeadersClientOutput {
    pub a: ::std::option::Option<::std::string::String>,
    pub b: ::std::option::Option<::std::string::String>,
    pub c: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
/// See [`NullAndEmptyHeadersClientOutput`](crate::output::NullAndEmptyHeadersClientOutput)
pub mod null_and_empty_headers_client_output {

    use crate::output::NullAndEmptyHeadersClientOutput;
    /// A builder for [`NullAndEmptyHeadersClientOutput`](crate::output::NullAndEmptyHeadersClientOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        a: ::std::option::Option<::std::string::String>,
        b: ::std::option::Option<::std::string::String>,
        c: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        pub fn a(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.a = Some(inp.into());
            self
        }
        pub fn b(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.b = Some(inp.into());
            self
        }
        pub fn c(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.c = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`NullAndEmptyHeadersClientOutput`](crate::output::NullAndEmptyHeadersClientOutput)
        pub fn build(self) -> NullAndEmptyHeadersClientOutput {
            NullAndEmptyHeadersClientOutput {
                a: self.a,
                b: self.b,
                c: self.c,
            }
        }
    }
}
impl NullAndEmptyHeadersClientOutput {
    /// Creates a new builder-style object to manufacture [`NullAndEmptyHeadersClientOutput`](crate::output::NullAndEmptyHeadersClientOutput)
    pub fn builder() -> crate::output::null_and_empty_headers_client_output::Builder {
        crate::output::null_and_empty_headers_client_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputAndOutputWithHeadersOutput {
    pub header_string: ::std::option::Option<::std::string::String>,
    pub header_byte: ::std::option::Option<i8>,
    pub header_short: ::std::option::Option<i16>,
    pub header_integer: ::std::option::Option<i32>,
    pub header_long: ::std::option::Option<i64>,
    pub header_float: ::std::option::Option<f32>,
    pub header_double: ::std::option::Option<f64>,
    pub header_true_bool: ::std::option::Option<bool>,
    pub header_false_bool: ::std::option::Option<bool>,
    pub header_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub header_string_set:
        ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
    pub header_integer_list: ::std::option::Option<::std::vec::Vec<i32>>,
    pub header_boolean_list: ::std::option::Option<::std::vec::Vec<bool>>,
    pub header_timestamp_list: ::std::option::Option<::std::vec::Vec<Instant>>,
    pub header_enum: ::std::option::Option<FooEnum>,
    pub header_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
}
/// See [`InputAndOutputWithHeadersOutput`](crate::output::InputAndOutputWithHeadersOutput)
pub mod input_and_output_with_headers_output {

    use crate::model::FooEnum;
    use crate::output::InputAndOutputWithHeadersOutput;
    use smithy_types::Instant;
    /// A builder for [`InputAndOutputWithHeadersOutput`](crate::output::InputAndOutputWithHeadersOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        header_string: ::std::option::Option<::std::string::String>,
        header_byte: ::std::option::Option<i8>,
        header_short: ::std::option::Option<i16>,
        header_integer: ::std::option::Option<i32>,
        header_long: ::std::option::Option<i64>,
        header_float: ::std::option::Option<f32>,
        header_double: ::std::option::Option<f64>,
        header_true_bool: ::std::option::Option<bool>,
        header_false_bool: ::std::option::Option<bool>,
        header_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        header_string_set:
            ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
        header_integer_list: ::std::option::Option<::std::vec::Vec<i32>>,
        header_boolean_list: ::std::option::Option<::std::vec::Vec<bool>>,
        header_timestamp_list: ::std::option::Option<::std::vec::Vec<Instant>>,
        header_enum: ::std::option::Option<FooEnum>,
        header_enum_list: ::std::option::Option<::std::vec::Vec<FooEnum>>,
    }
    impl Builder {
        pub fn header_string(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.header_string = Some(inp.into());
            self
        }
        pub fn header_byte(mut self, inp: i8) -> Self {
            self.header_byte = Some(inp);
            self
        }
        pub fn header_short(mut self, inp: i16) -> Self {
            self.header_short = Some(inp);
            self
        }
        pub fn header_integer(mut self, inp: i32) -> Self {
            self.header_integer = Some(inp);
            self
        }
        pub fn header_long(mut self, inp: i64) -> Self {
            self.header_long = Some(inp);
            self
        }
        pub fn header_float(mut self, inp: f32) -> Self {
            self.header_float = Some(inp);
            self
        }
        pub fn header_double(mut self, inp: f64) -> Self {
            self.header_double = Some(inp);
            self
        }
        pub fn header_true_bool(mut self, inp: bool) -> Self {
            self.header_true_bool = Some(inp);
            self
        }
        pub fn header_false_bool(mut self, inp: bool) -> Self {
            self.header_false_bool = Some(inp);
            self
        }
        pub fn header_string_list(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.header_string_list = Some(inp);
            self
        }
        pub fn header_string_set(
            mut self,
            inp: ::std::collections::BTreeSet<::std::string::String>,
        ) -> Self {
            self.header_string_set = Some(inp);
            self
        }
        pub fn header_integer_list(mut self, inp: ::std::vec::Vec<i32>) -> Self {
            self.header_integer_list = Some(inp);
            self
        }
        pub fn header_boolean_list(mut self, inp: ::std::vec::Vec<bool>) -> Self {
            self.header_boolean_list = Some(inp);
            self
        }
        pub fn header_timestamp_list(mut self, inp: ::std::vec::Vec<Instant>) -> Self {
            self.header_timestamp_list = Some(inp);
            self
        }
        pub fn header_enum(mut self, inp: FooEnum) -> Self {
            self.header_enum = Some(inp);
            self
        }
        pub fn header_enum_list(mut self, inp: ::std::vec::Vec<FooEnum>) -> Self {
            self.header_enum_list = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`InputAndOutputWithHeadersOutput`](crate::output::InputAndOutputWithHeadersOutput)
        pub fn build(self) -> InputAndOutputWithHeadersOutput {
            InputAndOutputWithHeadersOutput {
                header_string: self.header_string,
                header_byte: self.header_byte,
                header_short: self.header_short,
                header_integer: self.header_integer,
                header_long: self.header_long,
                header_float: self.header_float,
                header_double: self.header_double,
                header_true_bool: self.header_true_bool,
                header_false_bool: self.header_false_bool,
                header_string_list: self.header_string_list,
                header_string_set: self.header_string_set,
                header_integer_list: self.header_integer_list,
                header_boolean_list: self.header_boolean_list,
                header_timestamp_list: self.header_timestamp_list,
                header_enum: self.header_enum,
                header_enum_list: self.header_enum_list,
            }
        }
    }
}
impl InputAndOutputWithHeadersOutput {
    /// Creates a new builder-style object to manufacture [`InputAndOutputWithHeadersOutput`](crate::output::InputAndOutputWithHeadersOutput)
    pub fn builder() -> crate::output::input_and_output_with_headers_output::Builder {
        crate::output::input_and_output_with_headers_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmptyInputAndEmptyOutputOutput {}
/// See [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
pub mod empty_input_and_empty_output_output {

    use crate::output::EmptyInputAndEmptyOutputOutput;
    /// A builder for [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
        pub fn build(self) -> EmptyInputAndEmptyOutputOutput {
            EmptyInputAndEmptyOutputOutput {}
        }
    }
}
impl EmptyInputAndEmptyOutputOutput {
    /// Creates a new builder-style object to manufacture [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
    pub fn builder() -> crate::output::empty_input_and_empty_output_output::Builder {
        crate::output::empty_input_and_empty_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoInputAndOutputOutput {}
/// See [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
pub mod no_input_and_output_output {

    use crate::output::NoInputAndOutputOutput;
    /// A builder for [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
        pub fn build(self) -> NoInputAndOutputOutput {
            NoInputAndOutputOutput {}
        }
    }
}
impl NoInputAndOutputOutput {
    /// Creates a new builder-style object to manufacture [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
    pub fn builder() -> crate::output::no_input_and_output_output::Builder {
        crate::output::no_input_and_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoInputAndNoOutputOutput {}
/// See [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
pub mod no_input_and_no_output_output {

    use crate::output::NoInputAndNoOutputOutput;
    /// A builder for [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
        pub fn build(self) -> NoInputAndNoOutputOutput {
            NoInputAndNoOutputOutput {}
        }
    }
}
impl NoInputAndNoOutputOutput {
    /// Creates a new builder-style object to manufacture [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
    pub fn builder() -> crate::output::no_input_and_no_output_output::Builder {
        crate::output::no_input_and_no_output_output::Builder::default()
    }
}
