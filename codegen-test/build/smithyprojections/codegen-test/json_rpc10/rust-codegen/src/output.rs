// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::MyUnion;
/// A shared structure that contains a single union member.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JsonUnionsOutput {
    /// A union with a representative set of types for members.
    pub contents: ::std::option::Option<MyUnion>,
}
/// See [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
pub mod json_unions_output {

    use crate::model::MyUnion;
    use crate::output::JsonUnionsOutput;
    /// A builder for [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        contents: ::std::option::Option<MyUnion>,
    }
    impl Builder {
        /// A union with a representative set of types for members.
        pub fn contents(mut self, inp: MyUnion) -> Self {
            self.contents = Some(inp);
            self
        }
        /// Consumes the builder and constructs a [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
        pub fn build(self) -> JsonUnionsOutput {
            JsonUnionsOutput {
                contents: self.contents,
            }
        }
    }
}
impl JsonUnionsOutput {
    /// Creates a new builder-style object to manufacture [`JsonUnionsOutput`](crate::output::JsonUnionsOutput)
    pub fn builder() -> crate::output::json_unions_output::Builder {
        crate::output::json_unions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GreetingWithErrorsOutput {
    pub greeting: ::std::option::Option<::std::string::String>,
}
/// See [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
pub mod greeting_with_errors_output {

    use crate::output::GreetingWithErrorsOutput;
    /// A builder for [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        greeting: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn greeting(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.greeting = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
        pub fn build(self) -> GreetingWithErrorsOutput {
            GreetingWithErrorsOutput {
                greeting: self.greeting,
            }
        }
    }
}
impl GreetingWithErrorsOutput {
    /// Creates a new builder-style object to manufacture [`GreetingWithErrorsOutput`](crate::output::GreetingWithErrorsOutput)
    pub fn builder() -> crate::output::greeting_with_errors_output::Builder {
        crate::output::greeting_with_errors_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmptyInputAndEmptyOutputOutput {}
/// See [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
pub mod empty_input_and_empty_output_output {

    use crate::output::EmptyInputAndEmptyOutputOutput;
    /// A builder for [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
        pub fn build(self) -> EmptyInputAndEmptyOutputOutput {
            EmptyInputAndEmptyOutputOutput {}
        }
    }
}
impl EmptyInputAndEmptyOutputOutput {
    /// Creates a new builder-style object to manufacture [`EmptyInputAndEmptyOutputOutput`](crate::output::EmptyInputAndEmptyOutputOutput)
    pub fn builder() -> crate::output::empty_input_and_empty_output_output::Builder {
        crate::output::empty_input_and_empty_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoInputAndOutputOutput {}
/// See [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
pub mod no_input_and_output_output {

    use crate::output::NoInputAndOutputOutput;
    /// A builder for [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
        pub fn build(self) -> NoInputAndOutputOutput {
            NoInputAndOutputOutput {}
        }
    }
}
impl NoInputAndOutputOutput {
    /// Creates a new builder-style object to manufacture [`NoInputAndOutputOutput`](crate::output::NoInputAndOutputOutput)
    pub fn builder() -> crate::output::no_input_and_output_output::Builder {
        crate::output::no_input_and_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NoInputAndNoOutputOutput {}
/// See [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
pub mod no_input_and_no_output_output {

    use crate::output::NoInputAndNoOutputOutput;
    /// A builder for [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
        pub fn build(self) -> NoInputAndNoOutputOutput {
            NoInputAndNoOutputOutput {}
        }
    }
}
impl NoInputAndNoOutputOutput {
    /// Creates a new builder-style object to manufacture [`NoInputAndNoOutputOutput`](crate::output::NoInputAndNoOutputOutput)
    pub fn builder() -> crate::output::no_input_and_no_output_output::Builder {
        crate::output::no_input_and_no_output_output::Builder::default()
    }
}
