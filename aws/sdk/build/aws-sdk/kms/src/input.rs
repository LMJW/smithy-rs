// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::model::AlgorithmSpec;
use crate::model::CustomerMasterKeySpec;
use crate::model::DataKeyPairSpec;
use crate::model::DataKeySpec;
use crate::model::EncryptionAlgorithmSpec;
use crate::model::ExpirationModelType;
use crate::model::GrantConstraints;
use crate::model::GrantOperation;
use crate::model::KeyUsageType;
use crate::model::MessageType;
use crate::model::OriginType;
use crate::model::SigningAlgorithmSpec;
use crate::model::Tag;
use crate::model::WrappingKeySpec;
use crate::serializer::CancelKeyDeletionInputBody;
use crate::serializer::ConnectCustomKeyStoreInputBody;
use crate::serializer::CreateAliasInputBody;
use crate::serializer::CreateCustomKeyStoreInputBody;
use crate::serializer::CreateGrantInputBody;
use crate::serializer::CreateKeyInputBody;
use crate::serializer::DecryptInputBody;
use crate::serializer::DeleteAliasInputBody;
use crate::serializer::DeleteCustomKeyStoreInputBody;
use crate::serializer::DeleteImportedKeyMaterialInputBody;
use crate::serializer::DescribeCustomKeyStoresInputBody;
use crate::serializer::DescribeKeyInputBody;
use crate::serializer::DisableKeyInputBody;
use crate::serializer::DisableKeyRotationInputBody;
use crate::serializer::DisconnectCustomKeyStoreInputBody;
use crate::serializer::EnableKeyInputBody;
use crate::serializer::EnableKeyRotationInputBody;
use crate::serializer::EncryptInputBody;
use crate::serializer::GenerateDataKeyInputBody;
use crate::serializer::GenerateDataKeyPairInputBody;
use crate::serializer::GenerateDataKeyPairWithoutPlaintextInputBody;
use crate::serializer::GenerateDataKeyWithoutPlaintextInputBody;
use crate::serializer::GenerateRandomInputBody;
use crate::serializer::GetKeyPolicyInputBody;
use crate::serializer::GetKeyRotationStatusInputBody;
use crate::serializer::GetParametersForImportInputBody;
use crate::serializer::GetPublicKeyInputBody;
use crate::serializer::ImportKeyMaterialInputBody;
use crate::serializer::ListAliasesInputBody;
use crate::serializer::ListGrantsInputBody;
use crate::serializer::ListKeyPoliciesInputBody;
use crate::serializer::ListKeysInputBody;
use crate::serializer::ListResourceTagsInputBody;
use crate::serializer::ListRetirableGrantsInputBody;
use crate::serializer::PutKeyPolicyInputBody;
use crate::serializer::ReEncryptInputBody;
use crate::serializer::RetireGrantInputBody;
use crate::serializer::RevokeGrantInputBody;
use crate::serializer::ScheduleKeyDeletionInputBody;
use crate::serializer::SignInputBody;
use crate::serializer::TagResourceInputBody;
use crate::serializer::UntagResourceInputBody;
use crate::serializer::UpdateAliasInputBody;
use crate::serializer::UpdateCustomKeyStoreInputBody;
use crate::serializer::UpdateKeyDescriptionInputBody;
use crate::serializer::VerifyInputBody;
use smithy_types::Blob;
use smithy_types::Instant;
/// See [`CancelKeyDeletionInput`](crate::input::CancelKeyDeletionInput)
pub mod cancel_key_deletion_input {

    use crate::input::CancelKeyDeletionInput;
    use crate::operation::CancelKeyDeletion;
    /// A builder for [`CancelKeyDeletionInput`](crate::input::CancelKeyDeletionInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier for the customer master key (CMK) for which to cancel
        /// deletion.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CancelKeyDeletion`](crate::operation::CancelKeyDeletion)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CancelKeyDeletion, ()> {
            let op = CancelKeyDeletion::new(CancelKeyDeletionInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("CancelKeyDeletion", "kms"),
            )
        }
    }
}
impl CancelKeyDeletionInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.CancelKeyDeletion")
    }
    fn body(&self) -> CancelKeyDeletionInputBody {
        CancelKeyDeletionInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CancelKeyDeletionInput`](crate::input::CancelKeyDeletionInput)
    pub fn builder() -> crate::input::cancel_key_deletion_input::Builder {
        crate::input::cancel_key_deletion_input::Builder::default()
    }
}

/// See [`ConnectCustomKeyStoreInput`](crate::input::ConnectCustomKeyStoreInput)
pub mod connect_custom_key_store_input {

    use crate::input::ConnectCustomKeyStoreInput;
    use crate::operation::ConnectCustomKeyStore;
    /// A builder for [`ConnectCustomKeyStoreInput`](crate::input::ConnectCustomKeyStoreInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Enter the key store ID of the custom key store that you want to connect.
        /// To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ConnectCustomKeyStore`](crate::operation::ConnectCustomKeyStore)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ConnectCustomKeyStore, ()> {
            let op = ConnectCustomKeyStore::new(ConnectCustomKeyStoreInput {
                custom_key_store_id: self.custom_key_store_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ConnectCustomKeyStore", "kms"),
            )
        }
    }
}
impl ConnectCustomKeyStoreInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ConnectCustomKeyStore")
    }
    fn body(&self) -> ConnectCustomKeyStoreInputBody {
        ConnectCustomKeyStoreInputBody {
            custom_key_store_id: &self.custom_key_store_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ConnectCustomKeyStoreInput`](crate::input::ConnectCustomKeyStoreInput)
    pub fn builder() -> crate::input::connect_custom_key_store_input::Builder {
        crate::input::connect_custom_key_store_input::Builder::default()
    }
}

/// See [`CreateAliasInput`](crate::input::CreateAliasInput)
pub mod create_alias_input {

    use crate::input::CreateAliasInput;
    use crate::operation::CreateAlias;
    /// A builder for [`CreateAliasInput`](crate::input::CreateAliasInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        alias_name: ::std::option::Option<::std::string::String>,
        target_key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Specifies the alias name. This value must begin with <code>alias/</code> followed by a
        /// name, such as <code>alias/ExampleAlias</code>. </p>
        /// <p>The <code>AliasName</code> value must be string of 1-256 characters. It can contain only alphanumeric characters,
        /// forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <code>alias/aws/</code>. The <code>alias/aws/</code> prefix is reserved
        /// for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMKs</a>.</p>
        pub fn alias_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.alias_name = Some(inp.into());
            self
        }
        /// <p>Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a>. The CMK must be
        /// in the same AWS Region. </p>
        /// <p>A valid CMK ID is required. If you supply a null or empty string value, this operation
        /// returns an error.</p>
        /// <p>For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and
        /// ARN</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn target_key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.target_key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateAlias`](crate::operation::CreateAlias)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateAlias, ()> {
            let op = CreateAlias::new(CreateAliasInput {
                alias_name: self.alias_name,
                target_key_id: self.target_key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("CreateAlias", "kms"),
            )
        }
    }
}
impl CreateAliasInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.CreateAlias")
    }
    fn body(&self) -> CreateAliasInputBody {
        CreateAliasInputBody {
            alias_name: &self.alias_name,
            target_key_id: &self.target_key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateAliasInput`](crate::input::CreateAliasInput)
    pub fn builder() -> crate::input::create_alias_input::Builder {
        crate::input::create_alias_input::Builder::default()
    }
}

/// See [`CreateCustomKeyStoreInput`](crate::input::CreateCustomKeyStoreInput)
pub mod create_custom_key_store_input {

    use crate::input::CreateCustomKeyStoreInput;
    use crate::operation::CreateCustomKeyStore;
    /// A builder for [`CreateCustomKeyStoreInput`](crate::input::CreateCustomKeyStoreInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_name: ::std::option::Option<::std::string::String>,
        cloud_hsm_cluster_id: ::std::option::Option<::std::string::String>,
        trust_anchor_certificate: ::std::option::Option<::std::string::String>,
        key_store_password: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Specifies a friendly name for the custom key store. The name must be unique in your AWS
        /// account.</p>
        pub fn custom_key_store_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_name = Some(inp.into());
            self
        }
        /// <p>Identifies the AWS CloudHSM cluster for the custom key store. Enter the cluster ID of any active
        /// AWS CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID,
        /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
        pub fn cloud_hsm_cluster_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.cloud_hsm_cluster_id = Some(inp.into());
            self
        }
        /// <p>Enter the content of the trust anchor certificate for the cluster. This is the content of
        /// the <code>customerCA.crt</code> file that you created when you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html">initialized the cluster</a>.</p>
        pub fn trust_anchor_certificate(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.trust_anchor_certificate = Some(inp.into());
            self
        }
        /// <p>Enter the password of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
        /// <code>kmsuser</code> crypto user
        /// (CU) account</a> in the specified AWS CloudHSM cluster. AWS KMS logs into the cluster as this
        /// user to manage key material on your behalf.</p>
        /// <p>The password must be a string of 7 to 32 characters. Its value is case sensitive.</p>
        /// <p>This parameter tells AWS KMS the <code>kmsuser</code> account password; it does not change
        /// the password in the AWS CloudHSM cluster.</p>
        pub fn key_store_password(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_store_password = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateCustomKeyStore`](crate::operation::CreateCustomKeyStore)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateCustomKeyStore, ()> {
            let op = CreateCustomKeyStore::new(CreateCustomKeyStoreInput {
                custom_key_store_name: self.custom_key_store_name,
                cloud_hsm_cluster_id: self.cloud_hsm_cluster_id,
                trust_anchor_certificate: self.trust_anchor_certificate,
                key_store_password: self.key_store_password,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("CreateCustomKeyStore", "kms"),
            )
        }
    }
}
impl CreateCustomKeyStoreInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.CreateCustomKeyStore")
    }
    fn body(&self) -> CreateCustomKeyStoreInputBody {
        CreateCustomKeyStoreInputBody {
            custom_key_store_name: &self.custom_key_store_name,
            cloud_hsm_cluster_id: &self.cloud_hsm_cluster_id,
            trust_anchor_certificate: &self.trust_anchor_certificate,
            key_store_password: &self.key_store_password,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateCustomKeyStoreInput`](crate::input::CreateCustomKeyStoreInput)
    pub fn builder() -> crate::input::create_custom_key_store_input::Builder {
        crate::input::create_custom_key_store_input::Builder::default()
    }
}

/// See [`CreateGrantInput`](crate::input::CreateGrantInput)
pub mod create_grant_input {

    use crate::input::CreateGrantInput;
    use crate::model::GrantConstraints;
    use crate::model::GrantOperation;
    use crate::operation::CreateGrant;
    /// A builder for [`CreateGrantInput`](crate::input::CreateGrantInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        grantee_principal: ::std::option::Option<::std::string::String>,
        retiring_principal: ::std::option::Option<::std::string::String>,
        operations: ::std::option::Option<::std::vec::Vec<GrantOperation>>,
        constraints: ::std::option::Option<GrantConstraints>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier for the customer master key (CMK) that the grant applies to.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
        /// different AWS account, you must use the key ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>The principal that is given permission to perform the operations that the grant
        /// permits.</p>
        /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
        /// principal. Valid AWS principals include AWS accounts (root), IAM users, IAM roles, federated
        /// users, and assumed role users. For examples of the ARN syntax to use for specifying a
        /// principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access
        /// Management (IAM)</a> in the Example ARNs section of the <i>AWS General
        /// Reference</i>.</p>
        pub fn grantee_principal(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.grantee_principal = Some(inp.into());
            self
        }
        /// <p>The principal that is given permission to retire the grant by using <a>RetireGrant</a> operation.</p>
        /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
        /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
        /// assumed role users. For examples of the ARN syntax to use for specifying a principal, see
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access Management (IAM)</a> in the Example ARNs section of the
        /// <i>AWS General Reference</i>.</p>
        pub fn retiring_principal(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.retiring_principal = Some(inp.into());
            self
        }
        /// <p>A list of operations that the grant permits.</p>
        pub fn operations(mut self, inp: ::std::vec::Vec<GrantOperation>) -> Self {
            self.operations = Some(inp);
            self
        }
        /// <p>Allows a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operation</a> only when the encryption context matches or includes the encryption
        /// context specified in this structure. For more information about encryption context, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>
        /// <i>AWS Key Management Service Developer Guide</i>
        /// </i>.</p>
        /// <p>Grant constraints are not applied to operations that do not support an encryption context,
        /// such as cryptographic operations with asymmetric CMKs and management operations, such as
        /// <a>DescribeKey</a> or <a>RetireGrant</a>.</p>
        pub fn constraints(mut self, inp: GrantConstraints) -> Self {
            self.constraints = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// <p>A friendly name for the grant. Use this value to prevent the unintended
        /// creation of duplicate grants when retrying this request.</p>
        /// <p>When this value is absent, all <code>CreateGrant</code> requests result in a new grant
        /// with a unique <code>GrantId</code> even if all the supplied parameters are identical. This can
        /// result in unintended duplicates when you retry the <code>CreateGrant</code> request.</p>
        /// <p>When this value is present, you can retry a <code>CreateGrant</code> request with
        /// identical parameters; if the grant already exists, the original <code>GrantId</code> is
        /// returned without creating a new grant. Note that the returned grant token is unique with every
        /// <code>CreateGrant</code> request, even when a duplicate <code>GrantId</code> is returned.
        /// All grant tokens for the same grant ID can be used interchangeably.</p>
        pub fn name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateGrant`](crate::operation::CreateGrant)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateGrant, ()> {
            let op = CreateGrant::new(CreateGrantInput {
                key_id: self.key_id,
                grantee_principal: self.grantee_principal,
                retiring_principal: self.retiring_principal,
                operations: self.operations,
                constraints: self.constraints,
                grant_tokens: self.grant_tokens,
                name: self.name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("CreateGrant", "kms"),
            )
        }
    }
}
impl CreateGrantInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.CreateGrant")
    }
    fn body(&self) -> CreateGrantInputBody {
        CreateGrantInputBody {
            key_id: &self.key_id,
            grantee_principal: &self.grantee_principal,
            retiring_principal: &self.retiring_principal,
            operations: &self.operations,
            constraints: &self.constraints,
            grant_tokens: &self.grant_tokens,
            name: &self.name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateGrantInput`](crate::input::CreateGrantInput)
    pub fn builder() -> crate::input::create_grant_input::Builder {
        crate::input::create_grant_input::Builder::default()
    }
}

/// See [`CreateKeyInput`](crate::input::CreateKeyInput)
pub mod create_key_input {

    use crate::input::CreateKeyInput;
    use crate::model::CustomerMasterKeySpec;
    use crate::model::KeyUsageType;
    use crate::model::OriginType;
    use crate::model::Tag;
    use crate::operation::CreateKey;
    /// A builder for [`CreateKeyInput`](crate::input::CreateKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        policy: ::std::option::Option<::std::string::String>,
        description: ::std::option::Option<::std::string::String>,
        key_usage: ::std::option::Option<KeyUsageType>,
        customer_master_key_spec: ::std::option::Option<CustomerMasterKeySpec>,
        origin: ::std::option::Option<OriginType>,
        custom_key_store_id: ::std::option::Option<::std::string::String>,
        bypass_policy_lockout_safety_check: ::std::option::Option<bool>,
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    }
    impl Builder {
        /// <p>The key policy to attach to the CMK.</p>
        /// <p>If you provide a key policy, it must meet the following criteria:</p>
        /// <ul>
        /// <li>
        /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
        /// must allow the principal that is making the <code>CreateKey</code> request to make a
        /// subsequent <a>PutKeyPolicy</a> request on the CMK. This reduces the risk that
        /// the CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>
        /// <i>AWS Key Management Service Developer Guide</i>
        /// </i>.</p>
        /// </li>
        /// <li>
        /// <p>Each statement in the key policy must contain one or more principals. The principals
        /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
        /// (for example, an IAM user or role), you might need to enforce a delay before including the
        /// new principal in a key policy because the new principal might not be immediately visible
        /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
        /// Identity and Access Management User Guide</i>.</p>
        /// </li>
        /// </ul>
        /// <p>If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK. For
        /// more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">Default Key Policy</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>. </p>
        /// <p>The key policy size quota is 32 kilobytes (32768 bytes).</p>
        /// <p>For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i>
        /// <i>IAM User Guide</i>
        /// </i>.</p>
        pub fn policy(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.policy = Some(inp.into());
            self
        }
        /// <p>A description of the CMK.</p>
        /// <p>Use a description that helps you decide whether the CMK is appropriate for a task.</p>
        pub fn description(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        /// <p>Determines the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> for which you can use the CMK. The default value
        /// is <code>ENCRYPT_DECRYPT</code>. This parameter is required only for asymmetric CMKs. You
        /// can't change the <code>KeyUsage</code> value after the CMK is created.</p>
        /// <p>Select only one valid value.</p>
        /// <ul>
        /// <li>
        /// <p>For symmetric CMKs, omit the parameter or specify <code>ENCRYPT_DECRYPT</code>.</p>
        /// </li>
        /// <li>
        /// <p>For asymmetric CMKs with RSA key material, specify <code>ENCRYPT_DECRYPT</code> or
        /// <code>SIGN_VERIFY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For asymmetric CMKs with ECC key material, specify <code>SIGN_VERIFY</code>.</p>
        /// </li>
        /// </ul>
        pub fn key_usage(mut self, inp: KeyUsageType) -> Self {
            self.key_usage = Some(inp);
            self
        }
        /// <p>Specifies the type of CMK to create. The default value, <code>SYMMETRIC_DEFAULT</code>,
        /// creates a CMK with a 256-bit symmetric key for encryption and decryption. For help choosing a
        /// key spec for your CMK, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html">How to Choose Your CMK
        /// Configuration</a> in the <i>AWS Key Management Service Developer
        /// Guide</i>.</p>
        /// <p>The <code>CustomerMasterKeySpec</code> determines whether the CMK contains a symmetric key
        /// or an asymmetric key pair. It also determines the encryption algorithms or signing algorithms
        /// that the CMK supports. You can't change the <code>CustomerMasterKeySpec</code> after the CMK
        /// is created. To further restrict the algorithms that can be used with the CMK, use a condition
        /// key in its key policy or IAM policy. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm">kms:EncryptionAlgorithm</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm">kms:Signing Algorithm</a> in the <i>AWS Key Management Service Developer
        /// Guide</i>.</p>
        /// <important>
        /// <p>
        /// <a href="http://aws.amazon.com/kms/features/#AWS_Service_Integration">AWS services that
        /// are integrated with AWS KMS</a> use symmetric CMKs to protect your data. These
        /// services do not support asymmetric CMKs. For help determining whether a CMK is symmetric or
        /// asymmetric, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html">Identifying Symmetric and Asymmetric
        /// CMKs</a> in the <i>AWS Key Management Service Developer
        /// Guide</i>.</p>
        /// </important>
        /// <p>AWS KMS supports the following key specs for CMKs:</p>
        /// <ul>
        /// <li>
        /// <p>Symmetric key (default)</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SYMMETRIC_DEFAULT</code> (AES-256-GCM)</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>Asymmetric RSA key pairs</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>RSA_2048</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RSA_3072</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RSA_4096</code>
        /// </p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>Asymmetric NIST-recommended elliptic curve key pairs</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ECC_NIST_P256</code> (secp256r1)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ECC_NIST_P384</code> (secp384r1)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ECC_NIST_P521</code> (secp521r1)</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>Other asymmetric elliptic curve key pairs</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ECC_SECG_P256K1</code> (secp256k1), commonly used for
        /// cryptocurrencies.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn customer_master_key_spec(mut self, inp: CustomerMasterKeySpec) -> Self {
            self.customer_master_key_spec = Some(inp);
            self
        }
        /// <p>The source of the key material for the CMK. You cannot change the origin after you create
        /// the CMK. The default is <code>AWS_KMS</code>, which means AWS KMS creates the key
        /// material.</p>
        /// <p>When the parameter value is <code>EXTERNAL</code>, AWS KMS creates a CMK without key
        /// material so that you can import key material from your existing key management infrastructure.
        /// For more information about importing key material into AWS KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing Key Material</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>. This value is valid only for symmetric CMKs.</p>
        /// <p>When the parameter value is <code>AWS_CLOUDHSM</code>, AWS KMS creates the CMK in an AWS KMS
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and creates its key material in the associated AWS CloudHSM cluster. You must also
        /// use the <code>CustomKeyStoreId</code> parameter to identify the custom key store. This value
        /// is valid only for symmetric CMKs.</p>
        pub fn origin(mut self, inp: OriginType) -> Self {
            self.origin = Some(inp);
            self
        }
        /// <p>Creates the CMK in the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and the key material in its associated
        /// AWS CloudHSM cluster. To create a CMK in a custom key store, you must also specify the
        /// <code>Origin</code> parameter with a value of <code>AWS_CLOUDHSM</code>. The AWS CloudHSM cluster
        /// that is associated with the custom key store must have at least two active HSMs, each in a
        /// different Availability Zone in the Region.</p>
        /// <p>This parameter is valid only for symmetric CMKs. You cannot create an asymmetric CMK in a
        /// custom key store.</p>
        /// <p>To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        /// <p>The response includes the custom key store ID and the ID of the AWS CloudHSM cluster.</p>
        /// <p>This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">Custom Key Store feature</a> feature in AWS KMS, which
        /// combines the convenience and extensive integration of AWS KMS with the isolation and control of a
        /// single-tenant key store.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
        /// <important>
        /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
        /// set this value to true indiscriminately.</p>
        /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>
        /// <i>AWS Key Management Service Developer Guide</i>
        /// </i>.</p>
        /// </important>
        /// <p>Use this parameter only when you include a policy in the request and you intend to prevent
        /// the principal that is making the request from making a subsequent <a>PutKeyPolicy</a> request on the CMK.</p>
        /// <p>The default value is false.</p>
        pub fn bypass_policy_lockout_safety_check(mut self, inp: bool) -> Self {
            self.bypass_policy_lockout_safety_check = Some(inp);
            self
        }
        /// <p>One or more tags. Each tag consists of a tag key and a tag value. Both the tag key and the
        /// tag value are required, but the tag value can be an empty (null) string. </p>
        /// <p>When you add tags to an AWS resource, AWS generates a cost allocation
        /// report with usage and costs aggregated by tags. For information about adding, changing, deleting and listing tags for CMKs,
        /// see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging Keys</a>.</p>
        /// <p>Use this parameter to tag the CMK when it is created. To add tags to an
        /// existing CMK, use the <a>TagResource</a> operation.</p>
        /// <p>To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a> permission in an IAM policy.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`CreateKey`](crate::operation::CreateKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<CreateKey, ()> {
            let op = CreateKey::new(CreateKeyInput {
                policy: self.policy,
                description: self.description,
                key_usage: self.key_usage,
                customer_master_key_spec: self.customer_master_key_spec,
                origin: self.origin,
                custom_key_store_id: self.custom_key_store_id,
                bypass_policy_lockout_safety_check: self
                    .bypass_policy_lockout_safety_check
                    .unwrap_or_default(),
                tags: self.tags,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("CreateKey", "kms"))
        }
    }
}
impl CreateKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.CreateKey")
    }
    fn body(&self) -> CreateKeyInputBody {
        CreateKeyInputBody {
            policy: &self.policy,
            description: &self.description,
            key_usage: &self.key_usage,
            customer_master_key_spec: &self.customer_master_key_spec,
            origin: &self.origin,
            custom_key_store_id: &self.custom_key_store_id,
            bypass_policy_lockout_safety_check: &self.bypass_policy_lockout_safety_check,
            tags: &self.tags,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`CreateKeyInput`](crate::input::CreateKeyInput)
    pub fn builder() -> crate::input::create_key_input::Builder {
        crate::input::create_key_input::Builder::default()
    }
}

/// See [`DecryptInput`](crate::input::DecryptInput)
pub mod decrypt_input {

    use crate::input::DecryptInput;
    use crate::model::EncryptionAlgorithmSpec;
    use crate::operation::Decrypt;
    use smithy_types::Blob;
    /// A builder for [`DecryptInput`](crate::input::DecryptInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        ciphertext_blob: ::std::option::Option<Blob>,
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        key_id: ::std::option::Option<::std::string::String>,
        encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
    }
    impl Builder {
        /// <p>Ciphertext to be decrypted. The blob includes metadata.</p>
        pub fn ciphertext_blob(mut self, inp: Blob) -> Self {
            self.ciphertext_blob = Some(inp);
            self
        }
        /// <p>Specifies the encryption context to use when decrypting the data.
        /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// <p>Specifies the customer master key (CMK) that AWS KMS uses to decrypt the ciphertext. Enter a
        /// key ID of the CMK that was used to encrypt the ciphertext.</p>
        /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
        /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
        /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
        /// ensures that you use the CMK that you intend.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify
        /// the same algorithm that was used to encrypt the data. If you specify a different algorithm,
        /// the <code>Decrypt</code> operation fails.</p>
        /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
        /// The default value, <code>SYMMETRIC_DEFAULT</code>, represents the only supported algorithm
        /// that is valid for symmetric CMKs.</p>
        pub fn encryption_algorithm(mut self, inp: EncryptionAlgorithmSpec) -> Self {
            self.encryption_algorithm = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Decrypt`](crate::operation::Decrypt)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Decrypt, ()> {
            let op = Decrypt::new(DecryptInput {
                ciphertext_blob: self.ciphertext_blob,
                encryption_context: self.encryption_context,
                grant_tokens: self.grant_tokens,
                key_id: self.key_id,
                encryption_algorithm: self.encryption_algorithm,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("Decrypt", "kms"))
        }
    }
}
impl DecryptInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.Decrypt")
    }
    fn body(&self) -> DecryptInputBody {
        DecryptInputBody {
            ciphertext_blob: &self.ciphertext_blob,
            encryption_context: &self.encryption_context,
            grant_tokens: &self.grant_tokens,
            key_id: &self.key_id,
            encryption_algorithm: &self.encryption_algorithm,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DecryptInput`](crate::input::DecryptInput)
    pub fn builder() -> crate::input::decrypt_input::Builder {
        crate::input::decrypt_input::Builder::default()
    }
}

/// See [`DeleteAliasInput`](crate::input::DeleteAliasInput)
pub mod delete_alias_input {

    use crate::input::DeleteAliasInput;
    use crate::operation::DeleteAlias;
    /// A builder for [`DeleteAliasInput`](crate::input::DeleteAliasInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        alias_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The alias to be deleted. The alias name must begin with <code>alias/</code> followed by
        /// the alias name, such as <code>alias/ExampleAlias</code>.</p>
        pub fn alias_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.alias_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteAlias`](crate::operation::DeleteAlias)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteAlias, ()> {
            let op = DeleteAlias::new(DeleteAliasInput {
                alias_name: self.alias_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DeleteAlias", "kms"),
            )
        }
    }
}
impl DeleteAliasInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DeleteAlias")
    }
    fn body(&self) -> DeleteAliasInputBody {
        DeleteAliasInputBody {
            alias_name: &self.alias_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteAliasInput`](crate::input::DeleteAliasInput)
    pub fn builder() -> crate::input::delete_alias_input::Builder {
        crate::input::delete_alias_input::Builder::default()
    }
}

/// See [`DeleteCustomKeyStoreInput`](crate::input::DeleteCustomKeyStoreInput)
pub mod delete_custom_key_store_input {

    use crate::input::DeleteCustomKeyStoreInput;
    use crate::operation::DeleteCustomKeyStore;
    /// A builder for [`DeleteCustomKeyStoreInput`](crate::input::DeleteCustomKeyStoreInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteCustomKeyStore`](crate::operation::DeleteCustomKeyStore)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteCustomKeyStore, ()> {
            let op = DeleteCustomKeyStore::new(DeleteCustomKeyStoreInput {
                custom_key_store_id: self.custom_key_store_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DeleteCustomKeyStore", "kms"),
            )
        }
    }
}
impl DeleteCustomKeyStoreInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DeleteCustomKeyStore")
    }
    fn body(&self) -> DeleteCustomKeyStoreInputBody {
        DeleteCustomKeyStoreInputBody {
            custom_key_store_id: &self.custom_key_store_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteCustomKeyStoreInput`](crate::input::DeleteCustomKeyStoreInput)
    pub fn builder() -> crate::input::delete_custom_key_store_input::Builder {
        crate::input::delete_custom_key_store_input::Builder::default()
    }
}

/// See [`DeleteImportedKeyMaterialInput`](crate::input::DeleteImportedKeyMaterialInput)
pub mod delete_imported_key_material_input {

    use crate::input::DeleteImportedKeyMaterialInput;
    use crate::operation::DeleteImportedKeyMaterial;
    /// A builder for [`DeleteImportedKeyMaterialInput`](crate::input::DeleteImportedKeyMaterialInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Identifies the CMK from which you are deleting imported key material. The
        /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DeleteImportedKeyMaterial`](crate::operation::DeleteImportedKeyMaterial)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DeleteImportedKeyMaterial, ()> {
            let op = DeleteImportedKeyMaterial::new(DeleteImportedKeyMaterialInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DeleteImportedKeyMaterial", "kms"),
            )
        }
    }
}
impl DeleteImportedKeyMaterialInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DeleteImportedKeyMaterial")
    }
    fn body(&self) -> DeleteImportedKeyMaterialInputBody {
        DeleteImportedKeyMaterialInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DeleteImportedKeyMaterialInput`](crate::input::DeleteImportedKeyMaterialInput)
    pub fn builder() -> crate::input::delete_imported_key_material_input::Builder {
        crate::input::delete_imported_key_material_input::Builder::default()
    }
}

/// See [`DescribeCustomKeyStoresInput`](crate::input::DescribeCustomKeyStoresInput)
pub mod describe_custom_key_stores_input {

    use crate::input::DescribeCustomKeyStoresInput;
    use crate::operation::DescribeCustomKeyStores;
    /// A builder for [`DescribeCustomKeyStoresInput`](crate::input::DescribeCustomKeyStoresInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_id: ::std::option::Option<::std::string::String>,
        custom_key_store_name: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Gets only information about the specified custom key store. Enter the key store ID.</p>
        /// <p>By default, this operation gets information about all custom key stores in the account and
        /// region. To limit the output to a particular custom key store, you can use either the
        /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
        /// both.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// <p>Gets only information about the specified custom key store. Enter the friendly name of the
        /// custom key store.</p>
        /// <p>By default, this operation gets information about all custom key stores in the account and
        /// region. To limit the output to a particular custom key store, you can use either the
        /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
        /// both.</p>
        pub fn custom_key_store_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_name = Some(inp.into());
            self
        }
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeCustomKeyStores`](crate::operation::DescribeCustomKeyStores)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeCustomKeyStores, ()> {
            let op = DescribeCustomKeyStores::new(DescribeCustomKeyStoresInput {
                custom_key_store_id: self.custom_key_store_id,
                custom_key_store_name: self.custom_key_store_name,
                limit: self.limit,
                marker: self.marker,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DescribeCustomKeyStores", "kms"),
            )
        }
    }
}
impl DescribeCustomKeyStoresInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DescribeCustomKeyStores")
    }
    fn body(&self) -> DescribeCustomKeyStoresInputBody {
        DescribeCustomKeyStoresInputBody {
            custom_key_store_id: &self.custom_key_store_id,
            custom_key_store_name: &self.custom_key_store_name,
            limit: &self.limit,
            marker: &self.marker,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeCustomKeyStoresInput`](crate::input::DescribeCustomKeyStoresInput)
    pub fn builder() -> crate::input::describe_custom_key_stores_input::Builder {
        crate::input::describe_custom_key_stores_input::Builder::default()
    }
}

/// See [`DescribeKeyInput`](crate::input::DescribeKeyInput)
pub mod describe_key_input {

    use crate::input::DescribeKeyInput;
    use crate::operation::DescribeKey;
    /// A builder for [`DescribeKeyInput`](crate::input::DescribeKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Describes the specified customer master key (CMK). </p>
        /// <p>If you specify a predefined AWS alias (an AWS alias with no key ID), KMS associates the
        /// alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys">AWS
        /// managed CMK</a> and returns its <code>KeyId</code> and <code>Arn</code> in the
        /// response.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`DescribeKey`](crate::operation::DescribeKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DescribeKey, ()> {
            let op = DescribeKey::new(DescribeKeyInput {
                key_id: self.key_id,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DescribeKey", "kms"),
            )
        }
    }
}
impl DescribeKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DescribeKey")
    }
    fn body(&self) -> DescribeKeyInputBody {
        DescribeKeyInputBody {
            key_id: &self.key_id,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DescribeKeyInput`](crate::input::DescribeKeyInput)
    pub fn builder() -> crate::input::describe_key_input::Builder {
        crate::input::describe_key_input::Builder::default()
    }
}

/// See [`DisableKeyInput`](crate::input::DisableKeyInput)
pub mod disable_key_input {

    use crate::input::DisableKeyInput;
    use crate::operation::DisableKey;
    /// A builder for [`DisableKeyInput`](crate::input::DisableKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DisableKey`](crate::operation::DisableKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DisableKey, ()> {
            let op = DisableKey::new(DisableKeyInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("DisableKey", "kms"))
        }
    }
}
impl DisableKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DisableKey")
    }
    fn body(&self) -> DisableKeyInputBody {
        DisableKeyInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DisableKeyInput`](crate::input::DisableKeyInput)
    pub fn builder() -> crate::input::disable_key_input::Builder {
        crate::input::disable_key_input::Builder::default()
    }
}

/// See [`DisableKeyRotationInput`](crate::input::DisableKeyRotationInput)
pub mod disable_key_rotation_input {

    use crate::input::DisableKeyRotationInput;
    use crate::operation::DisableKeyRotation;
    /// A builder for [`DisableKeyRotationInput`](crate::input::DisableKeyRotationInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Identifies a symmetric customer master key (CMK). You cannot enable or disable automatic
        /// rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric CMKs</a>, CMKs
        /// with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key
        /// material</a>, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DisableKeyRotation`](crate::operation::DisableKeyRotation)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DisableKeyRotation, ()> {
            let op = DisableKeyRotation::new(DisableKeyRotationInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DisableKeyRotation", "kms"),
            )
        }
    }
}
impl DisableKeyRotationInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DisableKeyRotation")
    }
    fn body(&self) -> DisableKeyRotationInputBody {
        DisableKeyRotationInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DisableKeyRotationInput`](crate::input::DisableKeyRotationInput)
    pub fn builder() -> crate::input::disable_key_rotation_input::Builder {
        crate::input::disable_key_rotation_input::Builder::default()
    }
}

/// See [`DisconnectCustomKeyStoreInput`](crate::input::DisconnectCustomKeyStoreInput)
pub mod disconnect_custom_key_store_input {

    use crate::input::DisconnectCustomKeyStoreInput;
    use crate::operation::DisconnectCustomKeyStore;
    /// A builder for [`DisconnectCustomKeyStoreInput`](crate::input::DisconnectCustomKeyStoreInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`DisconnectCustomKeyStore`](crate::operation::DisconnectCustomKeyStore)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<DisconnectCustomKeyStore, ()> {
            let op = DisconnectCustomKeyStore::new(DisconnectCustomKeyStoreInput {
                custom_key_store_id: self.custom_key_store_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("DisconnectCustomKeyStore", "kms"),
            )
        }
    }
}
impl DisconnectCustomKeyStoreInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.DisconnectCustomKeyStore")
    }
    fn body(&self) -> DisconnectCustomKeyStoreInputBody {
        DisconnectCustomKeyStoreInputBody {
            custom_key_store_id: &self.custom_key_store_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`DisconnectCustomKeyStoreInput`](crate::input::DisconnectCustomKeyStoreInput)
    pub fn builder() -> crate::input::disconnect_custom_key_store_input::Builder {
        crate::input::disconnect_custom_key_store_input::Builder::default()
    }
}

/// See [`EnableKeyInput`](crate::input::EnableKeyInput)
pub mod enable_key_input {

    use crate::input::EnableKeyInput;
    use crate::operation::EnableKey;
    /// A builder for [`EnableKeyInput`](crate::input::EnableKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`EnableKey`](crate::operation::EnableKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<EnableKey, ()> {
            let op = EnableKey::new(EnableKeyInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("EnableKey", "kms"))
        }
    }
}
impl EnableKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.EnableKey")
    }
    fn body(&self) -> EnableKeyInputBody {
        EnableKeyInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`EnableKeyInput`](crate::input::EnableKeyInput)
    pub fn builder() -> crate::input::enable_key_input::Builder {
        crate::input::enable_key_input::Builder::default()
    }
}

/// See [`EnableKeyRotationInput`](crate::input::EnableKeyRotationInput)
pub mod enable_key_rotation_input {

    use crate::input::EnableKeyRotationInput;
    use crate::operation::EnableKeyRotation;
    /// A builder for [`EnableKeyRotationInput`](crate::input::EnableKeyRotationInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Identifies a symmetric customer master key (CMK). You cannot enable automatic rotation of asymmetric CMKs, CMKs with imported key material, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`EnableKeyRotation`](crate::operation::EnableKeyRotation)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<EnableKeyRotation, ()> {
            let op = EnableKeyRotation::new(EnableKeyRotationInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("EnableKeyRotation", "kms"),
            )
        }
    }
}
impl EnableKeyRotationInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.EnableKeyRotation")
    }
    fn body(&self) -> EnableKeyRotationInputBody {
        EnableKeyRotationInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`EnableKeyRotationInput`](crate::input::EnableKeyRotationInput)
    pub fn builder() -> crate::input::enable_key_rotation_input::Builder {
        crate::input::enable_key_rotation_input::Builder::default()
    }
}

/// See [`EncryptInput`](crate::input::EncryptInput)
pub mod encrypt_input {

    use crate::input::EncryptInput;
    use crate::model::EncryptionAlgorithmSpec;
    use crate::operation::Encrypt;
    use smithy_types::Blob;
    /// A builder for [`EncryptInput`](crate::input::EncryptInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        plaintext: ::std::option::Option<Blob>,
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Data to be encrypted.</p>
        pub fn plaintext(mut self, inp: Blob) -> Self {
            self.plaintext = Some(inp);
            self
        }
        /// <p>Specifies the encryption context that will be used to encrypt the data.
        /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context. </p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// <p>Specifies the encryption algorithm that AWS KMS will use to encrypt the plaintext message.
        /// The algorithm must be compatible with the CMK that you specify.</p>
        /// <p>This parameter is required only for asymmetric CMKs. The default value,
        /// <code>SYMMETRIC_DEFAULT</code>, is the algorithm used for symmetric CMKs. If you are using
        /// an asymmetric CMK, we recommend RSAES_OAEP_SHA_256.</p>
        pub fn encryption_algorithm(mut self, inp: EncryptionAlgorithmSpec) -> Self {
            self.encryption_algorithm = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Encrypt`](crate::operation::Encrypt)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Encrypt, ()> {
            let op = Encrypt::new(EncryptInput {
                key_id: self.key_id,
                plaintext: self.plaintext,
                encryption_context: self.encryption_context,
                grant_tokens: self.grant_tokens,
                encryption_algorithm: self.encryption_algorithm,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("Encrypt", "kms"))
        }
    }
}
impl EncryptInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.Encrypt")
    }
    fn body(&self) -> EncryptInputBody {
        EncryptInputBody {
            key_id: &self.key_id,
            plaintext: &self.plaintext,
            encryption_context: &self.encryption_context,
            grant_tokens: &self.grant_tokens,
            encryption_algorithm: &self.encryption_algorithm,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`EncryptInput`](crate::input::EncryptInput)
    pub fn builder() -> crate::input::encrypt_input::Builder {
        crate::input::encrypt_input::Builder::default()
    }
}

/// See [`GenerateDataKeyInput`](crate::input::GenerateDataKeyInput)
pub mod generate_data_key_input {

    use crate::input::GenerateDataKeyInput;
    use crate::model::DataKeySpec;
    use crate::operation::GenerateDataKey;
    /// A builder for [`GenerateDataKeyInput`](crate::input::GenerateDataKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        number_of_bytes: ::std::option::Option<i32>,
        key_spec: ::std::option::Option<DataKeySpec>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Identifies the symmetric CMK that encrypts the data key.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>Specifies the length of the data key in bytes. For example, use the value 64 to generate a
        /// 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data
        /// keys, use the <code>KeySpec</code> parameter.</p>
        /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
        /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
        pub fn number_of_bytes(mut self, inp: i32) -> Self {
            self.number_of_bytes = Some(inp);
            self
        }
        /// <p>Specifies the length of the data key. Use <code>AES_128</code> to generate a 128-bit
        /// symmetric key, or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
        /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
        /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
        pub fn key_spec(mut self, inp: DataKeySpec) -> Self {
            self.key_spec = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GenerateDataKey`](crate::operation::GenerateDataKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GenerateDataKey, ()> {
            let op = GenerateDataKey::new(GenerateDataKeyInput {
                key_id: self.key_id,
                encryption_context: self.encryption_context,
                number_of_bytes: self.number_of_bytes,
                key_spec: self.key_spec,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GenerateDataKey", "kms"),
            )
        }
    }
}
impl GenerateDataKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GenerateDataKey")
    }
    fn body(&self) -> GenerateDataKeyInputBody {
        GenerateDataKeyInputBody {
            key_id: &self.key_id,
            encryption_context: &self.encryption_context,
            number_of_bytes: &self.number_of_bytes,
            key_spec: &self.key_spec,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GenerateDataKeyInput`](crate::input::GenerateDataKeyInput)
    pub fn builder() -> crate::input::generate_data_key_input::Builder {
        crate::input::generate_data_key_input::Builder::default()
    }
}

/// See [`GenerateDataKeyPairInput`](crate::input::GenerateDataKeyPairInput)
pub mod generate_data_key_pair_input {

    use crate::input::GenerateDataKeyPairInput;
    use crate::model::DataKeyPairSpec;
    use crate::operation::GenerateDataKeyPair;
    /// A builder for [`GenerateDataKeyPairInput`](crate::input::GenerateDataKeyPairInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        key_id: ::std::option::Option<::std::string::String>,
        key_pair_spec: ::std::option::Option<DataKeyPairSpec>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Specifies the encryption context that will be used when encrypting the private key in the
        /// data key pair.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>Specifies the symmetric CMK that encrypts the private key in the data key pair. You cannot
        /// specify an asymmetric CMK or a CMK in a custom key store. To get the type and origin of your
        /// CMK, use the <a>DescribeKey</a> operation.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Determines the type of data key pair that is generated. </p>
        /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
        pub fn key_pair_spec(mut self, inp: DataKeyPairSpec) -> Self {
            self.key_pair_spec = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GenerateDataKeyPair`](crate::operation::GenerateDataKeyPair)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GenerateDataKeyPair, ()> {
            let op = GenerateDataKeyPair::new(GenerateDataKeyPairInput {
                encryption_context: self.encryption_context,
                key_id: self.key_id,
                key_pair_spec: self.key_pair_spec,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GenerateDataKeyPair", "kms"),
            )
        }
    }
}
impl GenerateDataKeyPairInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GenerateDataKeyPair")
    }
    fn body(&self) -> GenerateDataKeyPairInputBody {
        GenerateDataKeyPairInputBody {
            encryption_context: &self.encryption_context,
            key_id: &self.key_id,
            key_pair_spec: &self.key_pair_spec,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GenerateDataKeyPairInput`](crate::input::GenerateDataKeyPairInput)
    pub fn builder() -> crate::input::generate_data_key_pair_input::Builder {
        crate::input::generate_data_key_pair_input::Builder::default()
    }
}

/// See [`GenerateDataKeyPairWithoutPlaintextInput`](crate::input::GenerateDataKeyPairWithoutPlaintextInput)
pub mod generate_data_key_pair_without_plaintext_input {

    use crate::input::GenerateDataKeyPairWithoutPlaintextInput;
    use crate::model::DataKeyPairSpec;
    use crate::operation::GenerateDataKeyPairWithoutPlaintext;
    /// A builder for [`GenerateDataKeyPairWithoutPlaintextInput`](crate::input::GenerateDataKeyPairWithoutPlaintextInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        key_id: ::std::option::Option<::std::string::String>,
        key_pair_spec: ::std::option::Option<DataKeyPairSpec>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Specifies the encryption context that will be used when encrypting the private key in the
        /// data key pair.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>Specifies the CMK that encrypts the private key in the data key pair. You must specify a
        /// symmetric CMK. You cannot use an asymmetric CMK or a CMK in a custom key store. To get the
        /// type and origin of your CMK, use the <a>DescribeKey</a> operation. </p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Determines the type of data key pair that is generated.</p>
        /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
        pub fn key_pair_spec(mut self, inp: DataKeyPairSpec) -> Self {
            self.key_pair_spec = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GenerateDataKeyPairWithoutPlaintext`](crate::operation::GenerateDataKeyPairWithoutPlaintext)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GenerateDataKeyPairWithoutPlaintext, ()> {
            let op = GenerateDataKeyPairWithoutPlaintext::new(
                GenerateDataKeyPairWithoutPlaintextInput {
                    encryption_context: self.encryption_context,
                    key_id: self.key_id,
                    key_pair_spec: self.key_pair_spec,
                    grant_tokens: self.grant_tokens,
                },
            );

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new(
                    "GenerateDataKeyPairWithoutPlaintext",
                    "kms",
                ),
            )
        }
    }
}
impl GenerateDataKeyPairWithoutPlaintextInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header(
                "X-Amz-Target",
                "TrentService.GenerateDataKeyPairWithoutPlaintext",
            )
    }
    fn body(&self) -> GenerateDataKeyPairWithoutPlaintextInputBody {
        GenerateDataKeyPairWithoutPlaintextInputBody {
            encryption_context: &self.encryption_context,
            key_id: &self.key_id,
            key_pair_spec: &self.key_pair_spec,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GenerateDataKeyPairWithoutPlaintextInput`](crate::input::GenerateDataKeyPairWithoutPlaintextInput)
    pub fn builder() -> crate::input::generate_data_key_pair_without_plaintext_input::Builder {
        crate::input::generate_data_key_pair_without_plaintext_input::Builder::default()
    }
}

/// See [`GenerateDataKeyWithoutPlaintextInput`](crate::input::GenerateDataKeyWithoutPlaintextInput)
pub mod generate_data_key_without_plaintext_input {

    use crate::input::GenerateDataKeyWithoutPlaintextInput;
    use crate::model::DataKeySpec;
    use crate::operation::GenerateDataKeyWithoutPlaintext;
    /// A builder for [`GenerateDataKeyWithoutPlaintextInput`](crate::input::GenerateDataKeyWithoutPlaintextInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        key_spec: ::std::option::Option<DataKeySpec>,
        number_of_bytes: ::std::option::Option<i32>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier of the symmetric customer master key (CMK) that encrypts the data
        /// key.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.encryption_context = Some(inp);
            self
        }
        /// <p>The length of the data key. Use <code>AES_128</code> to generate a 128-bit symmetric key,
        /// or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
        pub fn key_spec(mut self, inp: DataKeySpec) -> Self {
            self.key_spec = Some(inp);
            self
        }
        /// <p>The length of the data key in bytes. For example, use the value 64 to generate a 512-bit
        /// data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys),
        /// we recommend that you use the <code>KeySpec</code> field instead of this one.</p>
        pub fn number_of_bytes(mut self, inp: i32) -> Self {
            self.number_of_bytes = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GenerateDataKeyWithoutPlaintext`](crate::operation::GenerateDataKeyWithoutPlaintext)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GenerateDataKeyWithoutPlaintext, ()> {
            let op = GenerateDataKeyWithoutPlaintext::new(GenerateDataKeyWithoutPlaintextInput {
                key_id: self.key_id,
                encryption_context: self.encryption_context,
                key_spec: self.key_spec,
                number_of_bytes: self.number_of_bytes,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GenerateDataKeyWithoutPlaintext", "kms"),
            )
        }
    }
}
impl GenerateDataKeyWithoutPlaintextInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header(
                "X-Amz-Target",
                "TrentService.GenerateDataKeyWithoutPlaintext",
            )
    }
    fn body(&self) -> GenerateDataKeyWithoutPlaintextInputBody {
        GenerateDataKeyWithoutPlaintextInputBody {
            key_id: &self.key_id,
            encryption_context: &self.encryption_context,
            key_spec: &self.key_spec,
            number_of_bytes: &self.number_of_bytes,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GenerateDataKeyWithoutPlaintextInput`](crate::input::GenerateDataKeyWithoutPlaintextInput)
    pub fn builder() -> crate::input::generate_data_key_without_plaintext_input::Builder {
        crate::input::generate_data_key_without_plaintext_input::Builder::default()
    }
}

/// See [`GenerateRandomInput`](crate::input::GenerateRandomInput)
pub mod generate_random_input {

    use crate::input::GenerateRandomInput;
    use crate::operation::GenerateRandom;
    /// A builder for [`GenerateRandomInput`](crate::input::GenerateRandomInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        number_of_bytes: ::std::option::Option<i32>,
        custom_key_store_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>The length of the byte string.</p>
        pub fn number_of_bytes(mut self, inp: i32) -> Self {
            self.number_of_bytes = Some(inp);
            self
        }
        /// <p>Generates the random byte string in the AWS CloudHSM cluster that is associated with the
        /// specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`GenerateRandom`](crate::operation::GenerateRandom)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GenerateRandom, ()> {
            let op = GenerateRandom::new(GenerateRandomInput {
                number_of_bytes: self.number_of_bytes,
                custom_key_store_id: self.custom_key_store_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GenerateRandom", "kms"),
            )
        }
    }
}
impl GenerateRandomInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GenerateRandom")
    }
    fn body(&self) -> GenerateRandomInputBody {
        GenerateRandomInputBody {
            number_of_bytes: &self.number_of_bytes,
            custom_key_store_id: &self.custom_key_store_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GenerateRandomInput`](crate::input::GenerateRandomInput)
    pub fn builder() -> crate::input::generate_random_input::Builder {
        crate::input::generate_random_input::Builder::default()
    }
}

/// See [`GetKeyPolicyInput`](crate::input::GetKeyPolicyInput)
pub mod get_key_policy_input {

    use crate::input::GetKeyPolicyInput;
    use crate::operation::GetKeyPolicy;
    /// A builder for [`GetKeyPolicyInput`](crate::input::GetKeyPolicyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        policy_name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the name of the key policy. The only valid name is <code>default</code>. To get
        /// the names of key policies, use <a>ListKeyPolicies</a>.</p>
        pub fn policy_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.policy_name = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetKeyPolicy`](crate::operation::GetKeyPolicy)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetKeyPolicy, ()> {
            let op = GetKeyPolicy::new(GetKeyPolicyInput {
                key_id: self.key_id,
                policy_name: self.policy_name,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GetKeyPolicy", "kms"),
            )
        }
    }
}
impl GetKeyPolicyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GetKeyPolicy")
    }
    fn body(&self) -> GetKeyPolicyInputBody {
        GetKeyPolicyInputBody {
            key_id: &self.key_id,
            policy_name: &self.policy_name,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetKeyPolicyInput`](crate::input::GetKeyPolicyInput)
    pub fn builder() -> crate::input::get_key_policy_input::Builder {
        crate::input::get_key_policy_input::Builder::default()
    }
}

/// See [`GetKeyRotationStatusInput`](crate::input::GetKeyRotationStatusInput)
pub mod get_key_rotation_status_input {

    use crate::input::GetKeyRotationStatusInput;
    use crate::operation::GetKeyRotationStatus;
    /// A builder for [`GetKeyRotationStatusInput`](crate::input::GetKeyRotationStatusInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
        /// different AWS account, you must use the key ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetKeyRotationStatus`](crate::operation::GetKeyRotationStatus)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetKeyRotationStatus, ()> {
            let op = GetKeyRotationStatus::new(GetKeyRotationStatusInput {
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GetKeyRotationStatus", "kms"),
            )
        }
    }
}
impl GetKeyRotationStatusInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GetKeyRotationStatus")
    }
    fn body(&self) -> GetKeyRotationStatusInputBody {
        GetKeyRotationStatusInputBody {
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetKeyRotationStatusInput`](crate::input::GetKeyRotationStatusInput)
    pub fn builder() -> crate::input::get_key_rotation_status_input::Builder {
        crate::input::get_key_rotation_status_input::Builder::default()
    }
}

/// See [`GetParametersForImportInput`](crate::input::GetParametersForImportInput)
pub mod get_parameters_for_import_input {

    use crate::input::GetParametersForImportInput;
    use crate::model::AlgorithmSpec;
    use crate::model::WrappingKeySpec;
    use crate::operation::GetParametersForImport;
    /// A builder for [`GetParametersForImportInput`](crate::input::GetParametersForImportInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        wrapping_algorithm: ::std::option::Option<AlgorithmSpec>,
        wrapping_key_spec: ::std::option::Option<WrappingKeySpec>,
    }
    impl Builder {
        /// <p>The identifier of the symmetric CMK into which you will import key material. The
        /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>The algorithm you will use to encrypt the key material before importing it with <a>ImportKeyMaterial</a>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html">Encrypt the Key Material</a>
        /// in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn wrapping_algorithm(mut self, inp: AlgorithmSpec) -> Self {
            self.wrapping_algorithm = Some(inp);
            self
        }
        /// <p>The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public
        /// keys are supported.</p>
        pub fn wrapping_key_spec(mut self, inp: WrappingKeySpec) -> Self {
            self.wrapping_key_spec = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetParametersForImport`](crate::operation::GetParametersForImport)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetParametersForImport, ()> {
            let op = GetParametersForImport::new(GetParametersForImportInput {
                key_id: self.key_id,
                wrapping_algorithm: self.wrapping_algorithm,
                wrapping_key_spec: self.wrapping_key_spec,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GetParametersForImport", "kms"),
            )
        }
    }
}
impl GetParametersForImportInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GetParametersForImport")
    }
    fn body(&self) -> GetParametersForImportInputBody {
        GetParametersForImportInputBody {
            key_id: &self.key_id,
            wrapping_algorithm: &self.wrapping_algorithm,
            wrapping_key_spec: &self.wrapping_key_spec,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetParametersForImportInput`](crate::input::GetParametersForImportInput)
    pub fn builder() -> crate::input::get_parameters_for_import_input::Builder {
        crate::input::get_parameters_for_import_input::Builder::default()
    }
}

/// See [`GetPublicKeyInput`](crate::input::GetPublicKeyInput)
pub mod get_public_key_input {

    use crate::input::GetPublicKeyInput;
    use crate::operation::GetPublicKey;
    /// A builder for [`GetPublicKeyInput`](crate::input::GetPublicKeyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Identifies the asymmetric CMK that includes the public key.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`GetPublicKey`](crate::operation::GetPublicKey)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<GetPublicKey, ()> {
            let op = GetPublicKey::new(GetPublicKeyInput {
                key_id: self.key_id,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("GetPublicKey", "kms"),
            )
        }
    }
}
impl GetPublicKeyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.GetPublicKey")
    }
    fn body(&self) -> GetPublicKeyInputBody {
        GetPublicKeyInputBody {
            key_id: &self.key_id,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`GetPublicKeyInput`](crate::input::GetPublicKeyInput)
    pub fn builder() -> crate::input::get_public_key_input::Builder {
        crate::input::get_public_key_input::Builder::default()
    }
}

/// See [`ImportKeyMaterialInput`](crate::input::ImportKeyMaterialInput)
pub mod import_key_material_input {

    use crate::input::ImportKeyMaterialInput;
    use crate::model::ExpirationModelType;
    use crate::operation::ImportKeyMaterial;
    use smithy_types::Blob;
    use smithy_types::Instant;
    /// A builder for [`ImportKeyMaterialInput`](crate::input::ImportKeyMaterialInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        import_token: ::std::option::Option<Blob>,
        encrypted_key_material: ::std::option::Option<Blob>,
        valid_to: ::std::option::Option<Instant>,
        expiration_model: ::std::option::Option<ExpirationModelType>,
    }
    impl Builder {
        /// <p>The identifier of the symmetric CMK that receives the imported key material. The CMK's
        /// <code>Origin</code> must be <code>EXTERNAL</code>. This must be the same CMK specified in
        /// the <code>KeyID</code> parameter of the corresponding <a>GetParametersForImport</a>
        /// request.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>The import token that you received in the response to a previous <a>GetParametersForImport</a> request. It must be from the same response that contained
        /// the public key that you used to encrypt the key material.</p>
        pub fn import_token(mut self, inp: Blob) -> Self {
            self.import_token = Some(inp);
            self
        }
        /// <p>The encrypted key material to import. The key material must be encrypted with the public
        /// wrapping key that <a>GetParametersForImport</a> returned, using the wrapping
        /// algorithm that you specified in the same <code>GetParametersForImport</code> request.</p>
        pub fn encrypted_key_material(mut self, inp: Blob) -> Self {
            self.encrypted_key_material = Some(inp);
            self
        }
        /// <p>The time at which the imported key material expires. When the key material expires, AWS KMS
        /// deletes the key material and the CMK becomes unusable. You must omit this parameter when the
        /// <code>ExpirationModel</code> parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>.
        /// Otherwise it is required.</p>
        pub fn valid_to(mut self, inp: Instant) -> Self {
            self.valid_to = Some(inp);
            self
        }
        /// <p>Specifies whether the key material expires. The default is
        /// <code>KEY_MATERIAL_EXPIRES</code>, in which case you must include the <code>ValidTo</code>
        /// parameter. When this parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>, you must
        /// omit the <code>ValidTo</code> parameter.</p>
        pub fn expiration_model(mut self, inp: ExpirationModelType) -> Self {
            self.expiration_model = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ImportKeyMaterial`](crate::operation::ImportKeyMaterial)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ImportKeyMaterial, ()> {
            let op = ImportKeyMaterial::new(ImportKeyMaterialInput {
                key_id: self.key_id,
                import_token: self.import_token,
                encrypted_key_material: self.encrypted_key_material,
                valid_to: self.valid_to,
                expiration_model: self.expiration_model,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ImportKeyMaterial", "kms"),
            )
        }
    }
}
impl ImportKeyMaterialInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ImportKeyMaterial")
    }
    fn body(&self) -> ImportKeyMaterialInputBody {
        ImportKeyMaterialInputBody {
            key_id: &self.key_id,
            import_token: &self.import_token,
            encrypted_key_material: &self.encrypted_key_material,
            valid_to: &self.valid_to,
            expiration_model: &self.expiration_model,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ImportKeyMaterialInput`](crate::input::ImportKeyMaterialInput)
    pub fn builder() -> crate::input::import_key_material_input::Builder {
        crate::input::import_key_material_input::Builder::default()
    }
}

/// See [`ListAliasesInput`](crate::input::ListAliasesInput)
pub mod list_aliases_input {

    use crate::input::ListAliasesInput;
    use crate::operation::ListAliases;
    /// A builder for [`ListAliasesInput`](crate::input::ListAliasesInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Lists only aliases that are associated with the specified CMK. Enter a CMK in your AWS
        /// account. </p>
        /// <p>This parameter is optional. If you omit it, <code>ListAliases</code> returns all aliases
        /// in the account and Region.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between 1
        /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListAliases`](crate::operation::ListAliases)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListAliases, ()> {
            let op = ListAliases::new(ListAliasesInput {
                key_id: self.key_id,
                limit: self.limit,
                marker: self.marker,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ListAliases", "kms"),
            )
        }
    }
}
impl ListAliasesInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListAliases")
    }
    fn body(&self) -> ListAliasesInputBody {
        ListAliasesInputBody {
            key_id: &self.key_id,
            limit: &self.limit,
            marker: &self.marker,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListAliasesInput`](crate::input::ListAliasesInput)
    pub fn builder() -> crate::input::list_aliases_input::Builder {
        crate::input::list_aliases_input::Builder::default()
    }
}

/// See [`ListGrantsInput`](crate::input::ListGrantsInput)
pub mod list_grants_input {

    use crate::input::ListGrantsInput;
    use crate::operation::ListGrants;
    /// A builder for [`ListGrantsInput`](crate::input::ListGrantsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
        key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between 1
        /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
        /// different AWS account, you must use the key ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListGrants`](crate::operation::ListGrants)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListGrants, ()> {
            let op = ListGrants::new(ListGrantsInput {
                limit: self.limit,
                marker: self.marker,
                key_id: self.key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("ListGrants", "kms"))
        }
    }
}
impl ListGrantsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListGrants")
    }
    fn body(&self) -> ListGrantsInputBody {
        ListGrantsInputBody {
            limit: &self.limit,
            marker: &self.marker,
            key_id: &self.key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListGrantsInput`](crate::input::ListGrantsInput)
    pub fn builder() -> crate::input::list_grants_input::Builder {
        crate::input::list_grants_input::Builder::default()
    }
}

/// See [`ListKeyPoliciesInput`](crate::input::ListKeyPoliciesInput)
pub mod list_key_policies_input {

    use crate::input::ListKeyPoliciesInput;
    use crate::operation::ListKeyPolicies;
    /// A builder for [`ListKeyPoliciesInput`](crate::input::ListKeyPoliciesInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between
        /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
        /// <p>Only one policy can be attached to a key.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListKeyPolicies`](crate::operation::ListKeyPolicies)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListKeyPolicies, ()> {
            let op = ListKeyPolicies::new(ListKeyPoliciesInput {
                key_id: self.key_id,
                limit: self.limit,
                marker: self.marker,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ListKeyPolicies", "kms"),
            )
        }
    }
}
impl ListKeyPoliciesInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListKeyPolicies")
    }
    fn body(&self) -> ListKeyPoliciesInputBody {
        ListKeyPoliciesInputBody {
            key_id: &self.key_id,
            limit: &self.limit,
            marker: &self.marker,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListKeyPoliciesInput`](crate::input::ListKeyPoliciesInput)
    pub fn builder() -> crate::input::list_key_policies_input::Builder {
        crate::input::list_key_policies_input::Builder::default()
    }
}

/// See [`ListKeysInput`](crate::input::ListKeysInput)
pub mod list_keys_input {

    use crate::input::ListKeysInput;
    use crate::operation::ListKeys;
    /// A builder for [`ListKeysInput`](crate::input::ListKeysInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between
        /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListKeys`](crate::operation::ListKeys)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListKeys, ()> {
            let op = ListKeys::new(ListKeysInput {
                limit: self.limit,
                marker: self.marker,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("ListKeys", "kms"))
        }
    }
}
impl ListKeysInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListKeys")
    }
    fn body(&self) -> ListKeysInputBody {
        ListKeysInputBody {
            limit: &self.limit,
            marker: &self.marker,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListKeysInput`](crate::input::ListKeysInput)
    pub fn builder() -> crate::input::list_keys_input::Builder {
        crate::input::list_keys_input::Builder::default()
    }
}

/// See [`ListResourceTagsInput`](crate::input::ListResourceTagsInput)
pub mod list_resource_tags_input {

    use crate::input::ListResourceTagsInput;
    use crate::operation::ListResourceTags;
    /// A builder for [`ListResourceTagsInput`](crate::input::ListResourceTagsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between 1 and 50, inclusive. If
        /// you do not include a value, it defaults to 50.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        /// <p>Do not attempt to construct this value. Use only the value of <code>NextMarker</code> from
        /// the truncated response you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListResourceTags`](crate::operation::ListResourceTags)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListResourceTags, ()> {
            let op = ListResourceTags::new(ListResourceTagsInput {
                key_id: self.key_id,
                limit: self.limit,
                marker: self.marker,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ListResourceTags", "kms"),
            )
        }
    }
}
impl ListResourceTagsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListResourceTags")
    }
    fn body(&self) -> ListResourceTagsInputBody {
        ListResourceTagsInputBody {
            key_id: &self.key_id,
            limit: &self.limit,
            marker: &self.marker,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListResourceTagsInput`](crate::input::ListResourceTagsInput)
    pub fn builder() -> crate::input::list_resource_tags_input::Builder {
        crate::input::list_resource_tags_input::Builder::default()
    }
}

/// See [`ListRetirableGrantsInput`](crate::input::ListRetirableGrantsInput)
pub mod list_retirable_grants_input {

    use crate::input::ListRetirableGrantsInput;
    use crate::operation::ListRetirableGrants;
    /// A builder for [`ListRetirableGrantsInput`](crate::input::ListRetirableGrantsInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        limit: ::std::option::Option<i32>,
        marker: ::std::option::Option<::std::string::String>,
        retiring_principal: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Use this parameter to specify the maximum number of items to return. When this
        /// value is present, AWS KMS does not return more than the specified number of items, but it might
        /// return fewer.</p>
        /// <p>This value is optional. If you include a value, it must be between 1
        /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.limit = Some(inp);
            self
        }
        /// <p>Use this parameter in a subsequent request after you receive a response with
        /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
        /// you just received.</p>
        pub fn marker(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.marker = Some(inp.into());
            self
        }
        /// <p>The retiring principal for which to list grants. Enter a principal in your AWS
        /// account.</p>
        /// <p>To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
        /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
        /// assumed role users. For examples of the ARN syntax for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS
        /// Identity and Access Management (IAM)</a> in the Example ARNs section of the
        /// <i>Amazon Web Services General Reference</i>.</p>
        pub fn retiring_principal(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.retiring_principal = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`ListRetirableGrants`](crate::operation::ListRetirableGrants)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ListRetirableGrants, ()> {
            let op = ListRetirableGrants::new(ListRetirableGrantsInput {
                limit: self.limit,
                marker: self.marker,
                retiring_principal: self.retiring_principal,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ListRetirableGrants", "kms"),
            )
        }
    }
}
impl ListRetirableGrantsInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ListRetirableGrants")
    }
    fn body(&self) -> ListRetirableGrantsInputBody {
        ListRetirableGrantsInputBody {
            limit: &self.limit,
            marker: &self.marker,
            retiring_principal: &self.retiring_principal,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ListRetirableGrantsInput`](crate::input::ListRetirableGrantsInput)
    pub fn builder() -> crate::input::list_retirable_grants_input::Builder {
        crate::input::list_retirable_grants_input::Builder::default()
    }
}

/// See [`PutKeyPolicyInput`](crate::input::PutKeyPolicyInput)
pub mod put_key_policy_input {

    use crate::input::PutKeyPolicyInput;
    use crate::operation::PutKeyPolicy;
    /// A builder for [`PutKeyPolicyInput`](crate::input::PutKeyPolicyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        policy_name: ::std::option::Option<::std::string::String>,
        policy: ::std::option::Option<::std::string::String>,
        bypass_policy_lockout_safety_check: ::std::option::Option<bool>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>The name of the key policy. The only valid value is <code>default</code>.</p>
        pub fn policy_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.policy_name = Some(inp.into());
            self
        }
        /// <p>The key policy to attach to the CMK.</p>
        /// <p>The key policy must meet the following criteria:</p>
        /// <ul>
        /// <li>
        /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
        /// must allow the principal that is making the <code>PutKeyPolicy</code> request to make a
        /// subsequent <code>PutKeyPolicy</code> request on the CMK. This reduces the risk that the
        /// CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>AWS Key Management Service Developer Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>Each statement in the key policy must contain one or more principals. The principals
        /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
        /// (for example, an IAM user or role), you might need to enforce a delay before including the
        /// new principal in a key policy because the new principal might not be immediately visible
        /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
        /// Identity and Access Management User Guide</i>.</p>
        /// </li>
        /// </ul>
        /// <p>The key policy cannot exceed 32 kilobytes (32768 bytes). For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/resource-limits.html">Resource Quotas</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn policy(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.policy = Some(inp.into());
            self
        }
        /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
        /// <important>
        /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
        /// set this value to true indiscriminately.</p>
        /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>AWS Key Management Service Developer Guide</i>.</p>
        /// </important>
        /// <p>Use this parameter only when you intend to prevent the principal that is making the
        /// request from making a subsequent <code>PutKeyPolicy</code> request on the CMK.</p>
        /// <p>The default value is false.</p>
        pub fn bypass_policy_lockout_safety_check(mut self, inp: bool) -> Self {
            self.bypass_policy_lockout_safety_check = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`PutKeyPolicy`](crate::operation::PutKeyPolicy)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<PutKeyPolicy, ()> {
            let op = PutKeyPolicy::new(PutKeyPolicyInput {
                key_id: self.key_id,
                policy_name: self.policy_name,
                policy: self.policy,
                bypass_policy_lockout_safety_check: self
                    .bypass_policy_lockout_safety_check
                    .unwrap_or_default(),
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("PutKeyPolicy", "kms"),
            )
        }
    }
}
impl PutKeyPolicyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.PutKeyPolicy")
    }
    fn body(&self) -> PutKeyPolicyInputBody {
        PutKeyPolicyInputBody {
            key_id: &self.key_id,
            policy_name: &self.policy_name,
            policy: &self.policy,
            bypass_policy_lockout_safety_check: &self.bypass_policy_lockout_safety_check,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`PutKeyPolicyInput`](crate::input::PutKeyPolicyInput)
    pub fn builder() -> crate::input::put_key_policy_input::Builder {
        crate::input::put_key_policy_input::Builder::default()
    }
}

/// See [`ReEncryptInput`](crate::input::ReEncryptInput)
pub mod re_encrypt_input {

    use crate::input::ReEncryptInput;
    use crate::model::EncryptionAlgorithmSpec;
    use crate::operation::ReEncrypt;
    use smithy_types::Blob;
    /// A builder for [`ReEncryptInput`](crate::input::ReEncryptInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        ciphertext_blob: ::std::option::Option<Blob>,
        source_encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        source_key_id: ::std::option::Option<::std::string::String>,
        destination_key_id: ::std::option::Option<::std::string::String>,
        destination_encryption_context: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        >,
        source_encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
        destination_encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Ciphertext of the data to reencrypt.</p>
        pub fn ciphertext_blob(mut self, inp: Blob) -> Self {
            self.ciphertext_blob = Some(inp);
            self
        }
        /// <p>Specifies the encryption context to use to decrypt the ciphertext. Enter the same
        /// encryption context that was used to encrypt the ciphertext.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn source_encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.source_encryption_context = Some(inp);
            self
        }
        /// <p>Specifies the customer master key (CMK) that
        /// AWS KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the CMK
        /// that was used to encrypt the ciphertext.</p>
        /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
        /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
        /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
        /// ensures that you use the CMK that you intend.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn source_key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.source_key_id = Some(inp.into());
            self
        }
        /// <p>A unique identifier for the CMK that is used to reencrypt the data. Specify a symmetric or
        /// asymmetric CMK with a <code>KeyUsage</code> value of <code>ENCRYPT_DECRYPT</code>. To find the
        /// <code>KeyUsage</code> value of a CMK, use the <a>DescribeKey</a>
        /// operation.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn destination_key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.destination_key_id = Some(inp.into());
            self
        }
        /// <p>Specifies that encryption context to use when the reencrypting the data.</p>
        /// <p>A destination encryption context is valid only when the destination CMK is a symmetric
        /// CMK. The standard ciphertext format for asymmetric CMKs does not include fields for
        /// metadata.</p>
        /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
        /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn destination_encryption_context(
            mut self,
            inp: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        ) -> Self {
            self.destination_encryption_context = Some(inp);
            self
        }
        /// <p>Specifies the encryption algorithm that AWS KMS will use to decrypt the ciphertext before it
        /// is reencrypted. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the algorithm
        /// used for symmetric CMKs.</p>
        /// <p>Specify the same algorithm that was used to encrypt the ciphertext. If you specify a
        /// different algorithm, the decrypt attempt fails.</p>
        /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric
        /// CMK.</p>
        pub fn source_encryption_algorithm(mut self, inp: EncryptionAlgorithmSpec) -> Self {
            self.source_encryption_algorithm = Some(inp);
            self
        }
        /// <p>Specifies the encryption algorithm that AWS KMS will use to reecrypt the data after it has
        /// decrypted it. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the encryption
        /// algorithm used for symmetric CMKs.</p>
        /// <p>This parameter is required only when the destination CMK is an asymmetric CMK.</p>
        pub fn destination_encryption_algorithm(mut self, inp: EncryptionAlgorithmSpec) -> Self {
            self.destination_encryption_algorithm = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ReEncrypt`](crate::operation::ReEncrypt)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ReEncrypt, ()> {
            let op = ReEncrypt::new(ReEncryptInput {
                ciphertext_blob: self.ciphertext_blob,
                source_encryption_context: self.source_encryption_context,
                source_key_id: self.source_key_id,
                destination_key_id: self.destination_key_id,
                destination_encryption_context: self.destination_encryption_context,
                source_encryption_algorithm: self.source_encryption_algorithm,
                destination_encryption_algorithm: self.destination_encryption_algorithm,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("ReEncrypt", "kms"))
        }
    }
}
impl ReEncryptInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ReEncrypt")
    }
    fn body(&self) -> ReEncryptInputBody {
        ReEncryptInputBody {
            ciphertext_blob: &self.ciphertext_blob,
            source_encryption_context: &self.source_encryption_context,
            source_key_id: &self.source_key_id,
            destination_key_id: &self.destination_key_id,
            destination_encryption_context: &self.destination_encryption_context,
            source_encryption_algorithm: &self.source_encryption_algorithm,
            destination_encryption_algorithm: &self.destination_encryption_algorithm,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ReEncryptInput`](crate::input::ReEncryptInput)
    pub fn builder() -> crate::input::re_encrypt_input::Builder {
        crate::input::re_encrypt_input::Builder::default()
    }
}

/// See [`RetireGrantInput`](crate::input::RetireGrantInput)
pub mod retire_grant_input {

    use crate::input::RetireGrantInput;
    use crate::operation::RetireGrant;
    /// A builder for [`RetireGrantInput`](crate::input::RetireGrantInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        grant_token: ::std::option::Option<::std::string::String>,
        key_id: ::std::option::Option<::std::string::String>,
        grant_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Token that identifies the grant to be retired.</p>
        pub fn grant_token(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.grant_token = Some(inp.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the CMK associated with the grant. </p>
        /// <p>For example: <code>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Unique identifier of the grant to retire. The grant ID is returned in the response to a
        /// <code>CreateGrant</code> operation.</p>
        /// <ul>
        /// <li>
        /// <p>Grant ID Example -
        /// 0123456789012345678901234567890123456789012345678901234567890123</p>
        /// </li>
        /// </ul>
        pub fn grant_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.grant_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`RetireGrant`](crate::operation::RetireGrant)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<RetireGrant, ()> {
            let op = RetireGrant::new(RetireGrantInput {
                grant_token: self.grant_token,
                key_id: self.key_id,
                grant_id: self.grant_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("RetireGrant", "kms"),
            )
        }
    }
}
impl RetireGrantInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.RetireGrant")
    }
    fn body(&self) -> RetireGrantInputBody {
        RetireGrantInputBody {
            grant_token: &self.grant_token,
            key_id: &self.key_id,
            grant_id: &self.grant_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`RetireGrantInput`](crate::input::RetireGrantInput)
    pub fn builder() -> crate::input::retire_grant_input::Builder {
        crate::input::retire_grant_input::Builder::default()
    }
}

/// See [`RevokeGrantInput`](crate::input::RevokeGrantInput)
pub mod revoke_grant_input {

    use crate::input::RevokeGrantInput;
    use crate::operation::RevokeGrant;
    /// A builder for [`RevokeGrantInput`](crate::input::RevokeGrantInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        grant_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key associated with the grant.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
        /// different AWS account, you must use the key ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Identifier of the grant to be revoked.</p>
        pub fn grant_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.grant_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`RevokeGrant`](crate::operation::RevokeGrant)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<RevokeGrant, ()> {
            let op = RevokeGrant::new(RevokeGrantInput {
                key_id: self.key_id,
                grant_id: self.grant_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("RevokeGrant", "kms"),
            )
        }
    }
}
impl RevokeGrantInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.RevokeGrant")
    }
    fn body(&self) -> RevokeGrantInputBody {
        RevokeGrantInputBody {
            key_id: &self.key_id,
            grant_id: &self.grant_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`RevokeGrantInput`](crate::input::RevokeGrantInput)
    pub fn builder() -> crate::input::revoke_grant_input::Builder {
        crate::input::revoke_grant_input::Builder::default()
    }
}

/// See [`ScheduleKeyDeletionInput`](crate::input::ScheduleKeyDeletionInput)
pub mod schedule_key_deletion_input {

    use crate::input::ScheduleKeyDeletionInput;
    use crate::operation::ScheduleKeyDeletion;
    /// A builder for [`ScheduleKeyDeletionInput`](crate::input::ScheduleKeyDeletionInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        pending_window_in_days: ::std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The unique identifier of the customer master key (CMK) to delete.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>The waiting period, specified in number of days. After the waiting period ends, AWS KMS
        /// deletes the customer master key (CMK).</p>
        /// <p>This value is optional. If you include a value, it must be between 7 and 30, inclusive. If
        /// you do not include a value, it defaults to 30.</p>
        pub fn pending_window_in_days(mut self, inp: i32) -> Self {
            self.pending_window_in_days = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`ScheduleKeyDeletion`](crate::operation::ScheduleKeyDeletion)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<ScheduleKeyDeletion, ()> {
            let op = ScheduleKeyDeletion::new(ScheduleKeyDeletionInput {
                key_id: self.key_id,
                pending_window_in_days: self.pending_window_in_days,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("ScheduleKeyDeletion", "kms"),
            )
        }
    }
}
impl ScheduleKeyDeletionInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.ScheduleKeyDeletion")
    }
    fn body(&self) -> ScheduleKeyDeletionInputBody {
        ScheduleKeyDeletionInputBody {
            key_id: &self.key_id,
            pending_window_in_days: &self.pending_window_in_days,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`ScheduleKeyDeletionInput`](crate::input::ScheduleKeyDeletionInput)
    pub fn builder() -> crate::input::schedule_key_deletion_input::Builder {
        crate::input::schedule_key_deletion_input::Builder::default()
    }
}

/// See [`SignInput`](crate::input::SignInput)
pub mod sign_input {

    use crate::input::SignInput;
    use crate::model::MessageType;
    use crate::model::SigningAlgorithmSpec;
    use crate::operation::Sign;
    use smithy_types::Blob;
    /// A builder for [`SignInput`](crate::input::SignInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        message: ::std::option::Option<Blob>,
        message_type: ::std::option::Option<MessageType>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
        signing_algorithm: ::std::option::Option<SigningAlgorithmSpec>,
    }
    impl Builder {
        /// <p>Identifies an asymmetric CMK. AWS KMS uses the private key in the asymmetric CMK to sign the
        /// message. The <code>KeyUsage</code> type of the CMK must be <code>SIGN_VERIFY</code>. To find
        /// the <code>KeyUsage</code> of a CMK, use the <a>DescribeKey</a> operation.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a
        /// larger message, provide the message digest.</p>
        /// <p>If you provide a message, AWS KMS generates a hash digest of the message and then signs
        /// it.</p>
        pub fn message(mut self, inp: Blob) -> Self {
            self.message = Some(inp);
            self
        }
        /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
        /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
        /// enter <code>DIGEST</code>.</p>
        pub fn message_type(mut self, inp: MessageType) -> Self {
            self.message_type = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// <p>Specifies the signing algorithm to use when signing the message. </p>
        /// <p>Choose an algorithm that is compatible with the type and size of the specified asymmetric
        /// CMK.</p>
        pub fn signing_algorithm(mut self, inp: SigningAlgorithmSpec) -> Self {
            self.signing_algorithm = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Sign`](crate::operation::Sign)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Sign, ()> {
            let op = Sign::new(SignInput {
                key_id: self.key_id,
                message: self.message,
                message_type: self.message_type,
                grant_tokens: self.grant_tokens,
                signing_algorithm: self.signing_algorithm,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("Sign", "kms"))
        }
    }
}
impl SignInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.Sign")
    }
    fn body(&self) -> SignInputBody {
        SignInputBody {
            key_id: &self.key_id,
            message: &self.message,
            message_type: &self.message_type,
            grant_tokens: &self.grant_tokens,
            signing_algorithm: &self.signing_algorithm,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`SignInput`](crate::input::SignInput)
    pub fn builder() -> crate::input::sign_input::Builder {
        crate::input::sign_input::Builder::default()
    }
}

/// See [`TagResourceInput`](crate::input::TagResourceInput)
pub mod tag_resource_input {

    use crate::input::TagResourceInput;
    use crate::model::Tag;
    use crate::operation::TagResource;
    /// A builder for [`TagResourceInput`](crate::input::TagResourceInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        tags: ::std::option::Option<::std::vec::Vec<Tag>>,
    }
    impl Builder {
        /// <p>Identifies a customer managed CMK in the account and Region.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>One or more tags. </p>
        /// <p>Each tag consists of a tag key and a tag value. The tag value can be an empty (null)
        /// string. </p>
        /// <p>You cannot have more than one tag on a CMK with the same tag key. If you specify an
        /// existing tag key with a different tag value, AWS KMS replaces the current tag value with the
        /// specified one.</p>
        pub fn tags(mut self, inp: ::std::vec::Vec<Tag>) -> Self {
            self.tags = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`TagResource`](crate::operation::TagResource)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<TagResource, ()> {
            let op = TagResource::new(TagResourceInput {
                key_id: self.key_id,
                tags: self.tags,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("TagResource", "kms"),
            )
        }
    }
}
impl TagResourceInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.TagResource")
    }
    fn body(&self) -> TagResourceInputBody {
        TagResourceInputBody {
            key_id: &self.key_id,
            tags: &self.tags,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
}

/// See [`UntagResourceInput`](crate::input::UntagResourceInput)
pub mod untag_resource_input {

    use crate::input::UntagResourceInput;
    use crate::operation::UntagResource;
    /// A builder for [`UntagResourceInput`](crate::input::UntagResourceInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Identifies the CMK from which you are removing tags.</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>One or more tag keys. Specify only the tag keys, not the tag values.</p>
        pub fn tag_keys(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.tag_keys = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`UntagResource`](crate::operation::UntagResource)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UntagResource, ()> {
            let op = UntagResource::new(UntagResourceInput {
                key_id: self.key_id,
                tag_keys: self.tag_keys,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("UntagResource", "kms"),
            )
        }
    }
}
impl UntagResourceInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.UntagResource")
    }
    fn body(&self) -> UntagResourceInputBody {
        UntagResourceInputBody {
            key_id: &self.key_id,
            tag_keys: &self.tag_keys,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
}

/// See [`UpdateAliasInput`](crate::input::UpdateAliasInput)
pub mod update_alias_input {

    use crate::input::UpdateAliasInput;
    use crate::operation::UpdateAlias;
    /// A builder for [`UpdateAliasInput`](crate::input::UpdateAliasInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        alias_name: ::std::option::Option<::std::string::String>,
        target_key_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Identifies the alias that is changing its CMK. This value must begin with
        /// <code>alias/</code> followed by the alias name, such as <code>alias/ExampleAlias</code>. You
        /// cannot use UpdateAlias to change the alias name.</p>
        pub fn alias_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.alias_name = Some(inp.into());
            self
        }
        /// <p>Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a> to associate with the alias. You don't have permission
        /// to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMK</a>.</p>
        /// <p>The CMK must be in the same AWS account and Region as the alias. Also, the new target CMK
        /// must be the same type as the current target CMK (both symmetric or both asymmetric) and they
        /// must have the same key usage. </p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        /// <p>To verify that the alias
        /// is mapped to the correct CMK, use <a>ListAliases</a>.</p>
        pub fn target_key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.target_key_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateAlias`](crate::operation::UpdateAlias)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateAlias, ()> {
            let op = UpdateAlias::new(UpdateAliasInput {
                alias_name: self.alias_name,
                target_key_id: self.target_key_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("UpdateAlias", "kms"),
            )
        }
    }
}
impl UpdateAliasInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.UpdateAlias")
    }
    fn body(&self) -> UpdateAliasInputBody {
        UpdateAliasInputBody {
            alias_name: &self.alias_name,
            target_key_id: &self.target_key_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateAliasInput`](crate::input::UpdateAliasInput)
    pub fn builder() -> crate::input::update_alias_input::Builder {
        crate::input::update_alias_input::Builder::default()
    }
}

/// See [`UpdateCustomKeyStoreInput`](crate::input::UpdateCustomKeyStoreInput)
pub mod update_custom_key_store_input {

    use crate::input::UpdateCustomKeyStoreInput;
    use crate::operation::UpdateCustomKeyStore;
    /// A builder for [`UpdateCustomKeyStoreInput`](crate::input::UpdateCustomKeyStoreInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        custom_key_store_id: ::std::option::Option<::std::string::String>,
        new_custom_key_store_name: ::std::option::Option<::std::string::String>,
        key_store_password: ::std::option::Option<::std::string::String>,
        cloud_hsm_cluster_id: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>Identifies the custom key store that you want to update. Enter the ID of the custom key
        /// store. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
        pub fn custom_key_store_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.custom_key_store_id = Some(inp.into());
            self
        }
        /// <p>Changes the friendly name of the custom key store to the value that you specify. The
        /// custom key store name must be unique in the AWS account.</p>
        pub fn new_custom_key_store_name(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.new_custom_key_store_name = Some(inp.into());
            self
        }
        /// <p>Enter the current password of the <code>kmsuser</code> crypto user (CU) in the AWS CloudHSM
        /// cluster that is associated with the custom key store.</p>
        /// <p>This parameter tells AWS KMS the current password of the <code>kmsuser</code> crypto user
        /// (CU). It does not set or change the password of any users in the AWS CloudHSM cluster.</p>
        pub fn key_store_password(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_store_password = Some(inp.into());
            self
        }
        /// <p>Associates the custom key store with a related AWS CloudHSM cluster. </p>
        /// <p>Enter the cluster ID of the cluster that you used to create the custom key store or a
        /// cluster that shares a backup history and has the same cluster certificate as the original
        /// cluster. You cannot use this parameter to associate a custom key store with an unrelated
        /// cluster. In addition, the replacement cluster must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">fulfill the requirements</a> for
        /// a cluster associated with a custom key store. To view the cluster certificate of a cluster,
        /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
        pub fn cloud_hsm_cluster_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.cloud_hsm_cluster_id = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateCustomKeyStore`](crate::operation::UpdateCustomKeyStore)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateCustomKeyStore, ()> {
            let op = UpdateCustomKeyStore::new(UpdateCustomKeyStoreInput {
                custom_key_store_id: self.custom_key_store_id,
                new_custom_key_store_name: self.new_custom_key_store_name,
                key_store_password: self.key_store_password,
                cloud_hsm_cluster_id: self.cloud_hsm_cluster_id,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("UpdateCustomKeyStore", "kms"),
            )
        }
    }
}
impl UpdateCustomKeyStoreInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.UpdateCustomKeyStore")
    }
    fn body(&self) -> UpdateCustomKeyStoreInputBody {
        UpdateCustomKeyStoreInputBody {
            custom_key_store_id: &self.custom_key_store_id,
            new_custom_key_store_name: &self.new_custom_key_store_name,
            key_store_password: &self.key_store_password,
            cloud_hsm_cluster_id: &self.cloud_hsm_cluster_id,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateCustomKeyStoreInput`](crate::input::UpdateCustomKeyStoreInput)
    pub fn builder() -> crate::input::update_custom_key_store_input::Builder {
        crate::input::update_custom_key_store_input::Builder::default()
    }
}

/// See [`UpdateKeyDescriptionInput`](crate::input::UpdateKeyDescriptionInput)
pub mod update_key_description_input {

    use crate::input::UpdateKeyDescriptionInput;
    use crate::operation::UpdateKeyDescription;
    /// A builder for [`UpdateKeyDescriptionInput`](crate::input::UpdateKeyDescriptionInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        description: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the customer master key (CMK).</p>
        /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>New description for the CMK.</p>
        pub fn description(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs an Operation<[`UpdateKeyDescription`](crate::operation::UpdateKeyDescription)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<UpdateKeyDescription, ()> {
            let op = UpdateKeyDescription::new(UpdateKeyDescriptionInput {
                key_id: self.key_id,
                description: self.description,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op).with_metadata(
                ::smithy_http::operation::Metadata::new("UpdateKeyDescription", "kms"),
            )
        }
    }
}
impl UpdateKeyDescriptionInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.UpdateKeyDescription")
    }
    fn body(&self) -> UpdateKeyDescriptionInputBody {
        UpdateKeyDescriptionInputBody {
            key_id: &self.key_id,
            description: &self.description,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`UpdateKeyDescriptionInput`](crate::input::UpdateKeyDescriptionInput)
    pub fn builder() -> crate::input::update_key_description_input::Builder {
        crate::input::update_key_description_input::Builder::default()
    }
}

/// See [`VerifyInput`](crate::input::VerifyInput)
pub mod verify_input {

    use crate::input::VerifyInput;
    use crate::model::MessageType;
    use crate::model::SigningAlgorithmSpec;
    use crate::operation::Verify;
    use smithy_types::Blob;
    /// A builder for [`VerifyInput`](crate::input::VerifyInput)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        key_id: ::std::option::Option<::std::string::String>,
        message: ::std::option::Option<Blob>,
        message_type: ::std::option::Option<MessageType>,
        signature: ::std::option::Option<Blob>,
        signing_algorithm: ::std::option::Option<SigningAlgorithmSpec>,
        grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// <p>Identifies the asymmetric CMK that will be used to verify the signature. This must be the
        /// same CMK that was used to generate the signature. If you specify a different CMK, the
        /// signature verification fails.</p>
        /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
        /// <p>For example:</p>
        /// <ul>
        /// <li>
        /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias name: <code>alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
        pub fn key_id(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.key_id = Some(inp.into());
            self
        }
        /// <p>Specifies the message that was signed. You can submit a raw message of up to 4096 bytes,
        /// or a hash digest of the message. If you submit a digest, use the <code>MessageType</code>
        /// parameter with a value of <code>DIGEST</code>.</p>
        /// <p>If the message specified here is different from the message that was signed, the signature
        /// verification fails. A message and its hash digest are considered to be the same
        /// message.</p>
        pub fn message(mut self, inp: Blob) -> Self {
            self.message = Some(inp);
            self
        }
        /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
        /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
        /// enter <code>DIGEST</code>.</p>
        /// <important>
        /// <p>Use the <code>DIGEST</code> value only when the value of the <code>Message</code>
        /// parameter is a message digest. If you use the <code>DIGEST</code> value with a raw message,
        /// the security of the verification operation can be compromised.</p>
        /// </important>
        pub fn message_type(mut self, inp: MessageType) -> Self {
            self.message_type = Some(inp);
            self
        }
        /// <p>The signature that the <code>Sign</code> operation generated.</p>
        pub fn signature(mut self, inp: Blob) -> Self {
            self.signature = Some(inp);
            self
        }
        /// <p>The signing algorithm that was used to sign the message. If you submit a different
        /// algorithm, the signature verification fails.</p>
        pub fn signing_algorithm(mut self, inp: SigningAlgorithmSpec) -> Self {
            self.signing_algorithm = Some(inp);
            self
        }
        /// <p>A list of grant tokens.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
        /// <i>AWS Key Management Service Developer Guide</i>.</p>
        pub fn grant_tokens(mut self, inp: ::std::vec::Vec<::std::string::String>) -> Self {
            self.grant_tokens = Some(inp);
            self
        }
        /// Consumes the builder and constructs an Operation<[`Verify`](crate::operation::Verify)>
        pub fn build(
            self,
            _config: &crate::config::Config,
        ) -> ::smithy_http::operation::Operation<Verify, ()> {
            let op = Verify::new(VerifyInput {
                key_id: self.key_id,
                message: self.message,
                message_type: self.message_type,
                signature: self.signature,
                signing_algorithm: self.signing_algorithm,
                grant_tokens: self.grant_tokens,
            });

            #[allow(unused_mut)]
            let mut request = ::smithy_http::operation::Request::new(
                op.build_http_request()
                    .map(::smithy_http::body::SdkBody::from),
            );

            request.config_mut().insert(
                ::aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ),
            );

            request
                .config_mut()
                .insert(::aws_sig_auth::signer::OperationSigningConfig::default_config());
            request
                .config_mut()
                .insert(::aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));

            ::aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );

            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }

            ::aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );

            ::smithy_http::operation::Operation::new(request, op)
                .with_metadata(::smithy_http::operation::Metadata::new("Verify", "kms"))
        }
    }
}
impl VerifyInput {
    pub fn request_builder_base(&self) -> ::http::request::Builder {
        let builder = ::http::request::Builder::new();

        builder
            .method("POST")
            .header("Content-Type", "application/x-amz-json-1.1")
            .header("X-Amz-Target", "TrentService.Verify")
    }
    fn body(&self) -> VerifyInputBody {
        VerifyInputBody {
            key_id: &self.key_id,
            message: &self.message,
            message_type: &self.message_type,
            signature: &self.signature,
            signing_algorithm: &self.signing_algorithm,
            grant_tokens: &self.grant_tokens,
        }
    }
    pub fn build_body(&self) -> ::std::vec::Vec<u8> {
        ::serde_json::to_vec(&self.body()).expect("serialization should succeed")
    }
    pub fn assemble(
        builder: ::http::request::Builder,
        body: ::std::vec::Vec<u8>,
    ) -> ::http::request::Request<::std::vec::Vec<u8>> {
        builder
            .header(::http::header::CONTENT_LENGTH, body.len())
            .body(body)
            .expect("http request should be valid")
    }
    /// Creates a new builder-style object to manufacture [`VerifyInput`](crate::input::VerifyInput)
    pub fn builder() -> crate::input::verify_input::Builder {
        crate::input::verify_input::Builder::default()
    }
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifyInput {
    /// <p>Identifies the asymmetric CMK that will be used to verify the signature. This must be the
    /// same CMK that was used to generate the signature. If you specify a different CMK, the
    /// signature verification fails.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the message that was signed. You can submit a raw message of up to 4096 bytes,
    /// or a hash digest of the message. If you submit a digest, use the <code>MessageType</code>
    /// parameter with a value of <code>DIGEST</code>.</p>
    /// <p>If the message specified here is different from the message that was signed, the signature
    /// verification fails. A message and its hash digest are considered to be the same
    /// message.</p>
    pub message: ::std::option::Option<Blob>,
    /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
    /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
    /// enter <code>DIGEST</code>.</p>
    /// <important>
    /// <p>Use the <code>DIGEST</code> value only when the value of the <code>Message</code>
    /// parameter is a message digest. If you use the <code>DIGEST</code> value with a raw message,
    /// the security of the verification operation can be compromised.</p>
    /// </important>
    pub message_type: ::std::option::Option<MessageType>,
    /// <p>The signature that the <code>Sign</code> operation generated.</p>
    pub signature: ::std::option::Option<Blob>,
    /// <p>The signing algorithm that was used to sign the message. If you submit a different
    /// algorithm, the signature verification fails.</p>
    pub signing_algorithm: ::std::option::Option<SigningAlgorithmSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ::std::fmt::Debug for VerifyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyInput");
        formatter.field("key_id", &self.key_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("message_type", &self.message_type);
        formatter.field("signature", &self.signature);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateKeyDescriptionInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>New description for the CMK.</p>
    pub description: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateCustomKeyStoreInput {
    /// <p>Identifies the custom key store that you want to update. Enter the ID of the custom key
    /// store. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Changes the friendly name of the custom key store to the value that you specify. The
    /// custom key store name must be unique in the AWS account.</p>
    pub new_custom_key_store_name: ::std::option::Option<::std::string::String>,
    /// <p>Enter the current password of the <code>kmsuser</code> crypto user (CU) in the AWS CloudHSM
    /// cluster that is associated with the custom key store.</p>
    /// <p>This parameter tells AWS KMS the current password of the <code>kmsuser</code> crypto user
    /// (CU). It does not set or change the password of any users in the AWS CloudHSM cluster.</p>
    pub key_store_password: ::std::option::Option<::std::string::String>,
    /// <p>Associates the custom key store with a related AWS CloudHSM cluster. </p>
    /// <p>Enter the cluster ID of the cluster that you used to create the custom key store or a
    /// cluster that shares a backup history and has the same cluster certificate as the original
    /// cluster. You cannot use this parameter to associate a custom key store with an unrelated
    /// cluster. In addition, the replacement cluster must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">fulfill the requirements</a> for
    /// a cluster associated with a custom key store. To view the cluster certificate of a cluster,
    /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
    pub cloud_hsm_cluster_id: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for UpdateCustomKeyStoreInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCustomKeyStoreInput");
        formatter.field("custom_key_store_id", &self.custom_key_store_id);
        formatter.field("new_custom_key_store_name", &self.new_custom_key_store_name);
        formatter.field("key_store_password", &"*** Sensitive Data Redacted ***");
        formatter.field("cloud_hsm_cluster_id", &self.cloud_hsm_cluster_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAliasInput {
    /// <p>Identifies the alias that is changing its CMK. This value must begin with
    /// <code>alias/</code> followed by the alias name, such as <code>alias/ExampleAlias</code>. You
    /// cannot use UpdateAlias to change the alias name.</p>
    pub alias_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a> to associate with the alias. You don't have permission
    /// to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMK</a>.</p>
    /// <p>The CMK must be in the same AWS account and Region as the alias. Also, the new target CMK
    /// must be the same type as the current target CMK (both symmetric or both asymmetric) and they
    /// must have the same key usage. </p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    /// <p>To verify that the alias
    /// is mapped to the correct CMK, use <a>ListAliases</a>.</p>
    pub target_key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UntagResourceInput {
    /// <p>Identifies the CMK from which you are removing tags.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more tag keys. Specify only the tag keys, not the tag values.</p>
    pub tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TagResourceInput {
    /// <p>Identifies a customer managed CMK in the account and Region.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more tags. </p>
    /// <p>Each tag consists of a tag key and a tag value. The tag value can be an empty (null)
    /// string. </p>
    /// <p>You cannot have more than one tag on a CMK with the same tag key. If you specify an
    /// existing tag key with a different tag value, AWS KMS replaces the current tag value with the
    /// specified one.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SignInput {
    /// <p>Identifies an asymmetric CMK. AWS KMS uses the private key in the asymmetric CMK to sign the
    /// message. The <code>KeyUsage</code> type of the CMK must be <code>SIGN_VERIFY</code>. To find
    /// the <code>KeyUsage</code> of a CMK, use the <a>DescribeKey</a> operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a
    /// larger message, provide the message digest.</p>
    /// <p>If you provide a message, AWS KMS generates a hash digest of the message and then signs
    /// it.</p>
    pub message: ::std::option::Option<Blob>,
    /// <p>Tells AWS KMS whether the value of the <code>Message</code> parameter is a message or
    /// message digest. The default value, RAW, indicates a message. To indicate a message digest,
    /// enter <code>DIGEST</code>.</p>
    pub message_type: ::std::option::Option<MessageType>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the signing algorithm to use when signing the message. </p>
    /// <p>Choose an algorithm that is compatible with the type and size of the specified asymmetric
    /// CMK.</p>
    pub signing_algorithm: ::std::option::Option<SigningAlgorithmSpec>,
}
impl ::std::fmt::Debug for SignInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SignInput");
        formatter.field("key_id", &self.key_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("message_type", &self.message_type);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("signing_algorithm", &self.signing_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ScheduleKeyDeletionInput {
    /// <p>The unique identifier of the customer master key (CMK) to delete.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The waiting period, specified in number of days. After the waiting period ends, AWS KMS
    /// deletes the customer master key (CMK).</p>
    /// <p>This value is optional. If you include a value, it must be between 7 and 30, inclusive. If
    /// you do not include a value, it defaults to 30.</p>
    pub pending_window_in_days: ::std::option::Option<i32>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RevokeGrantInput {
    /// <p>A unique identifier for the customer master key associated with the grant.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the grant to be revoked.</p>
    pub grant_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetireGrantInput {
    /// <p>Token that identifies the grant to be retired.</p>
    pub grant_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the CMK associated with the grant. </p>
    /// <p>For example: <code>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier of the grant to retire. The grant ID is returned in the response to a
    /// <code>CreateGrant</code> operation.</p>
    /// <ul>
    /// <li>
    /// <p>Grant ID Example -
    /// 0123456789012345678901234567890123456789012345678901234567890123</p>
    /// </li>
    /// </ul>
    pub grant_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReEncryptInput {
    /// <p>Ciphertext of the data to reencrypt.</p>
    pub ciphertext_blob: ::std::option::Option<Blob>,
    /// <p>Specifies the encryption context to use to decrypt the ciphertext. Enter the same
    /// encryption context that was used to encrypt the ciphertext.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub source_encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>Specifies the customer master key (CMK) that
    /// AWS KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the CMK
    /// that was used to encrypt the ciphertext.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
    /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
    /// ensures that you use the CMK that you intend.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub source_key_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the CMK that is used to reencrypt the data. Specify a symmetric or
    /// asymmetric CMK with a <code>KeyUsage</code> value of <code>ENCRYPT_DECRYPT</code>. To find the
    /// <code>KeyUsage</code> value of a CMK, use the <a>DescribeKey</a>
    /// operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub destination_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies that encryption context to use when the reencrypting the data.</p>
    /// <p>A destination encryption context is valid only when the destination CMK is a symmetric
    /// CMK. The standard ciphertext format for asymmetric CMKs does not include fields for
    /// metadata.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub destination_encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to decrypt the ciphertext before it
    /// is reencrypted. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the algorithm
    /// used for symmetric CMKs.</p>
    /// <p>Specify the same algorithm that was used to encrypt the ciphertext. If you specify a
    /// different algorithm, the decrypt attempt fails.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric
    /// CMK.</p>
    pub source_encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to reecrypt the data after it has
    /// decrypted it. The default value, <code>SYMMETRIC_DEFAULT</code>, represents the encryption
    /// algorithm used for symmetric CMKs.</p>
    /// <p>This parameter is required only when the destination CMK is an asymmetric CMK.</p>
    pub destination_encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutKeyPolicyInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the key policy. The only valid value is <code>default</code>.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The key policy to attach to the CMK.</p>
    /// <p>The key policy must meet the following criteria:</p>
    /// <ul>
    /// <li>
    /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
    /// must allow the principal that is making the <code>PutKeyPolicy</code> request to make a
    /// subsequent <code>PutKeyPolicy</code> request on the CMK. This reduces the risk that the
    /// CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>Each statement in the key policy must contain one or more principals. The principals
    /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
    /// (for example, an IAM user or role), you might need to enforce a delay before including the
    /// new principal in a key policy because the new principal might not be immediately visible
    /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
    /// Identity and Access Management User Guide</i>.</p>
    /// </li>
    /// </ul>
    /// <p>The key policy cannot exceed 32 kilobytes (32768 bytes). For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/resource-limits.html">Resource Quotas</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub policy: ::std::option::Option<::std::string::String>,
    /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
    /// <important>
    /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
    /// set this value to true indiscriminately.</p>
    /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// </important>
    /// <p>Use this parameter only when you intend to prevent the principal that is making the
    /// request from making a subsequent <code>PutKeyPolicy</code> request on the CMK.</p>
    /// <p>The default value is false.</p>
    pub bypass_policy_lockout_safety_check: bool,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListRetirableGrantsInput {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The retiring principal for which to list grants. Enter a principal in your AWS
    /// account.</p>
    /// <p>To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
    /// assumed role users. For examples of the ARN syntax for specifying a principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS
    /// Identity and Access Management (IAM)</a> in the Example ARNs section of the
    /// <i>Amazon Web Services General Reference</i>.</p>
    pub retiring_principal: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListResourceTagsInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1 and 50, inclusive. If
    /// you do not include a value, it defaults to 50.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    /// <p>Do not attempt to construct this value. Use only the value of <code>NextMarker</code> from
    /// the truncated response you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListKeysInput {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between
    /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListKeyPoliciesInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between
    /// 1 and 1000, inclusive. If you do not include a value, it defaults to 100.</p>
    /// <p>Only one policy can be attached to a key.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListGrantsInput {
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListAliasesInput {
    /// <p>Lists only aliases that are associated with the specified CMK. Enter a CMK in your AWS
    /// account. </p>
    /// <p>This parameter is optional. If you omit it, <code>ListAliases</code> returns all aliases
    /// in the account and Region.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    /// <p>This value is optional. If you include a value, it must be between 1
    /// and 100, inclusive. If you do not include a value, it defaults to 50.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ImportKeyMaterialInput {
    /// <p>The identifier of the symmetric CMK that receives the imported key material. The CMK's
    /// <code>Origin</code> must be <code>EXTERNAL</code>. This must be the same CMK specified in
    /// the <code>KeyID</code> parameter of the corresponding <a>GetParametersForImport</a>
    /// request.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The import token that you received in the response to a previous <a>GetParametersForImport</a> request. It must be from the same response that contained
    /// the public key that you used to encrypt the key material.</p>
    pub import_token: ::std::option::Option<Blob>,
    /// <p>The encrypted key material to import. The key material must be encrypted with the public
    /// wrapping key that <a>GetParametersForImport</a> returned, using the wrapping
    /// algorithm that you specified in the same <code>GetParametersForImport</code> request.</p>
    pub encrypted_key_material: ::std::option::Option<Blob>,
    /// <p>The time at which the imported key material expires. When the key material expires, AWS KMS
    /// deletes the key material and the CMK becomes unusable. You must omit this parameter when the
    /// <code>ExpirationModel</code> parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>.
    /// Otherwise it is required.</p>
    pub valid_to: ::std::option::Option<Instant>,
    /// <p>Specifies whether the key material expires. The default is
    /// <code>KEY_MATERIAL_EXPIRES</code>, in which case you must include the <code>ValidTo</code>
    /// parameter. When this parameter is set to <code>KEY_MATERIAL_DOES_NOT_EXPIRE</code>, you must
    /// omit the <code>ValidTo</code> parameter.</p>
    pub expiration_model: ::std::option::Option<ExpirationModelType>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPublicKeyInput {
    /// <p>Identifies the asymmetric CMK that includes the public key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetParametersForImportInput {
    /// <p>The identifier of the symmetric CMK into which you will import key material. The
    /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The algorithm you will use to encrypt the key material before importing it with <a>ImportKeyMaterial</a>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-encrypt-key-material.html">Encrypt the Key Material</a>
    /// in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub wrapping_algorithm: ::std::option::Option<AlgorithmSpec>,
    /// <p>The type of wrapping key (public key) to return in the response. Only 2048-bit RSA public
    /// keys are supported.</p>
    pub wrapping_key_spec: ::std::option::Option<WrappingKeySpec>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetKeyRotationStatusInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetKeyPolicyInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the name of the key policy. The only valid name is <code>default</code>. To get
    /// the names of key policies, use <a>ListKeyPolicies</a>.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateRandomInput {
    /// <p>The length of the byte string.</p>
    pub number_of_bytes: ::std::option::Option<i32>,
    /// <p>Generates the random byte string in the AWS CloudHSM cluster that is associated with the
    /// specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateDataKeyWithoutPlaintextInput {
    /// <p>The identifier of the symmetric customer master key (CMK) that encrypts the data
    /// key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>The length of the data key. Use <code>AES_128</code> to generate a 128-bit symmetric key,
    /// or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
    pub key_spec: ::std::option::Option<DataKeySpec>,
    /// <p>The length of the data key in bytes. For example, use the value 64 to generate a 512-bit
    /// data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys),
    /// we recommend that you use the <code>KeySpec</code> field instead of this one.</p>
    pub number_of_bytes: ::std::option::Option<i32>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateDataKeyPairWithoutPlaintextInput {
    /// <p>Specifies the encryption context that will be used when encrypting the private key in the
    /// data key pair.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>Specifies the CMK that encrypts the private key in the data key pair. You must specify a
    /// symmetric CMK. You cannot use an asymmetric CMK or a CMK in a custom key store. To get the
    /// type and origin of your CMK, use the <a>DescribeKey</a> operation. </p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines the type of data key pair that is generated.</p>
    /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
    pub key_pair_spec: ::std::option::Option<DataKeyPairSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateDataKeyPairInput {
    /// <p>Specifies the encryption context that will be used when encrypting the private key in the
    /// data key pair.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>Specifies the symmetric CMK that encrypts the private key in the data key pair. You cannot
    /// specify an asymmetric CMK or a CMK in a custom key store. To get the type and origin of your
    /// CMK, use the <a>DescribeKey</a> operation.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines the type of data key pair that is generated. </p>
    /// <p>The AWS KMS rule that restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC CMKs only to sign and verify, are not effective outside of AWS KMS.</p>
    pub key_pair_spec: ::std::option::Option<DataKeyPairSpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateDataKeyInput {
    /// <p>Identifies the symmetric CMK that encrypts the data key.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the encryption context that will be used when encrypting the data key.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>Specifies the length of the data key in bytes. For example, use the value 64 to generate a
    /// 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data
    /// keys, use the <code>KeySpec</code> parameter.</p>
    /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
    /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    pub number_of_bytes: ::std::option::Option<i32>,
    /// <p>Specifies the length of the data key. Use <code>AES_128</code> to generate a 128-bit
    /// symmetric key, or <code>AES_256</code> to generate a 256-bit symmetric key.</p>
    /// <p>You must specify either the <code>KeySpec</code> or the <code>NumberOfBytes</code>
    /// parameter (but not both) in every <code>GenerateDataKey</code> request.</p>
    pub key_spec: ::std::option::Option<DataKeySpec>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EncryptInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Data to be encrypted.</p>
    pub plaintext: ::std::option::Option<Blob>,
    /// <p>Specifies the encryption context that will be used to encrypt the data.
    /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context. </p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the encryption algorithm that AWS KMS will use to encrypt the plaintext message.
    /// The algorithm must be compatible with the CMK that you specify.</p>
    /// <p>This parameter is required only for asymmetric CMKs. The default value,
    /// <code>SYMMETRIC_DEFAULT</code>, is the algorithm used for symmetric CMKs. If you are using
    /// an asymmetric CMK, we recommend RSAES_OAEP_SHA_256.</p>
    pub encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
}
impl ::std::fmt::Debug for EncryptInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptInput");
        formatter.field("key_id", &self.key_id);
        formatter.field("plaintext", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_context", &self.encryption_context);
        formatter.field("grant_tokens", &self.grant_tokens);
        formatter.field("encryption_algorithm", &self.encryption_algorithm);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnableKeyRotationInput {
    /// <p>Identifies a symmetric customer master key (CMK). You cannot enable automatic rotation of asymmetric CMKs, CMKs with imported key material, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnableKeyInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DisconnectCustomKeyStoreInput {
    /// <p>Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DisableKeyRotationInput {
    /// <p>Identifies a symmetric customer master key (CMK). You cannot enable or disable automatic
    /// rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric CMKs</a>, CMKs
    /// with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key
    /// material</a>, or CMKs in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DisableKeyInput {
    /// <p>A unique identifier for the customer master key (CMK).</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeKeyInput {
    /// <p>Describes the specified customer master key (CMK). </p>
    /// <p>If you specify a predefined AWS alias (an AWS alias with no key ID), KMS associates the
    /// alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys">AWS
    /// managed CMK</a> and returns its <code>KeyId</code> and <code>Arn</code> in the
    /// response.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeCustomKeyStoresInput {
    /// <p>Gets only information about the specified custom key store. Enter the key store ID.</p>
    /// <p>By default, this operation gets information about all custom key stores in the account and
    /// region. To limit the output to a particular custom key store, you can use either the
    /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
    /// both.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Gets only information about the specified custom key store. Enter the friendly name of the
    /// custom key store.</p>
    /// <p>By default, this operation gets information about all custom key stores in the account and
    /// region. To limit the output to a particular custom key store, you can use either the
    /// <code>CustomKeyStoreId</code> or <code>CustomKeyStoreName</code> parameter, but not
    /// both.</p>
    pub custom_key_store_name: ::std::option::Option<::std::string::String>,
    /// <p>Use this parameter to specify the maximum number of items to return. When this
    /// value is present, AWS KMS does not return more than the specified number of items, but it might
    /// return fewer.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>Use this parameter in a subsequent request after you receive a response with
    /// truncated results. Set it to the value of <code>NextMarker</code> from the truncated response
    /// you just received.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteImportedKeyMaterialInput {
    /// <p>Identifies the CMK from which you are deleting imported key material. The
    /// <code>Origin</code> of the CMK must be <code>EXTERNAL</code>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteCustomKeyStoreInput {
    /// <p>Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteAliasInput {
    /// <p>The alias to be deleted. The alias name must begin with <code>alias/</code> followed by
    /// the alias name, such as <code>alias/ExampleAlias</code>.</p>
    pub alias_name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DecryptInput {
    /// <p>Ciphertext to be decrypted. The blob includes metadata.</p>
    pub ciphertext_blob: ::std::option::Option<Blob>,
    /// <p>Specifies the encryption context to use when decrypting the data.
    /// An encryption context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS uses do not support an encryption context.</p>
    /// <p>An <i>encryption context</i> is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric CMK, but it is highly recommended.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    pub encryption_context: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    >,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the customer master key (CMK) that AWS KMS uses to decrypt the ciphertext. Enter a
    /// key ID of the CMK that was used to encrypt the ciphertext.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// If you used a symmetric CMK, AWS KMS can get the CMK from metadata that it adds to the
    /// symmetric ciphertext blob. However, it is always recommended as a best practice. This practice
    /// ensures that you use the CMK that you intend.</p>
    /// <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias name: <code>alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify
    /// the same algorithm that was used to encrypt the data. If you specify a different algorithm,
    /// the <code>Decrypt</code> operation fails.</p>
    /// <p>This parameter is required only when the ciphertext was encrypted under an asymmetric CMK.
    /// The default value, <code>SYMMETRIC_DEFAULT</code>, represents the only supported algorithm
    /// that is valid for symmetric CMKs.</p>
    pub encryption_algorithm: ::std::option::Option<EncryptionAlgorithmSpec>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateKeyInput {
    /// <p>The key policy to attach to the CMK.</p>
    /// <p>If you provide a key policy, it must meet the following criteria:</p>
    /// <ul>
    /// <li>
    /// <p>If you don't set <code>BypassPolicyLockoutSafetyCheck</code> to true, the key policy
    /// must allow the principal that is making the <code>CreateKey</code> request to make a
    /// subsequent <a>PutKeyPolicy</a> request on the CMK. This reduces the risk that
    /// the CMK becomes unmanageable. For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section of the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// </li>
    /// <li>
    /// <p>Each statement in the key policy must contain one or more principals. The principals
    /// in the key policy must exist and be visible to AWS KMS. When you create a new AWS principal
    /// (for example, an IAM user or role), you might need to enforce a delay before including the
    /// new principal in a key policy because the new principal might not be immediately visible
    /// to AWS KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>AWS
    /// Identity and Access Management User Guide</i>.</p>
    /// </li>
    /// </ul>
    /// <p>If you do not provide a key policy, AWS KMS attaches a default key policy to the CMK. For
    /// more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">Default Key Policy</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>. </p>
    /// <p>The key policy size quota is 32 kilobytes (32768 bytes).</p>
    /// <p>For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i>
    /// <i>IAM User Guide</i>
    /// </i>.</p>
    pub policy: ::std::option::Option<::std::string::String>,
    /// <p>A description of the CMK.</p>
    /// <p>Use a description that helps you decide whether the CMK is appropriate for a task.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Determines the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> for which you can use the CMK. The default value
    /// is <code>ENCRYPT_DECRYPT</code>. This parameter is required only for asymmetric CMKs. You
    /// can't change the <code>KeyUsage</code> value after the CMK is created.</p>
    /// <p>Select only one valid value.</p>
    /// <ul>
    /// <li>
    /// <p>For symmetric CMKs, omit the parameter or specify <code>ENCRYPT_DECRYPT</code>.</p>
    /// </li>
    /// <li>
    /// <p>For asymmetric CMKs with RSA key material, specify <code>ENCRYPT_DECRYPT</code> or
    /// <code>SIGN_VERIFY</code>.</p>
    /// </li>
    /// <li>
    /// <p>For asymmetric CMKs with ECC key material, specify <code>SIGN_VERIFY</code>.</p>
    /// </li>
    /// </ul>
    pub key_usage: ::std::option::Option<KeyUsageType>,
    /// <p>Specifies the type of CMK to create. The default value, <code>SYMMETRIC_DEFAULT</code>,
    /// creates a CMK with a 256-bit symmetric key for encryption and decryption. For help choosing a
    /// key spec for your CMK, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html">How to Choose Your CMK
    /// Configuration</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// <p>The <code>CustomerMasterKeySpec</code> determines whether the CMK contains a symmetric key
    /// or an asymmetric key pair. It also determines the encryption algorithms or signing algorithms
    /// that the CMK supports. You can't change the <code>CustomerMasterKeySpec</code> after the CMK
    /// is created. To further restrict the algorithms that can be used with the CMK, use a condition
    /// key in its key policy or IAM policy. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm">kms:EncryptionAlgorithm</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm">kms:Signing Algorithm</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// <important>
    /// <p>
    /// <a href="http://aws.amazon.com/kms/features/#AWS_Service_Integration">AWS services that
    /// are integrated with AWS KMS</a> use symmetric CMKs to protect your data. These
    /// services do not support asymmetric CMKs. For help determining whether a CMK is symmetric or
    /// asymmetric, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html">Identifying Symmetric and Asymmetric
    /// CMKs</a> in the <i>AWS Key Management Service Developer
    /// Guide</i>.</p>
    /// </important>
    /// <p>AWS KMS supports the following key specs for CMKs:</p>
    /// <ul>
    /// <li>
    /// <p>Symmetric key (default)</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SYMMETRIC_DEFAULT</code> (AES-256-GCM)</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Asymmetric RSA key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>RSA_2048</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RSA_3072</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RSA_4096</code>
    /// </p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Asymmetric NIST-recommended elliptic curve key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P256</code> (secp256r1)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P384</code> (secp384r1)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ECC_NIST_P521</code> (secp521r1)</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>Other asymmetric elliptic curve key pairs</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ECC_SECG_P256K1</code> (secp256k1), commonly used for
    /// cryptocurrencies.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub customer_master_key_spec: ::std::option::Option<CustomerMasterKeySpec>,
    /// <p>The source of the key material for the CMK. You cannot change the origin after you create
    /// the CMK. The default is <code>AWS_KMS</code>, which means AWS KMS creates the key
    /// material.</p>
    /// <p>When the parameter value is <code>EXTERNAL</code>, AWS KMS creates a CMK without key
    /// material so that you can import key material from your existing key management infrastructure.
    /// For more information about importing key material into AWS KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing Key Material</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>. This value is valid only for symmetric CMKs.</p>
    /// <p>When the parameter value is <code>AWS_CLOUDHSM</code>, AWS KMS creates the CMK in an AWS KMS
    /// <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and creates its key material in the associated AWS CloudHSM cluster. You must also
    /// use the <code>CustomKeyStoreId</code> parameter to identify the custom key store. This value
    /// is valid only for symmetric CMKs.</p>
    pub origin: ::std::option::Option<OriginType>,
    /// <p>Creates the CMK in the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a> and the key material in its associated
    /// AWS CloudHSM cluster. To create a CMK in a custom key store, you must also specify the
    /// <code>Origin</code> parameter with a value of <code>AWS_CLOUDHSM</code>. The AWS CloudHSM cluster
    /// that is associated with the custom key store must have at least two active HSMs, each in a
    /// different Availability Zone in the Region.</p>
    /// <p>This parameter is valid only for symmetric CMKs. You cannot create an asymmetric CMK in a
    /// custom key store.</p>
    /// <p>To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    /// <p>The response includes the custom key store ID and the ID of the AWS CloudHSM cluster.</p>
    /// <p>This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">Custom Key Store feature</a> feature in AWS KMS, which
    /// combines the convenience and extensive integration of AWS KMS with the isolation and control of a
    /// single-tenant key store.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
    /// <p>A flag to indicate whether to bypass the key policy lockout safety check.</p>
    /// <important>
    /// <p>Setting this value to true increases the risk that the CMK becomes unmanageable. Do not
    /// set this value to true indiscriminately.</p>
    /// <p>For more information, refer to the scenario in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam">Default Key Policy</a> section in the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// </important>
    /// <p>Use this parameter only when you include a policy in the request and you intend to prevent
    /// the principal that is making the request from making a subsequent <a>PutKeyPolicy</a> request on the CMK.</p>
    /// <p>The default value is false.</p>
    pub bypass_policy_lockout_safety_check: bool,
    /// <p>One or more tags. Each tag consists of a tag key and a tag value. Both the tag key and the
    /// tag value are required, but the tag value can be an empty (null) string. </p>
    /// <p>When you add tags to an AWS resource, AWS generates a cost allocation
    /// report with usage and costs aggregated by tags. For information about adding, changing, deleting and listing tags for CMKs,
    /// see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging Keys</a>.</p>
    /// <p>Use this parameter to tag the CMK when it is created. To add tags to an
    /// existing CMK, use the <a>TagResource</a> operation.</p>
    /// <p>To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a> permission in an IAM policy.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<Tag>>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGrantInput {
    /// <p>The unique identifier for the customer master key (CMK) that the grant applies to.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a
    /// different AWS account, you must use the key ARN.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The principal that is given permission to perform the operations that the grant
    /// permits.</p>
    /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, IAM roles, federated
    /// users, and assumed role users. For examples of the ARN syntax to use for specifying a
    /// principal, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access
    /// Management (IAM)</a> in the Example ARNs section of the <i>AWS General
    /// Reference</i>.</p>
    pub grantee_principal: ::std::option::Option<::std::string::String>,
    /// <p>The principal that is given permission to retire the grant by using <a>RetireGrant</a> operation.</p>
    /// <p>To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an AWS
    /// principal. Valid AWS principals include AWS accounts (root), IAM users, federated users, and
    /// assumed role users. For examples of the ARN syntax to use for specifying a principal, see
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam">AWS Identity and Access Management (IAM)</a> in the Example ARNs section of the
    /// <i>AWS General Reference</i>.</p>
    pub retiring_principal: ::std::option::Option<::std::string::String>,
    /// <p>A list of operations that the grant permits.</p>
    pub operations: ::std::option::Option<::std::vec::Vec<GrantOperation>>,
    /// <p>Allows a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operation</a> only when the encryption context matches or includes the encryption
    /// context specified in this structure. For more information about encryption context, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
    /// Context</a> in the <i>
    /// <i>AWS Key Management Service Developer Guide</i>
    /// </i>.</p>
    /// <p>Grant constraints are not applied to operations that do not support an encryption context,
    /// such as cryptographic operations with asymmetric CMKs and management operations, such as
    /// <a>DescribeKey</a> or <a>RetireGrant</a>.</p>
    pub constraints: ::std::option::Option<GrantConstraints>,
    /// <p>A list of grant tokens.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token">Grant Tokens</a> in the
    /// <i>AWS Key Management Service Developer Guide</i>.</p>
    pub grant_tokens: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A friendly name for the grant. Use this value to prevent the unintended
    /// creation of duplicate grants when retrying this request.</p>
    /// <p>When this value is absent, all <code>CreateGrant</code> requests result in a new grant
    /// with a unique <code>GrantId</code> even if all the supplied parameters are identical. This can
    /// result in unintended duplicates when you retry the <code>CreateGrant</code> request.</p>
    /// <p>When this value is present, you can retry a <code>CreateGrant</code> request with
    /// identical parameters; if the grant already exists, the original <code>GrantId</code> is
    /// returned without creating a new grant. Note that the returned grant token is unique with every
    /// <code>CreateGrant</code> request, even when a duplicate <code>GrantId</code> is returned.
    /// All grant tokens for the same grant ID can be used interchangeably.</p>
    pub name: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateCustomKeyStoreInput {
    /// <p>Specifies a friendly name for the custom key store. The name must be unique in your AWS
    /// account.</p>
    pub custom_key_store_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the AWS CloudHSM cluster for the custom key store. Enter the cluster ID of any active
    /// AWS CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID,
    /// use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a> operation.</p>
    pub cloud_hsm_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>Enter the content of the trust anchor certificate for the cluster. This is the content of
    /// the <code>customerCA.crt</code> file that you created when you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html">initialized the cluster</a>.</p>
    pub trust_anchor_certificate: ::std::option::Option<::std::string::String>,
    /// <p>Enter the password of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
    /// <code>kmsuser</code> crypto user
    /// (CU) account</a> in the specified AWS CloudHSM cluster. AWS KMS logs into the cluster as this
    /// user to manage key material on your behalf.</p>
    /// <p>The password must be a string of 7 to 32 characters. Its value is case sensitive.</p>
    /// <p>This parameter tells AWS KMS the <code>kmsuser</code> account password; it does not change
    /// the password in the AWS CloudHSM cluster.</p>
    pub key_store_password: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for CreateCustomKeyStoreInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomKeyStoreInput");
        formatter.field("custom_key_store_name", &self.custom_key_store_name);
        formatter.field("cloud_hsm_cluster_id", &self.cloud_hsm_cluster_id);
        formatter.field("trust_anchor_certificate", &self.trust_anchor_certificate);
        formatter.field("key_store_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAliasInput {
    /// <p>Specifies the alias name. This value must begin with <code>alias/</code> followed by a
    /// name, such as <code>alias/ExampleAlias</code>. </p>
    /// <p>The <code>AliasName</code> value must be string of 1-256 characters. It can contain only alphanumeric characters,
    /// forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <code>alias/aws/</code>. The <code>alias/aws/</code> prefix is reserved
    /// for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMKs</a>.</p>
    pub alias_name: ::std::option::Option<::std::string::String>,
    /// <p>Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK</a>. The CMK must be
    /// in the same AWS Region. </p>
    /// <p>A valid CMK ID is required. If you supply a null or empty string value, this operation
    /// returns an error.</p>
    /// <p>For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and
    /// ARN</a> in the <i>AWS Key Management Service Developer Guide</i>.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub target_key_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ConnectCustomKeyStoreInput {
    /// <p>Enter the key store ID of the custom key store that you want to connect.
    /// To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.</p>
    pub custom_key_store_id: ::std::option::Option<::std::string::String>,
}

#[non_exhaustive]
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CancelKeyDeletionInput {
    /// <p>The unique identifier for the customer master key (CMK) for which to cancel
    /// deletion.</p>
    /// <p>Specify the key ID or the Amazon Resource Name (ARN) of the CMK.</p>
    /// <p>For example:</p>
    /// <ul>
    /// <li>
    /// <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a> or <a>DescribeKey</a>.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
}
