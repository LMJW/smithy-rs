// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

pub struct Config {
    pub(crate) token_provider: Box<dyn crate::idempotency_token::ProvideIdempotencyToken>,
    pub credentials_provider: ::std::sync::Arc<dyn ::auth::ProvideCredentials>,
    pub region: String,
    pub endpoint_provider: ::std::sync::Arc<dyn ::operation::endpoint::ProvideEndpoint>,
}
impl Config {
    pub fn builder() -> ConfigBuilder {
        ConfigBuilder::default()
    }

    /// The signature version 4 service signing name to use in the credential scope when signing requests.
    pub fn signing_service(&self) -> &'static str {
        "dynamodb"
    }
}
#[derive(Default)]
pub struct ConfigBuilder {
    token_provider: Option<Box<dyn crate::idempotency_token::ProvideIdempotencyToken>>,
    credentials_provider: Option<::std::sync::Arc<dyn ::auth::ProvideCredentials>>,
    region: Option<String>,
    endpoint_provider: Option<::std::sync::Arc<dyn ::operation::endpoint::ProvideEndpoint>>,
}
impl ConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn token_provider(
        mut self,
        token_provider: impl crate::idempotency_token::ProvideIdempotencyToken + 'static,
    ) -> Self {
        self.token_provider = Some(Box::new(token_provider));
        self
    }

    pub fn credentials_provider(
        mut self,
        credentials_provider: impl ::auth::ProvideCredentials + 'static,
    ) -> Self {
        self.credentials_provider = Some(::std::sync::Arc::new(credentials_provider));
        self
    }

    pub fn region(mut self, region: impl ToString) -> Self {
        self.region = Some(region.to_string());
        self
    }

    pub fn endpoint_provider(
        mut self,
        endpoint_provider: impl ::operation::endpoint::ProvideEndpoint + 'static,
    ) -> Self {
        self.endpoint_provider = Some(::std::sync::Arc::new(endpoint_provider));
        self
    }

    pub fn build(self) -> Config {
        let region = self.region.unwrap_or_else(|| "us-east-1".to_string());
        Config {
            token_provider: self
                .token_provider
                .unwrap_or_else(|| Box::new(crate::idempotency_token::default_provider())),
            credentials_provider: self
                .credentials_provider
                .unwrap_or_else(|| ::std::sync::Arc::new(::auth::default_provider())),
            region: region.clone(),
            endpoint_provider: self.endpoint_provider.unwrap_or_else(|| {
                ::std::sync::Arc::new(::operation::endpoint::StaticEndpoint::from_service_region(
                    "dynamodb", &region,
                ))
            }),
        }
    }
}
