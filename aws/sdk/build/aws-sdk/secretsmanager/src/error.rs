// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum CancelRotateSecretError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for CancelRotateSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CancelRotateSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            CancelRotateSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            CancelRotateSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            CancelRotateSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            CancelRotateSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for CancelRotateSecretError {
    fn code(&self) -> Option<&str> {
        CancelRotateSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            CancelRotateSecretError::InternalServiceError(_inner) => None,
            CancelRotateSecretError::InvalidParameterError(_inner) => None,
            CancelRotateSecretError::InvalidRequestError(_inner) => None,
            CancelRotateSecretError::ResourceNotFoundError(_inner) => None,
            CancelRotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl CancelRotateSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        CancelRotateSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            CancelRotateSecretError::InternalServiceError(_inner) => _inner.message(),
            CancelRotateSecretError::InvalidParameterError(_inner) => _inner.message(),
            CancelRotateSecretError::InvalidRequestError(_inner) => _inner.message(),
            CancelRotateSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            CancelRotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            CancelRotateSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            CancelRotateSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            CancelRotateSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            CancelRotateSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            CancelRotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for CancelRotateSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            CancelRotateSecretError::InternalServiceError(_inner) => Some(_inner),
            CancelRotateSecretError::InvalidParameterError(_inner) => Some(_inner),
            CancelRotateSecretError::InvalidRequestError(_inner) => Some(_inner),
            CancelRotateSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            CancelRotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum CreateSecretError {
    EncryptionFailure(EncryptionFailure),
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    LimitExceededError(LimitExceededError),
    MalformedPolicyDocumentError(MalformedPolicyDocumentError),
    PreconditionNotMetError(PreconditionNotMetError),
    ResourceExistsError(ResourceExistsError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for CreateSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CreateSecretError::EncryptionFailure(_inner) => _inner.fmt(f),
            CreateSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            CreateSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            CreateSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            CreateSecretError::LimitExceededError(_inner) => _inner.fmt(f),
            CreateSecretError::MalformedPolicyDocumentError(_inner) => _inner.fmt(f),
            CreateSecretError::PreconditionNotMetError(_inner) => _inner.fmt(f),
            CreateSecretError::ResourceExistsError(_inner) => _inner.fmt(f),
            CreateSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            CreateSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for CreateSecretError {
    fn code(&self) -> Option<&str> {
        CreateSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            CreateSecretError::EncryptionFailure(_inner) => None,
            CreateSecretError::InternalServiceError(_inner) => None,
            CreateSecretError::InvalidParameterError(_inner) => None,
            CreateSecretError::InvalidRequestError(_inner) => None,
            CreateSecretError::LimitExceededError(_inner) => None,
            CreateSecretError::MalformedPolicyDocumentError(_inner) => None,
            CreateSecretError::PreconditionNotMetError(_inner) => None,
            CreateSecretError::ResourceExistsError(_inner) => None,
            CreateSecretError::ResourceNotFoundError(_inner) => None,
            CreateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl CreateSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        CreateSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            CreateSecretError::EncryptionFailure(_inner) => _inner.message(),
            CreateSecretError::InternalServiceError(_inner) => _inner.message(),
            CreateSecretError::InvalidParameterError(_inner) => _inner.message(),
            CreateSecretError::InvalidRequestError(_inner) => _inner.message(),
            CreateSecretError::LimitExceededError(_inner) => _inner.message(),
            CreateSecretError::MalformedPolicyDocumentError(_inner) => _inner.message(),
            CreateSecretError::PreconditionNotMetError(_inner) => _inner.message(),
            CreateSecretError::ResourceExistsError(_inner) => _inner.message(),
            CreateSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            CreateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            CreateSecretError::EncryptionFailure(_inner) => Some(_inner.code()),
            CreateSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            CreateSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            CreateSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            CreateSecretError::LimitExceededError(_inner) => Some(_inner.code()),
            CreateSecretError::MalformedPolicyDocumentError(_inner) => Some(_inner.code()),
            CreateSecretError::PreconditionNotMetError(_inner) => Some(_inner.code()),
            CreateSecretError::ResourceExistsError(_inner) => Some(_inner.code()),
            CreateSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            CreateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for CreateSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            CreateSecretError::EncryptionFailure(_inner) => Some(_inner),
            CreateSecretError::InternalServiceError(_inner) => Some(_inner),
            CreateSecretError::InvalidParameterError(_inner) => Some(_inner),
            CreateSecretError::InvalidRequestError(_inner) => Some(_inner),
            CreateSecretError::LimitExceededError(_inner) => Some(_inner),
            CreateSecretError::MalformedPolicyDocumentError(_inner) => Some(_inner),
            CreateSecretError::PreconditionNotMetError(_inner) => Some(_inner),
            CreateSecretError::ResourceExistsError(_inner) => Some(_inner),
            CreateSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            CreateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum DeleteResourcePolicyError {
    InternalServiceError(InternalServiceError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for DeleteResourcePolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DeleteResourcePolicyError::InternalServiceError(_inner) => _inner.fmt(f),
            DeleteResourcePolicyError::InvalidRequestError(_inner) => _inner.fmt(f),
            DeleteResourcePolicyError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DeleteResourcePolicyError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for DeleteResourcePolicyError {
    fn code(&self) -> Option<&str> {
        DeleteResourcePolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            DeleteResourcePolicyError::InternalServiceError(_inner) => None,
            DeleteResourcePolicyError::InvalidRequestError(_inner) => None,
            DeleteResourcePolicyError::ResourceNotFoundError(_inner) => None,
            DeleteResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl DeleteResourcePolicyError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        DeleteResourcePolicyError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            DeleteResourcePolicyError::InternalServiceError(_inner) => _inner.message(),
            DeleteResourcePolicyError::InvalidRequestError(_inner) => _inner.message(),
            DeleteResourcePolicyError::ResourceNotFoundError(_inner) => _inner.message(),
            DeleteResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            DeleteResourcePolicyError::InternalServiceError(_inner) => Some(_inner.code()),
            DeleteResourcePolicyError::InvalidRequestError(_inner) => Some(_inner.code()),
            DeleteResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            DeleteResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for DeleteResourcePolicyError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            DeleteResourcePolicyError::InternalServiceError(_inner) => Some(_inner),
            DeleteResourcePolicyError::InvalidRequestError(_inner) => Some(_inner),
            DeleteResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner),
            DeleteResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum DeleteSecretError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for DeleteSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DeleteSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            DeleteSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            DeleteSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            DeleteSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DeleteSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for DeleteSecretError {
    fn code(&self) -> Option<&str> {
        DeleteSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            DeleteSecretError::InternalServiceError(_inner) => None,
            DeleteSecretError::InvalidParameterError(_inner) => None,
            DeleteSecretError::InvalidRequestError(_inner) => None,
            DeleteSecretError::ResourceNotFoundError(_inner) => None,
            DeleteSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl DeleteSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        DeleteSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            DeleteSecretError::InternalServiceError(_inner) => _inner.message(),
            DeleteSecretError::InvalidParameterError(_inner) => _inner.message(),
            DeleteSecretError::InvalidRequestError(_inner) => _inner.message(),
            DeleteSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            DeleteSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            DeleteSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            DeleteSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            DeleteSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            DeleteSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            DeleteSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for DeleteSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            DeleteSecretError::InternalServiceError(_inner) => Some(_inner),
            DeleteSecretError::InvalidParameterError(_inner) => Some(_inner),
            DeleteSecretError::InvalidRequestError(_inner) => Some(_inner),
            DeleteSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            DeleteSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum DescribeSecretError {
    InternalServiceError(InternalServiceError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for DescribeSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DescribeSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            DescribeSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            DescribeSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for DescribeSecretError {
    fn code(&self) -> Option<&str> {
        DescribeSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            DescribeSecretError::InternalServiceError(_inner) => None,
            DescribeSecretError::ResourceNotFoundError(_inner) => None,
            DescribeSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl DescribeSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        DescribeSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            DescribeSecretError::InternalServiceError(_inner) => _inner.message(),
            DescribeSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            DescribeSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            DescribeSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            DescribeSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            DescribeSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for DescribeSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            DescribeSecretError::InternalServiceError(_inner) => Some(_inner),
            DescribeSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            DescribeSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GetRandomPasswordError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for GetRandomPasswordError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GetRandomPasswordError::InternalServiceError(_inner) => _inner.fmt(f),
            GetRandomPasswordError::InvalidParameterError(_inner) => _inner.fmt(f),
            GetRandomPasswordError::InvalidRequestError(_inner) => _inner.fmt(f),
            GetRandomPasswordError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for GetRandomPasswordError {
    fn code(&self) -> Option<&str> {
        GetRandomPasswordError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            GetRandomPasswordError::InternalServiceError(_inner) => None,
            GetRandomPasswordError::InvalidParameterError(_inner) => None,
            GetRandomPasswordError::InvalidRequestError(_inner) => None,
            GetRandomPasswordError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl GetRandomPasswordError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        GetRandomPasswordError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            GetRandomPasswordError::InternalServiceError(_inner) => _inner.message(),
            GetRandomPasswordError::InvalidParameterError(_inner) => _inner.message(),
            GetRandomPasswordError::InvalidRequestError(_inner) => _inner.message(),
            GetRandomPasswordError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            GetRandomPasswordError::InternalServiceError(_inner) => Some(_inner.code()),
            GetRandomPasswordError::InvalidParameterError(_inner) => Some(_inner.code()),
            GetRandomPasswordError::InvalidRequestError(_inner) => Some(_inner.code()),
            GetRandomPasswordError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for GetRandomPasswordError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            GetRandomPasswordError::InternalServiceError(_inner) => Some(_inner),
            GetRandomPasswordError::InvalidParameterError(_inner) => Some(_inner),
            GetRandomPasswordError::InvalidRequestError(_inner) => Some(_inner),
            GetRandomPasswordError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GetResourcePolicyError {
    InternalServiceError(InternalServiceError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for GetResourcePolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GetResourcePolicyError::InternalServiceError(_inner) => _inner.fmt(f),
            GetResourcePolicyError::InvalidRequestError(_inner) => _inner.fmt(f),
            GetResourcePolicyError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            GetResourcePolicyError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for GetResourcePolicyError {
    fn code(&self) -> Option<&str> {
        GetResourcePolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            GetResourcePolicyError::InternalServiceError(_inner) => None,
            GetResourcePolicyError::InvalidRequestError(_inner) => None,
            GetResourcePolicyError::ResourceNotFoundError(_inner) => None,
            GetResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl GetResourcePolicyError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        GetResourcePolicyError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            GetResourcePolicyError::InternalServiceError(_inner) => _inner.message(),
            GetResourcePolicyError::InvalidRequestError(_inner) => _inner.message(),
            GetResourcePolicyError::ResourceNotFoundError(_inner) => _inner.message(),
            GetResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            GetResourcePolicyError::InternalServiceError(_inner) => Some(_inner.code()),
            GetResourcePolicyError::InvalidRequestError(_inner) => Some(_inner.code()),
            GetResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            GetResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for GetResourcePolicyError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            GetResourcePolicyError::InternalServiceError(_inner) => Some(_inner),
            GetResourcePolicyError::InvalidRequestError(_inner) => Some(_inner),
            GetResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner),
            GetResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum GetSecretValueError {
    DecryptionFailure(DecryptionFailure),
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for GetSecretValueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GetSecretValueError::DecryptionFailure(_inner) => _inner.fmt(f),
            GetSecretValueError::InternalServiceError(_inner) => _inner.fmt(f),
            GetSecretValueError::InvalidParameterError(_inner) => _inner.fmt(f),
            GetSecretValueError::InvalidRequestError(_inner) => _inner.fmt(f),
            GetSecretValueError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            GetSecretValueError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for GetSecretValueError {
    fn code(&self) -> Option<&str> {
        GetSecretValueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            GetSecretValueError::DecryptionFailure(_inner) => None,
            GetSecretValueError::InternalServiceError(_inner) => None,
            GetSecretValueError::InvalidParameterError(_inner) => None,
            GetSecretValueError::InvalidRequestError(_inner) => None,
            GetSecretValueError::ResourceNotFoundError(_inner) => None,
            GetSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl GetSecretValueError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        GetSecretValueError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            GetSecretValueError::DecryptionFailure(_inner) => _inner.message(),
            GetSecretValueError::InternalServiceError(_inner) => _inner.message(),
            GetSecretValueError::InvalidParameterError(_inner) => _inner.message(),
            GetSecretValueError::InvalidRequestError(_inner) => _inner.message(),
            GetSecretValueError::ResourceNotFoundError(_inner) => _inner.message(),
            GetSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            GetSecretValueError::DecryptionFailure(_inner) => Some(_inner.code()),
            GetSecretValueError::InternalServiceError(_inner) => Some(_inner.code()),
            GetSecretValueError::InvalidParameterError(_inner) => Some(_inner.code()),
            GetSecretValueError::InvalidRequestError(_inner) => Some(_inner.code()),
            GetSecretValueError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            GetSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for GetSecretValueError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            GetSecretValueError::DecryptionFailure(_inner) => Some(_inner),
            GetSecretValueError::InternalServiceError(_inner) => Some(_inner),
            GetSecretValueError::InvalidParameterError(_inner) => Some(_inner),
            GetSecretValueError::InvalidRequestError(_inner) => Some(_inner),
            GetSecretValueError::ResourceNotFoundError(_inner) => Some(_inner),
            GetSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ListSecretsError {
    InternalServiceError(InternalServiceError),
    InvalidNextTokenError(InvalidNextTokenError),
    InvalidParameterError(InvalidParameterError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for ListSecretsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ListSecretsError::InternalServiceError(_inner) => _inner.fmt(f),
            ListSecretsError::InvalidNextTokenError(_inner) => _inner.fmt(f),
            ListSecretsError::InvalidParameterError(_inner) => _inner.fmt(f),
            ListSecretsError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for ListSecretsError {
    fn code(&self) -> Option<&str> {
        ListSecretsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            ListSecretsError::InternalServiceError(_inner) => None,
            ListSecretsError::InvalidNextTokenError(_inner) => None,
            ListSecretsError::InvalidParameterError(_inner) => None,
            ListSecretsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl ListSecretsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        ListSecretsError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            ListSecretsError::InternalServiceError(_inner) => _inner.message(),
            ListSecretsError::InvalidNextTokenError(_inner) => _inner.message(),
            ListSecretsError::InvalidParameterError(_inner) => _inner.message(),
            ListSecretsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            ListSecretsError::InternalServiceError(_inner) => Some(_inner.code()),
            ListSecretsError::InvalidNextTokenError(_inner) => Some(_inner.code()),
            ListSecretsError::InvalidParameterError(_inner) => Some(_inner.code()),
            ListSecretsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for ListSecretsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            ListSecretsError::InternalServiceError(_inner) => Some(_inner),
            ListSecretsError::InvalidNextTokenError(_inner) => Some(_inner),
            ListSecretsError::InvalidParameterError(_inner) => Some(_inner),
            ListSecretsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ListSecretVersionIdsError {
    InternalServiceError(InternalServiceError),
    InvalidNextTokenError(InvalidNextTokenError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for ListSecretVersionIdsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ListSecretVersionIdsError::InternalServiceError(_inner) => _inner.fmt(f),
            ListSecretVersionIdsError::InvalidNextTokenError(_inner) => _inner.fmt(f),
            ListSecretVersionIdsError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListSecretVersionIdsError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for ListSecretVersionIdsError {
    fn code(&self) -> Option<&str> {
        ListSecretVersionIdsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            ListSecretVersionIdsError::InternalServiceError(_inner) => None,
            ListSecretVersionIdsError::InvalidNextTokenError(_inner) => None,
            ListSecretVersionIdsError::ResourceNotFoundError(_inner) => None,
            ListSecretVersionIdsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl ListSecretVersionIdsError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        ListSecretVersionIdsError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            ListSecretVersionIdsError::InternalServiceError(_inner) => _inner.message(),
            ListSecretVersionIdsError::InvalidNextTokenError(_inner) => _inner.message(),
            ListSecretVersionIdsError::ResourceNotFoundError(_inner) => _inner.message(),
            ListSecretVersionIdsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            ListSecretVersionIdsError::InternalServiceError(_inner) => Some(_inner.code()),
            ListSecretVersionIdsError::InvalidNextTokenError(_inner) => Some(_inner.code()),
            ListSecretVersionIdsError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            ListSecretVersionIdsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for ListSecretVersionIdsError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            ListSecretVersionIdsError::InternalServiceError(_inner) => Some(_inner),
            ListSecretVersionIdsError::InvalidNextTokenError(_inner) => Some(_inner),
            ListSecretVersionIdsError::ResourceNotFoundError(_inner) => Some(_inner),
            ListSecretVersionIdsError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum PutResourcePolicyError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    MalformedPolicyDocumentError(MalformedPolicyDocumentError),
    PublicPolicyError(PublicPolicyError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for PutResourcePolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            PutResourcePolicyError::InternalServiceError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::InvalidParameterError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::InvalidRequestError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::MalformedPolicyDocumentError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::PublicPolicyError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            PutResourcePolicyError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for PutResourcePolicyError {
    fn code(&self) -> Option<&str> {
        PutResourcePolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            PutResourcePolicyError::InternalServiceError(_inner) => None,
            PutResourcePolicyError::InvalidParameterError(_inner) => None,
            PutResourcePolicyError::InvalidRequestError(_inner) => None,
            PutResourcePolicyError::MalformedPolicyDocumentError(_inner) => None,
            PutResourcePolicyError::PublicPolicyError(_inner) => None,
            PutResourcePolicyError::ResourceNotFoundError(_inner) => None,
            PutResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl PutResourcePolicyError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        PutResourcePolicyError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            PutResourcePolicyError::InternalServiceError(_inner) => _inner.message(),
            PutResourcePolicyError::InvalidParameterError(_inner) => _inner.message(),
            PutResourcePolicyError::InvalidRequestError(_inner) => _inner.message(),
            PutResourcePolicyError::MalformedPolicyDocumentError(_inner) => _inner.message(),
            PutResourcePolicyError::PublicPolicyError(_inner) => _inner.message(),
            PutResourcePolicyError::ResourceNotFoundError(_inner) => _inner.message(),
            PutResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            PutResourcePolicyError::InternalServiceError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::InvalidParameterError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::InvalidRequestError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::MalformedPolicyDocumentError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::PublicPolicyError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            PutResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for PutResourcePolicyError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            PutResourcePolicyError::InternalServiceError(_inner) => Some(_inner),
            PutResourcePolicyError::InvalidParameterError(_inner) => Some(_inner),
            PutResourcePolicyError::InvalidRequestError(_inner) => Some(_inner),
            PutResourcePolicyError::MalformedPolicyDocumentError(_inner) => Some(_inner),
            PutResourcePolicyError::PublicPolicyError(_inner) => Some(_inner),
            PutResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner),
            PutResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum PutSecretValueError {
    EncryptionFailure(EncryptionFailure),
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    LimitExceededError(LimitExceededError),
    ResourceExistsError(ResourceExistsError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for PutSecretValueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            PutSecretValueError::EncryptionFailure(_inner) => _inner.fmt(f),
            PutSecretValueError::InternalServiceError(_inner) => _inner.fmt(f),
            PutSecretValueError::InvalidParameterError(_inner) => _inner.fmt(f),
            PutSecretValueError::InvalidRequestError(_inner) => _inner.fmt(f),
            PutSecretValueError::LimitExceededError(_inner) => _inner.fmt(f),
            PutSecretValueError::ResourceExistsError(_inner) => _inner.fmt(f),
            PutSecretValueError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            PutSecretValueError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for PutSecretValueError {
    fn code(&self) -> Option<&str> {
        PutSecretValueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            PutSecretValueError::EncryptionFailure(_inner) => None,
            PutSecretValueError::InternalServiceError(_inner) => None,
            PutSecretValueError::InvalidParameterError(_inner) => None,
            PutSecretValueError::InvalidRequestError(_inner) => None,
            PutSecretValueError::LimitExceededError(_inner) => None,
            PutSecretValueError::ResourceExistsError(_inner) => None,
            PutSecretValueError::ResourceNotFoundError(_inner) => None,
            PutSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl PutSecretValueError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        PutSecretValueError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            PutSecretValueError::EncryptionFailure(_inner) => _inner.message(),
            PutSecretValueError::InternalServiceError(_inner) => _inner.message(),
            PutSecretValueError::InvalidParameterError(_inner) => _inner.message(),
            PutSecretValueError::InvalidRequestError(_inner) => _inner.message(),
            PutSecretValueError::LimitExceededError(_inner) => _inner.message(),
            PutSecretValueError::ResourceExistsError(_inner) => _inner.message(),
            PutSecretValueError::ResourceNotFoundError(_inner) => _inner.message(),
            PutSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            PutSecretValueError::EncryptionFailure(_inner) => Some(_inner.code()),
            PutSecretValueError::InternalServiceError(_inner) => Some(_inner.code()),
            PutSecretValueError::InvalidParameterError(_inner) => Some(_inner.code()),
            PutSecretValueError::InvalidRequestError(_inner) => Some(_inner.code()),
            PutSecretValueError::LimitExceededError(_inner) => Some(_inner.code()),
            PutSecretValueError::ResourceExistsError(_inner) => Some(_inner.code()),
            PutSecretValueError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            PutSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for PutSecretValueError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            PutSecretValueError::EncryptionFailure(_inner) => Some(_inner),
            PutSecretValueError::InternalServiceError(_inner) => Some(_inner),
            PutSecretValueError::InvalidParameterError(_inner) => Some(_inner),
            PutSecretValueError::InvalidRequestError(_inner) => Some(_inner),
            PutSecretValueError::LimitExceededError(_inner) => Some(_inner),
            PutSecretValueError::ResourceExistsError(_inner) => Some(_inner),
            PutSecretValueError::ResourceNotFoundError(_inner) => Some(_inner),
            PutSecretValueError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum RestoreSecretError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for RestoreSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RestoreSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            RestoreSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            RestoreSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            RestoreSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            RestoreSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for RestoreSecretError {
    fn code(&self) -> Option<&str> {
        RestoreSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            RestoreSecretError::InternalServiceError(_inner) => None,
            RestoreSecretError::InvalidParameterError(_inner) => None,
            RestoreSecretError::InvalidRequestError(_inner) => None,
            RestoreSecretError::ResourceNotFoundError(_inner) => None,
            RestoreSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl RestoreSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        RestoreSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            RestoreSecretError::InternalServiceError(_inner) => _inner.message(),
            RestoreSecretError::InvalidParameterError(_inner) => _inner.message(),
            RestoreSecretError::InvalidRequestError(_inner) => _inner.message(),
            RestoreSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            RestoreSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            RestoreSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            RestoreSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            RestoreSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            RestoreSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            RestoreSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for RestoreSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            RestoreSecretError::InternalServiceError(_inner) => Some(_inner),
            RestoreSecretError::InvalidParameterError(_inner) => Some(_inner),
            RestoreSecretError::InvalidRequestError(_inner) => Some(_inner),
            RestoreSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            RestoreSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum RotateSecretError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for RotateSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RotateSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            RotateSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            RotateSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            RotateSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            RotateSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for RotateSecretError {
    fn code(&self) -> Option<&str> {
        RotateSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            RotateSecretError::InternalServiceError(_inner) => None,
            RotateSecretError::InvalidParameterError(_inner) => None,
            RotateSecretError::InvalidRequestError(_inner) => None,
            RotateSecretError::ResourceNotFoundError(_inner) => None,
            RotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl RotateSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        RotateSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            RotateSecretError::InternalServiceError(_inner) => _inner.message(),
            RotateSecretError::InvalidParameterError(_inner) => _inner.message(),
            RotateSecretError::InvalidRequestError(_inner) => _inner.message(),
            RotateSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            RotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            RotateSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            RotateSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            RotateSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            RotateSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            RotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for RotateSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            RotateSecretError::InternalServiceError(_inner) => Some(_inner),
            RotateSecretError::InvalidParameterError(_inner) => Some(_inner),
            RotateSecretError::InvalidRequestError(_inner) => Some(_inner),
            RotateSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            RotateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum TagResourceError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for TagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TagResourceError::InternalServiceError(_inner) => _inner.fmt(f),
            TagResourceError::InvalidParameterError(_inner) => _inner.fmt(f),
            TagResourceError::InvalidRequestError(_inner) => _inner.fmt(f),
            TagResourceError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            TagResourceError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for TagResourceError {
    fn code(&self) -> Option<&str> {
        TagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            TagResourceError::InternalServiceError(_inner) => None,
            TagResourceError::InvalidParameterError(_inner) => None,
            TagResourceError::InvalidRequestError(_inner) => None,
            TagResourceError::ResourceNotFoundError(_inner) => None,
            TagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl TagResourceError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        TagResourceError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            TagResourceError::InternalServiceError(_inner) => _inner.message(),
            TagResourceError::InvalidParameterError(_inner) => _inner.message(),
            TagResourceError::InvalidRequestError(_inner) => _inner.message(),
            TagResourceError::ResourceNotFoundError(_inner) => _inner.message(),
            TagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            TagResourceError::InternalServiceError(_inner) => Some(_inner.code()),
            TagResourceError::InvalidParameterError(_inner) => Some(_inner.code()),
            TagResourceError::InvalidRequestError(_inner) => Some(_inner.code()),
            TagResourceError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            TagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for TagResourceError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            TagResourceError::InternalServiceError(_inner) => Some(_inner),
            TagResourceError::InvalidParameterError(_inner) => Some(_inner),
            TagResourceError::InvalidRequestError(_inner) => Some(_inner),
            TagResourceError::ResourceNotFoundError(_inner) => Some(_inner),
            TagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum UntagResourceError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for UntagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            UntagResourceError::InternalServiceError(_inner) => _inner.fmt(f),
            UntagResourceError::InvalidParameterError(_inner) => _inner.fmt(f),
            UntagResourceError::InvalidRequestError(_inner) => _inner.fmt(f),
            UntagResourceError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            UntagResourceError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for UntagResourceError {
    fn code(&self) -> Option<&str> {
        UntagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            UntagResourceError::InternalServiceError(_inner) => None,
            UntagResourceError::InvalidParameterError(_inner) => None,
            UntagResourceError::InvalidRequestError(_inner) => None,
            UntagResourceError::ResourceNotFoundError(_inner) => None,
            UntagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl UntagResourceError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        UntagResourceError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            UntagResourceError::InternalServiceError(_inner) => _inner.message(),
            UntagResourceError::InvalidParameterError(_inner) => _inner.message(),
            UntagResourceError::InvalidRequestError(_inner) => _inner.message(),
            UntagResourceError::ResourceNotFoundError(_inner) => _inner.message(),
            UntagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            UntagResourceError::InternalServiceError(_inner) => Some(_inner.code()),
            UntagResourceError::InvalidParameterError(_inner) => Some(_inner.code()),
            UntagResourceError::InvalidRequestError(_inner) => Some(_inner.code()),
            UntagResourceError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            UntagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for UntagResourceError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            UntagResourceError::InternalServiceError(_inner) => Some(_inner),
            UntagResourceError::InvalidParameterError(_inner) => Some(_inner),
            UntagResourceError::InvalidRequestError(_inner) => Some(_inner),
            UntagResourceError::ResourceNotFoundError(_inner) => Some(_inner),
            UntagResourceError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum UpdateSecretError {
    EncryptionFailure(EncryptionFailure),
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    LimitExceededError(LimitExceededError),
    MalformedPolicyDocumentError(MalformedPolicyDocumentError),
    PreconditionNotMetError(PreconditionNotMetError),
    ResourceExistsError(ResourceExistsError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for UpdateSecretError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            UpdateSecretError::EncryptionFailure(_inner) => _inner.fmt(f),
            UpdateSecretError::InternalServiceError(_inner) => _inner.fmt(f),
            UpdateSecretError::InvalidParameterError(_inner) => _inner.fmt(f),
            UpdateSecretError::InvalidRequestError(_inner) => _inner.fmt(f),
            UpdateSecretError::LimitExceededError(_inner) => _inner.fmt(f),
            UpdateSecretError::MalformedPolicyDocumentError(_inner) => _inner.fmt(f),
            UpdateSecretError::PreconditionNotMetError(_inner) => _inner.fmt(f),
            UpdateSecretError::ResourceExistsError(_inner) => _inner.fmt(f),
            UpdateSecretError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            UpdateSecretError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for UpdateSecretError {
    fn code(&self) -> Option<&str> {
        UpdateSecretError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            UpdateSecretError::EncryptionFailure(_inner) => None,
            UpdateSecretError::InternalServiceError(_inner) => None,
            UpdateSecretError::InvalidParameterError(_inner) => None,
            UpdateSecretError::InvalidRequestError(_inner) => None,
            UpdateSecretError::LimitExceededError(_inner) => None,
            UpdateSecretError::MalformedPolicyDocumentError(_inner) => None,
            UpdateSecretError::PreconditionNotMetError(_inner) => None,
            UpdateSecretError::ResourceExistsError(_inner) => None,
            UpdateSecretError::ResourceNotFoundError(_inner) => None,
            UpdateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl UpdateSecretError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        UpdateSecretError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            UpdateSecretError::EncryptionFailure(_inner) => _inner.message(),
            UpdateSecretError::InternalServiceError(_inner) => _inner.message(),
            UpdateSecretError::InvalidParameterError(_inner) => _inner.message(),
            UpdateSecretError::InvalidRequestError(_inner) => _inner.message(),
            UpdateSecretError::LimitExceededError(_inner) => _inner.message(),
            UpdateSecretError::MalformedPolicyDocumentError(_inner) => _inner.message(),
            UpdateSecretError::PreconditionNotMetError(_inner) => _inner.message(),
            UpdateSecretError::ResourceExistsError(_inner) => _inner.message(),
            UpdateSecretError::ResourceNotFoundError(_inner) => _inner.message(),
            UpdateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            UpdateSecretError::EncryptionFailure(_inner) => Some(_inner.code()),
            UpdateSecretError::InternalServiceError(_inner) => Some(_inner.code()),
            UpdateSecretError::InvalidParameterError(_inner) => Some(_inner.code()),
            UpdateSecretError::InvalidRequestError(_inner) => Some(_inner.code()),
            UpdateSecretError::LimitExceededError(_inner) => Some(_inner.code()),
            UpdateSecretError::MalformedPolicyDocumentError(_inner) => Some(_inner.code()),
            UpdateSecretError::PreconditionNotMetError(_inner) => Some(_inner.code()),
            UpdateSecretError::ResourceExistsError(_inner) => Some(_inner.code()),
            UpdateSecretError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            UpdateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for UpdateSecretError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            UpdateSecretError::EncryptionFailure(_inner) => Some(_inner),
            UpdateSecretError::InternalServiceError(_inner) => Some(_inner),
            UpdateSecretError::InvalidParameterError(_inner) => Some(_inner),
            UpdateSecretError::InvalidRequestError(_inner) => Some(_inner),
            UpdateSecretError::LimitExceededError(_inner) => Some(_inner),
            UpdateSecretError::MalformedPolicyDocumentError(_inner) => Some(_inner),
            UpdateSecretError::PreconditionNotMetError(_inner) => Some(_inner),
            UpdateSecretError::ResourceExistsError(_inner) => Some(_inner),
            UpdateSecretError::ResourceNotFoundError(_inner) => Some(_inner),
            UpdateSecretError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum UpdateSecretVersionStageError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    LimitExceededError(LimitExceededError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for UpdateSecretVersionStageError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            UpdateSecretVersionStageError::InternalServiceError(_inner) => _inner.fmt(f),
            UpdateSecretVersionStageError::InvalidParameterError(_inner) => _inner.fmt(f),
            UpdateSecretVersionStageError::InvalidRequestError(_inner) => _inner.fmt(f),
            UpdateSecretVersionStageError::LimitExceededError(_inner) => _inner.fmt(f),
            UpdateSecretVersionStageError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            UpdateSecretVersionStageError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for UpdateSecretVersionStageError {
    fn code(&self) -> Option<&str> {
        UpdateSecretVersionStageError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            UpdateSecretVersionStageError::InternalServiceError(_inner) => None,
            UpdateSecretVersionStageError::InvalidParameterError(_inner) => None,
            UpdateSecretVersionStageError::InvalidRequestError(_inner) => None,
            UpdateSecretVersionStageError::LimitExceededError(_inner) => None,
            UpdateSecretVersionStageError::ResourceNotFoundError(_inner) => None,
            UpdateSecretVersionStageError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl UpdateSecretVersionStageError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        UpdateSecretVersionStageError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            UpdateSecretVersionStageError::InternalServiceError(_inner) => _inner.message(),
            UpdateSecretVersionStageError::InvalidParameterError(_inner) => _inner.message(),
            UpdateSecretVersionStageError::InvalidRequestError(_inner) => _inner.message(),
            UpdateSecretVersionStageError::LimitExceededError(_inner) => _inner.message(),
            UpdateSecretVersionStageError::ResourceNotFoundError(_inner) => _inner.message(),
            UpdateSecretVersionStageError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            UpdateSecretVersionStageError::InternalServiceError(_inner) => Some(_inner.code()),
            UpdateSecretVersionStageError::InvalidParameterError(_inner) => Some(_inner.code()),
            UpdateSecretVersionStageError::InvalidRequestError(_inner) => Some(_inner.code()),
            UpdateSecretVersionStageError::LimitExceededError(_inner) => Some(_inner.code()),
            UpdateSecretVersionStageError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            UpdateSecretVersionStageError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for UpdateSecretVersionStageError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            UpdateSecretVersionStageError::InternalServiceError(_inner) => Some(_inner),
            UpdateSecretVersionStageError::InvalidParameterError(_inner) => Some(_inner),
            UpdateSecretVersionStageError::InvalidRequestError(_inner) => Some(_inner),
            UpdateSecretVersionStageError::LimitExceededError(_inner) => Some(_inner),
            UpdateSecretVersionStageError::ResourceNotFoundError(_inner) => Some(_inner),
            UpdateSecretVersionStageError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum ValidateResourcePolicyError {
    InternalServiceError(InternalServiceError),
    InvalidParameterError(InvalidParameterError),
    InvalidRequestError(InvalidRequestError),
    MalformedPolicyDocumentError(MalformedPolicyDocumentError),
    ResourceNotFoundError(ResourceNotFoundError),

    /// An unexpected error, eg. invalid JSON returned by the service
    Unhandled(Box<dyn ::std::error::Error>),
}
impl ::std::fmt::Display for ValidateResourcePolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ValidateResourcePolicyError::InternalServiceError(_inner) => _inner.fmt(f),
            ValidateResourcePolicyError::InvalidParameterError(_inner) => _inner.fmt(f),
            ValidateResourcePolicyError::InvalidRequestError(_inner) => _inner.fmt(f),
            ValidateResourcePolicyError::MalformedPolicyDocumentError(_inner) => _inner.fmt(f),
            ValidateResourcePolicyError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ValidateResourcePolicyError::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl ::smithy_types::retry::ProvideErrorKind for ValidateResourcePolicyError {
    fn code(&self) -> Option<&str> {
        ValidateResourcePolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<::smithy_types::retry::ErrorKind> {
        match self {
            ValidateResourcePolicyError::InternalServiceError(_inner) => None,
            ValidateResourcePolicyError::InvalidParameterError(_inner) => None,
            ValidateResourcePolicyError::InvalidRequestError(_inner) => None,
            ValidateResourcePolicyError::MalformedPolicyDocumentError(_inner) => None,
            ValidateResourcePolicyError::ResourceNotFoundError(_inner) => None,
            ValidateResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.retryable_error_kind(),
                    None => None,
                }
            }
        }
    }
}
impl ValidateResourcePolicyError {
    pub fn unhandled<E: Into<Box<dyn ::std::error::Error>>>(err: E) -> Self {
        ValidateResourcePolicyError::Unhandled(err.into())
    }
    pub fn message(&self) -> Option<&str> {
        match self {
            ValidateResourcePolicyError::InternalServiceError(_inner) => _inner.message(),
            ValidateResourcePolicyError::InvalidParameterError(_inner) => _inner.message(),
            ValidateResourcePolicyError::InvalidRequestError(_inner) => _inner.message(),
            ValidateResourcePolicyError::MalformedPolicyDocumentError(_inner) => _inner.message(),
            ValidateResourcePolicyError::ResourceNotFoundError(_inner) => _inner.message(),
            ValidateResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.message(),
                    None => None,
                }
            }
        }
    }
    pub fn code(&self) -> Option<&str> {
        match self {
            ValidateResourcePolicyError::InternalServiceError(_inner) => Some(_inner.code()),
            ValidateResourcePolicyError::InvalidParameterError(_inner) => Some(_inner.code()),
            ValidateResourcePolicyError::InvalidRequestError(_inner) => Some(_inner.code()),
            ValidateResourcePolicyError::MalformedPolicyDocumentError(_inner) => {
                Some(_inner.code())
            }
            ValidateResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner.code()),
            ValidateResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => _inner.code(),
                    None => None,
                }
            }
        }
    }
}
impl ::std::error::Error for ValidateResourcePolicyError {
    fn source(&self) -> Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            ValidateResourcePolicyError::InternalServiceError(_inner) => Some(_inner),
            ValidateResourcePolicyError::InvalidParameterError(_inner) => Some(_inner),
            ValidateResourcePolicyError::InvalidRequestError(_inner) => Some(_inner),
            ValidateResourcePolicyError::MalformedPolicyDocumentError(_inner) => Some(_inner),
            ValidateResourcePolicyError::ResourceNotFoundError(_inner) => Some(_inner),
            ValidateResourcePolicyError::Unhandled(_inner) => {
                match _inner.downcast_ref::<::smithy_types::Error>() {
                    Some(_inner) => Some(_inner),
                    None => Some(_inner.as_ref()),
                }
            }
        }
    }
}

/// <p>We can't find the resource that you asked for.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ResourceNotFoundError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for ResourceNotFoundError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundError {
    pub fn code(&self) -> &str {
        "ResourceNotFoundException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundError")?;
        Ok(())
    }
}
impl ::std::error::Error for ResourceNotFoundError {}
/// See [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
pub mod resource_not_found_error {

    use crate::error::ResourceNotFoundError;
    /// A builder for [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
        pub fn build(self) -> ResourceNotFoundError {
            ResourceNotFoundError {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundError {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    pub fn builder() -> crate::error::resource_not_found_error::Builder {
        crate::error::resource_not_found_error::Builder::default()
    }
}

/// <p>The policy document that you provided isn't valid.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MalformedPolicyDocumentError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for MalformedPolicyDocumentError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MalformedPolicyDocumentError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl MalformedPolicyDocumentError {
    pub fn code(&self) -> &str {
        "MalformedPolicyDocumentException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for MalformedPolicyDocumentError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MalformedPolicyDocumentError")?;
        Ok(())
    }
}
impl ::std::error::Error for MalformedPolicyDocumentError {}
/// See [`MalformedPolicyDocumentError`](crate::error::MalformedPolicyDocumentError)
pub mod malformed_policy_document_error {

    use crate::error::MalformedPolicyDocumentError;
    /// A builder for [`MalformedPolicyDocumentError`](crate::error::MalformedPolicyDocumentError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`MalformedPolicyDocumentError`](crate::error::MalformedPolicyDocumentError)
        pub fn build(self) -> MalformedPolicyDocumentError {
            MalformedPolicyDocumentError {
                message: self.message,
            }
        }
    }
}
impl MalformedPolicyDocumentError {
    /// Creates a new builder-style object to manufacture [`MalformedPolicyDocumentError`](crate::error::MalformedPolicyDocumentError)
    pub fn builder() -> crate::error::malformed_policy_document_error::Builder {
        crate::error::malformed_policy_document_error::Builder::default()
    }
}

/// <p>You provided a parameter value that is not valid for the current state of the
/// resource.</p>
/// <p>Possible causes:</p>
/// <ul>
/// <li>
/// <p>You tried to perform the operation on a secret that's currently marked deleted.</p>
/// </li>
/// <li>
/// <p>You tried to enable rotation on a secret that doesn't already have a Lambda function
/// ARN configured and you didn't include such an ARN as a parameter in this call. </p>
/// </li>
/// </ul>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvalidRequestError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for InvalidRequestError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidRequestError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidRequestError {
    pub fn code(&self) -> &str {
        "InvalidRequestException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InvalidRequestError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidRequestError")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidRequestError {}
/// See [`InvalidRequestError`](crate::error::InvalidRequestError)
pub mod invalid_request_error {

    use crate::error::InvalidRequestError;
    /// A builder for [`InvalidRequestError`](crate::error::InvalidRequestError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidRequestError`](crate::error::InvalidRequestError)
        pub fn build(self) -> InvalidRequestError {
            InvalidRequestError {
                message: self.message,
            }
        }
    }
}
impl InvalidRequestError {
    /// Creates a new builder-style object to manufacture [`InvalidRequestError`](crate::error::InvalidRequestError)
    pub fn builder() -> crate::error::invalid_request_error::Builder {
        crate::error::invalid_request_error::Builder::default()
    }
}

/// <p>You provided an invalid value for a parameter.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvalidParameterError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for InvalidParameterError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidParameterError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidParameterError {
    pub fn code(&self) -> &str {
        "InvalidParameterException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InvalidParameterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidParameterError")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidParameterError {}
/// See [`InvalidParameterError`](crate::error::InvalidParameterError)
pub mod invalid_parameter_error {

    use crate::error::InvalidParameterError;
    /// A builder for [`InvalidParameterError`](crate::error::InvalidParameterError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidParameterError`](crate::error::InvalidParameterError)
        pub fn build(self) -> InvalidParameterError {
            InvalidParameterError {
                message: self.message,
            }
        }
    }
}
impl InvalidParameterError {
    /// Creates a new builder-style object to manufacture [`InvalidParameterError`](crate::error::InvalidParameterError)
    pub fn builder() -> crate::error::invalid_parameter_error::Builder {
        crate::error::invalid_parameter_error::Builder::default()
    }
}

/// <p>An error occurred on the server side.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InternalServiceError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for InternalServiceError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServiceError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServiceError {
    pub fn code(&self) -> &str {
        "InternalServiceError"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InternalServiceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServiceError")?;
        Ok(())
    }
}
impl ::std::error::Error for InternalServiceError {}
/// See [`InternalServiceError`](crate::error::InternalServiceError)
pub mod internal_service_error {

    use crate::error::InternalServiceError;
    /// A builder for [`InternalServiceError`](crate::error::InternalServiceError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InternalServiceError`](crate::error::InternalServiceError)
        pub fn build(self) -> InternalServiceError {
            InternalServiceError {
                message: self.message,
            }
        }
    }
}
impl InternalServiceError {
    /// Creates a new builder-style object to manufacture [`InternalServiceError`](crate::error::InternalServiceError)
    pub fn builder() -> crate::error::internal_service_error::Builder {
        crate::error::internal_service_error::Builder::default()
    }
}

/// <p>The request failed because it would exceed one of the Secrets Manager internal limits.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LimitExceededError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for LimitExceededError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LimitExceededError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl LimitExceededError {
    pub fn code(&self) -> &str {
        "LimitExceededException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for LimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "LimitExceededError")?;
        Ok(())
    }
}
impl ::std::error::Error for LimitExceededError {}
/// See [`LimitExceededError`](crate::error::LimitExceededError)
pub mod limit_exceeded_error {

    use crate::error::LimitExceededError;
    /// A builder for [`LimitExceededError`](crate::error::LimitExceededError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`LimitExceededError`](crate::error::LimitExceededError)
        pub fn build(self) -> LimitExceededError {
            LimitExceededError {
                message: self.message,
            }
        }
    }
}
impl LimitExceededError {
    /// Creates a new builder-style object to manufacture [`LimitExceededError`](crate::error::LimitExceededError)
    pub fn builder() -> crate::error::limit_exceeded_error::Builder {
        crate::error::limit_exceeded_error::Builder::default()
    }
}

/// <p>A resource with the ID you requested already exists.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ResourceExistsError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for ResourceExistsError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceExistsError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceExistsError {
    pub fn code(&self) -> &str {
        "ResourceExistsException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for ResourceExistsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceExistsError")?;
        Ok(())
    }
}
impl ::std::error::Error for ResourceExistsError {}
/// See [`ResourceExistsError`](crate::error::ResourceExistsError)
pub mod resource_exists_error {

    use crate::error::ResourceExistsError;
    /// A builder for [`ResourceExistsError`](crate::error::ResourceExistsError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`ResourceExistsError`](crate::error::ResourceExistsError)
        pub fn build(self) -> ResourceExistsError {
            ResourceExistsError {
                message: self.message,
            }
        }
    }
}
impl ResourceExistsError {
    /// Creates a new builder-style object to manufacture [`ResourceExistsError`](crate::error::ResourceExistsError)
    pub fn builder() -> crate::error::resource_exists_error::Builder {
        crate::error::resource_exists_error::Builder::default()
    }
}

/// <p>The request failed because you did not complete all the prerequisite steps.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PreconditionNotMetError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for PreconditionNotMetError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PreconditionNotMetError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl PreconditionNotMetError {
    pub fn code(&self) -> &str {
        "PreconditionNotMetException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for PreconditionNotMetError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "PreconditionNotMetError")?;
        Ok(())
    }
}
impl ::std::error::Error for PreconditionNotMetError {}
/// See [`PreconditionNotMetError`](crate::error::PreconditionNotMetError)
pub mod precondition_not_met_error {

    use crate::error::PreconditionNotMetError;
    /// A builder for [`PreconditionNotMetError`](crate::error::PreconditionNotMetError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`PreconditionNotMetError`](crate::error::PreconditionNotMetError)
        pub fn build(self) -> PreconditionNotMetError {
            PreconditionNotMetError {
                message: self.message,
            }
        }
    }
}
impl PreconditionNotMetError {
    /// Creates a new builder-style object to manufacture [`PreconditionNotMetError`](crate::error::PreconditionNotMetError)
    pub fn builder() -> crate::error::precondition_not_met_error::Builder {
        crate::error::precondition_not_met_error::Builder::default()
    }
}

/// <p>Secrets Manager can't encrypt the protected secret text using the provided KMS key. Check that the
/// customer master key (CMK) is available, enabled, and not in an invalid state. For more
/// information, see <a href="http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How Key State Affects Use of a
/// Customer Master Key</a>.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EncryptionFailure {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for EncryptionFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EncryptionFailure");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EncryptionFailure {
    pub fn code(&self) -> &str {
        "EncryptionFailure"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for EncryptionFailure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EncryptionFailure")?;
        Ok(())
    }
}
impl ::std::error::Error for EncryptionFailure {}
/// See [`EncryptionFailure`](crate::error::EncryptionFailure)
pub mod encryption_failure {

    use crate::error::EncryptionFailure;
    /// A builder for [`EncryptionFailure`](crate::error::EncryptionFailure)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`EncryptionFailure`](crate::error::EncryptionFailure)
        pub fn build(self) -> EncryptionFailure {
            EncryptionFailure {
                message: self.message,
            }
        }
    }
}
impl EncryptionFailure {
    /// Creates a new builder-style object to manufacture [`EncryptionFailure`](crate::error::EncryptionFailure)
    pub fn builder() -> crate::error::encryption_failure::Builder {
        crate::error::encryption_failure::Builder::default()
    }
}

/// <p>The resource policy did not prevent broad access to the secret.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PublicPolicyError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for PublicPolicyError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PublicPolicyError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl PublicPolicyError {
    pub fn code(&self) -> &str {
        "PublicPolicyException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for PublicPolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "PublicPolicyError")?;
        Ok(())
    }
}
impl ::std::error::Error for PublicPolicyError {}
/// See [`PublicPolicyError`](crate::error::PublicPolicyError)
pub mod public_policy_error {

    use crate::error::PublicPolicyError;
    /// A builder for [`PublicPolicyError`](crate::error::PublicPolicyError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`PublicPolicyError`](crate::error::PublicPolicyError)
        pub fn build(self) -> PublicPolicyError {
            PublicPolicyError {
                message: self.message,
            }
        }
    }
}
impl PublicPolicyError {
    /// Creates a new builder-style object to manufacture [`PublicPolicyError`](crate::error::PublicPolicyError)
    pub fn builder() -> crate::error::public_policy_error::Builder {
        crate::error::public_policy_error::Builder::default()
    }
}

/// <p>You provided an invalid <code>NextToken</code> value.</p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvalidNextTokenError {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for InvalidNextTokenError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidNextTokenError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidNextTokenError {
    pub fn code(&self) -> &str {
        "InvalidNextTokenException"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for InvalidNextTokenError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidNextTokenError")?;
        Ok(())
    }
}
impl ::std::error::Error for InvalidNextTokenError {}
/// See [`InvalidNextTokenError`](crate::error::InvalidNextTokenError)
pub mod invalid_next_token_error {

    use crate::error::InvalidNextTokenError;
    /// A builder for [`InvalidNextTokenError`](crate::error::InvalidNextTokenError)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`InvalidNextTokenError`](crate::error::InvalidNextTokenError)
        pub fn build(self) -> InvalidNextTokenError {
            InvalidNextTokenError {
                message: self.message,
            }
        }
    }
}
impl InvalidNextTokenError {
    /// Creates a new builder-style object to manufacture [`InvalidNextTokenError`](crate::error::InvalidNextTokenError)
    pub fn builder() -> crate::error::invalid_next_token_error::Builder {
        crate::error::invalid_next_token_error::Builder::default()
    }
}

/// <p>Secrets Manager can't decrypt the protected secret text using the provided KMS key. </p>
#[non_exhaustive]
#[derive(::serde::Deserialize, ::serde::Serialize, ::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DecryptionFailure {
    #[serde(rename = "Message")]
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub message: ::std::option::Option<::std::string::String>,
}
impl ::std::fmt::Debug for DecryptionFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DecryptionFailure");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl DecryptionFailure {
    pub fn code(&self) -> &str {
        "DecryptionFailure"
    }
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl ::std::fmt::Display for DecryptionFailure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DecryptionFailure")?;
        Ok(())
    }
}
impl ::std::error::Error for DecryptionFailure {}
/// See [`DecryptionFailure`](crate::error::DecryptionFailure)
pub mod decryption_failure {

    use crate::error::DecryptionFailure;
    /// A builder for [`DecryptionFailure`](crate::error::DecryptionFailure)
    #[non_exhaustive]
    #[derive(Debug, Clone, Default)]
    pub struct Builder {
        message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, inp: impl Into<::std::string::String>) -> Self {
            self.message = Some(inp.into());
            self
        }
        /// Consumes the builder and constructs a [`DecryptionFailure`](crate::error::DecryptionFailure)
        pub fn build(self) -> DecryptionFailure {
            DecryptionFailure {
                message: self.message,
            }
        }
    }
}
impl DecryptionFailure {
    /// Creates a new builder-style object to manufacture [`DecryptionFailure`](crate::error::DecryptionFailure)
    pub fn builder() -> crate::error::decryption_failure::Builder {
        crate::error::decryption_failure::Builder::default()
    }
}
