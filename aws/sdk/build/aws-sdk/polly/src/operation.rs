// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the specified pronunciation lexicon stored in an AWS Region. A lexicon which
/// has been deleted is not available for speech synthesis, nor is it possible to retrieve it
/// using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
/// Lexicons</a>.</p>
#[derive(std::clone::Clone)]
pub struct DeleteLexicon {
    _private: (),
}
impl DeleteLexicon {
    /// Creates a new builder-style object to manufacture [`DeleteLexiconInput`](crate::input::DeleteLexiconInput)
    pub fn builder() -> crate::input::delete_lexicon_input::Builder {
        crate::input::delete_lexicon_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::DeleteLexiconOutput, crate::error::DeleteLexiconError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DeleteLexiconError::unhandled(generic)),
            };
            return Err(match error_code {
                "LexiconNotFoundException" => crate::error::DeleteLexiconError {
                    meta: generic,
                    kind: crate::error::DeleteLexiconErrorKind::LexiconNotFoundError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::lexicon_not_found_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::LexiconNotFoundError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::DeleteLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::DeleteLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::DeleteLexiconError {
                    meta: generic,
                    kind: crate::error::DeleteLexiconErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::DeleteLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::DeleteLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::DeleteLexiconError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::delete_lexicon_output::Builder::default();
            let _ = response;
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::DeleteLexiconOutput, crate::error::DeleteLexiconError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for DeleteLexicon {
    type Output = Result<crate::output::DeleteLexiconOutput, crate::error::DeleteLexiconError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns the list of voices that are available for use when requesting speech synthesis.
/// Each voice speaks a specified language, is either male or female, and is identified by an ID,
/// which is the ASCII version of the voice name. </p>
/// <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID
/// for the voice you want from the list of voices returned by
/// <code>DescribeVoices</code>.</p>
/// <p>For example, you want your news reader application to read news in a specific language,
/// but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>
/// operation you can provide the user with a list of available voices to select from.</p>
/// <p> You can optionally specify a language code to filter the available voices. For
/// example, if you specify <code>en-US</code>, the operation returns a list of all available US
/// English voices. </p>
/// <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>
/// action.</p>
#[derive(std::clone::Clone)]
pub struct DescribeVoices {
    _private: (),
}
impl DescribeVoices {
    /// Creates a new builder-style object to manufacture [`DescribeVoicesInput`](crate::input::DescribeVoicesInput)
    pub fn builder() -> crate::input::describe_voices_input::Builder {
        crate::input::describe_voices_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::DescribeVoicesOutput, crate::error::DescribeVoicesError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::DescribeVoicesError::unhandled(generic)),
            };
            return Err(match error_code {
                "InvalidNextTokenException" => crate::error::DescribeVoicesError {
                    meta: generic,
                    kind: crate::error::DescribeVoicesErrorKind::InvalidNextTokenError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::invalid_next_token_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::InvalidNextTokenError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::DescribeVoicesError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::DescribeVoicesError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::DescribeVoicesError {
                    meta: generic,
                    kind: crate::error::DescribeVoicesErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::DescribeVoicesError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::DescribeVoicesError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::DescribeVoicesError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::describe_voices_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::DescribeVoicesOutputBody = if body_slice.is_empty()
            {
                // To enable JSON parsing to succeed, replace an empty body
                // with an empty JSON body. If a member was required, it will fail slightly later
                // during the operation construction phase.
                serde_json::from_slice(b"{}")
                    .map_err(crate::error::DescribeVoicesError::unhandled)?
            } else {
                serde_json::from_slice(response.body().as_ref())
                    .map_err(crate::error::DescribeVoicesError::unhandled)?
            };

            output = output.set_voices(parsed_body.voices);
            output = output.set_next_token(parsed_body.next_token);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::DescribeVoicesOutput, crate::error::DescribeVoicesError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for DescribeVoices {
    type Output = Result<crate::output::DescribeVoicesOutput, crate::error::DescribeVoicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For
/// more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
/// Lexicons</a>.</p>
#[derive(std::clone::Clone)]
pub struct GetLexicon {
    _private: (),
}
impl GetLexicon {
    /// Creates a new builder-style object to manufacture [`GetLexiconInput`](crate::input::GetLexiconInput)
    pub fn builder() -> crate::input::get_lexicon_input::Builder {
        crate::input::get_lexicon_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::GetLexiconOutput, crate::error::GetLexiconError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::GetLexiconError::unhandled(generic)),
            };
            return Err(match error_code {
                "LexiconNotFoundException" => crate::error::GetLexiconError {
                    meta: generic,
                    kind: crate::error::GetLexiconErrorKind::LexiconNotFoundError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::lexicon_not_found_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::LexiconNotFoundError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::GetLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::GetLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::GetLexiconError {
                    meta: generic,
                    kind: crate::error::GetLexiconErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::GetLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::GetLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::GetLexiconError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::get_lexicon_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::GetLexiconOutputBody = if body_slice.is_empty() {
                // To enable JSON parsing to succeed, replace an empty body
                // with an empty JSON body. If a member was required, it will fail slightly later
                // during the operation construction phase.
                serde_json::from_slice(b"{}").map_err(crate::error::GetLexiconError::unhandled)?
            } else {
                serde_json::from_slice(response.body().as_ref())
                    .map_err(crate::error::GetLexiconError::unhandled)?
            };

            output = output.set_lexicon(parsed_body.lexicon);
            output = output.set_lexicon_attributes(parsed_body.lexicon_attributes);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::GetLexiconOutput, crate::error::GetLexiconError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for GetLexicon {
    type Output = Result<crate::output::GetLexiconOutput, crate::error::GetLexiconError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains
/// information about the given speech synthesis task, including the status of the task, and a
/// link to the S3 bucket containing the output of the task.</p>
#[derive(std::clone::Clone)]
pub struct GetSpeechSynthesisTask {
    _private: (),
}
impl GetSpeechSynthesisTask {
    /// Creates a new builder-style object to manufacture [`GetSpeechSynthesisTaskInput`](crate::input::GetSpeechSynthesisTaskInput)
    pub fn builder() -> crate::input::get_speech_synthesis_task_input::Builder {
        crate::input::get_speech_synthesis_task_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::GetSpeechSynthesisTaskOutput,
        crate::error::GetSpeechSynthesisTaskError,
    > {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::GetSpeechSynthesisTaskError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "InvalidTaskIdException" => crate::error::GetSpeechSynthesisTaskError {
                    meta: generic,
                    kind: crate::error::GetSpeechSynthesisTaskErrorKind::InvalidTaskIdError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::invalid_task_id_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::InvalidTaskIdError = if body_slice.is_empty()
                        {
                            // To enable JSON parsing to succeed, replace an empty body
                            // with an empty JSON body. If a member was required, it will fail slightly later
                            // during the operation construction phase.
                            serde_json::from_slice(b"{}")
                                .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                        } else {
                            serde_json::from_slice(response.body().as_ref())
                                .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                        };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::GetSpeechSynthesisTaskError {
                    meta: generic,
                    kind: crate::error::GetSpeechSynthesisTaskErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "SynthesisTaskNotFoundException" => crate::error::GetSpeechSynthesisTaskError {
                    meta: generic,
                    kind: crate::error::GetSpeechSynthesisTaskErrorKind::SynthesisTaskNotFoundError(
                        {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::synthesis_task_not_found_error::Builder::default();
                            let _ = response;

                            let body_slice = response.body().as_ref();

                            let parsed_body: crate::error::SynthesisTaskNotFoundError =
                                if body_slice.is_empty() {
                                    // To enable JSON parsing to succeed, replace an empty body
                                    // with an empty JSON body. If a member was required, it will fail slightly later
                                    // during the operation construction phase.
                                    serde_json::from_slice(b"{}").map_err(
                                        crate::error::GetSpeechSynthesisTaskError::unhandled,
                                    )?
                                } else {
                                    serde_json::from_slice(response.body().as_ref()).map_err(
                                        crate::error::GetSpeechSynthesisTaskError::unhandled,
                                    )?
                                };

                            output = output.set_message(parsed_body.message);
                            output.build()
                        },
                    ),
                },
                _ => crate::error::GetSpeechSynthesisTaskError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::get_speech_synthesis_task_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::GetSpeechSynthesisTaskOutputBody =
                if body_slice.is_empty() {
                    // To enable JSON parsing to succeed, replace an empty body
                    // with an empty JSON body. If a member was required, it will fail slightly later
                    // during the operation construction phase.
                    serde_json::from_slice(b"{}")
                        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                } else {
                    serde_json::from_slice(response.body().as_ref())
                        .map_err(crate::error::GetSpeechSynthesisTaskError::unhandled)?
                };

            output = output.set_synthesis_task(parsed_body.synthesis_task);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::GetSpeechSynthesisTaskOutput,
        crate::error::GetSpeechSynthesisTaskError,
    > {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for GetSpeechSynthesisTask {
    type Output = Result<
        crate::output::GetSpeechSynthesisTaskOutput,
        crate::error::GetSpeechSynthesisTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a list of pronunciation lexicons stored in an AWS Region. For more information,
/// see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
/// Lexicons</a>.</p>
#[derive(std::clone::Clone)]
pub struct ListLexicons {
    _private: (),
}
impl ListLexicons {
    /// Creates a new builder-style object to manufacture [`ListLexiconsInput`](crate::input::ListLexiconsInput)
    pub fn builder() -> crate::input::list_lexicons_input::Builder {
        crate::input::list_lexicons_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::ListLexiconsOutput, crate::error::ListLexiconsError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::ListLexiconsError::unhandled(generic)),
            };
            return Err(match error_code {
                "InvalidNextTokenException" => crate::error::ListLexiconsError {
                    meta: generic,
                    kind: crate::error::ListLexiconsErrorKind::InvalidNextTokenError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::invalid_next_token_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::InvalidNextTokenError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::ListLexiconsError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::ListLexiconsError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::ListLexiconsError {
                    meta: generic,
                    kind: crate::error::ListLexiconsErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::ListLexiconsError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::ListLexiconsError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::ListLexiconsError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::list_lexicons_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::ListLexiconsOutputBody = if body_slice.is_empty() {
                // To enable JSON parsing to succeed, replace an empty body
                // with an empty JSON body. If a member was required, it will fail slightly later
                // during the operation construction phase.
                serde_json::from_slice(b"{}").map_err(crate::error::ListLexiconsError::unhandled)?
            } else {
                serde_json::from_slice(response.body().as_ref())
                    .map_err(crate::error::ListLexiconsError::unhandled)?
            };

            output = output.set_lexicons(parsed_body.lexicons);
            output = output.set_next_token(parsed_body.next_token);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::ListLexiconsOutput, crate::error::ListLexiconsError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for ListLexicons {
    type Output = Result<crate::output::ListLexiconsOutput, crate::error::ListLexiconsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Returns a list of SpeechSynthesisTask objects ordered by their creation date. This
/// operation can filter the tasks by their status, for example, allowing users to list only tasks
/// that are completed.</p>
#[derive(std::clone::Clone)]
pub struct ListSpeechSynthesisTasks {
    _private: (),
}
impl ListSpeechSynthesisTasks {
    /// Creates a new builder-style object to manufacture [`ListSpeechSynthesisTasksInput`](crate::input::ListSpeechSynthesisTasksInput)
    pub fn builder() -> crate::input::list_speech_synthesis_tasks_input::Builder {
        crate::input::list_speech_synthesis_tasks_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::ListSpeechSynthesisTasksOutput,
        crate::error::ListSpeechSynthesisTasksError,
    > {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::ListSpeechSynthesisTasksError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "InvalidNextTokenException" => crate::error::ListSpeechSynthesisTasksError {
                    meta: generic,
                    kind: crate::error::ListSpeechSynthesisTasksErrorKind::InvalidNextTokenError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::invalid_next_token_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::InvalidNextTokenError = if body_slice
                            .is_empty()
                        {
                            // To enable JSON parsing to succeed, replace an empty body
                            // with an empty JSON body. If a member was required, it will fail slightly later
                            // during the operation construction phase.
                            serde_json::from_slice(b"{}")
                                .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                        } else {
                            serde_json::from_slice(response.body().as_ref())
                                .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                        };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::ListSpeechSynthesisTasksError {
                    meta: generic,
                    kind: crate::error::ListSpeechSynthesisTasksErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError = if body_slice
                            .is_empty()
                        {
                            // To enable JSON parsing to succeed, replace an empty body
                            // with an empty JSON body. If a member was required, it will fail slightly later
                            // during the operation construction phase.
                            serde_json::from_slice(b"{}")
                                .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                        } else {
                            serde_json::from_slice(response.body().as_ref())
                                .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                        };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::ListSpeechSynthesisTasksError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::list_speech_synthesis_tasks_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::ListSpeechSynthesisTasksOutputBody =
                if body_slice.is_empty() {
                    // To enable JSON parsing to succeed, replace an empty body
                    // with an empty JSON body. If a member was required, it will fail slightly later
                    // during the operation construction phase.
                    serde_json::from_slice(b"{}")
                        .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                } else {
                    serde_json::from_slice(response.body().as_ref())
                        .map_err(crate::error::ListSpeechSynthesisTasksError::unhandled)?
                };

            output = output.set_next_token(parsed_body.next_token);
            output = output.set_synthesis_tasks(parsed_body.synthesis_tasks);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::ListSpeechSynthesisTasksOutput,
        crate::error::ListSpeechSynthesisTasksError,
    > {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for ListSpeechSynthesisTasks {
    type Output = Result<
        crate::output::ListSpeechSynthesisTasksOutput,
        crate::error::ListSpeechSynthesisTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name
/// already exists in the region, it is overwritten by the new lexicon. Lexicon operations have
/// eventual consistency, therefore, it might take some time before the lexicon is available to
/// the SynthesizeSpeech operation.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing
/// Lexicons</a>.</p>
#[derive(std::clone::Clone)]
pub struct PutLexicon {
    _private: (),
}
impl PutLexicon {
    /// Creates a new builder-style object to manufacture [`PutLexiconInput`](crate::input::PutLexiconInput)
    pub fn builder() -> crate::input::put_lexicon_input::Builder {
        crate::input::put_lexicon_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::PutLexiconOutput, crate::error::PutLexiconError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::PutLexiconError::unhandled(generic)),
            };
            return Err(match error_code {
                "InvalidLexiconException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::InvalidLexiconError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::invalid_lexicon_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::InvalidLexiconError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "LexiconSizeExceededException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::LexiconSizeExceededError({
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::lexicon_size_exceeded_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::LexiconSizeExceededError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "MaxLexemeLengthExceededException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::MaxLexemeLengthExceededError({
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::max_lexeme_length_exceeded_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::MaxLexemeLengthExceededError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "MaxLexiconsNumberExceededException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::MaxLexiconsNumberExceededError({
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::max_lexicons_number_exceeded_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::MaxLexiconsNumberExceededError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "ServiceFailureException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::ServiceFailureError({
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_failure_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::ServiceFailureError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "UnsupportedPlsAlphabetException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::UnsupportedPlsAlphabetError({
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::unsupported_pls_alphabet_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::UnsupportedPlsAlphabetError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                "UnsupportedPlsLanguageException" => crate::error::PutLexiconError {
                    meta: generic,
                    kind: crate::error::PutLexiconErrorKind::UnsupportedPlsLanguageError({
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::unsupported_pls_language_error::Builder::default();
                        let _ = response;

                        let body_slice = response.body().as_ref();

                        let parsed_body: crate::error::UnsupportedPlsLanguageError =
                            if body_slice.is_empty() {
                                // To enable JSON parsing to succeed, replace an empty body
                                // with an empty JSON body. If a member was required, it will fail slightly later
                                // during the operation construction phase.
                                serde_json::from_slice(b"{}")
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            } else {
                                serde_json::from_slice(response.body().as_ref())
                                    .map_err(crate::error::PutLexiconError::unhandled)?
                            };

                        output = output.set_message(parsed_body.message);
                        output.build()
                    }),
                },
                _ => crate::error::PutLexiconError::generic(generic),
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::put_lexicon_output::Builder::default();
            let _ = response;
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::PutLexiconOutput, crate::error::PutLexiconError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for PutLexicon {
    type Output = Result<crate::output::PutLexiconOutput, crate::error::PutLexiconError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Allows the creation of an asynchronous synthesis task, by starting a new
/// <code>SpeechSynthesisTask</code>. This operation requires all the standard information
/// needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the
/// output of the synthesis task and two optional parameters (OutputS3KeyPrefix and SnsTopicArn).
/// Once the synthesis task is created, this operation will return a SpeechSynthesisTask object,
/// which will include an identifier of this task as well as the current status.</p>
#[derive(std::clone::Clone)]
pub struct StartSpeechSynthesisTask {
    _private: (),
}
impl StartSpeechSynthesisTask {
    /// Creates a new builder-style object to manufacture [`StartSpeechSynthesisTaskInput`](crate::input::StartSpeechSynthesisTaskInput)
    pub fn builder() -> crate::input::start_speech_synthesis_task_input::Builder {
        crate::input::start_speech_synthesis_task_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::StartSpeechSynthesisTaskOutput,
        crate::error::StartSpeechSynthesisTaskError,
    > {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => {
                    return Err(crate::error::StartSpeechSynthesisTaskError::unhandled(
                        generic,
                    ))
                }
            };
            return Err(match error_code {
                "EngineNotSupportedException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::EngineNotSupportedError({
                    #[allow(unused_mut)]let mut output = crate::error::engine_not_supported_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::EngineNotSupportedError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidS3BucketException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidS3BucketError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_s3_bucket_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidS3BucketError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidS3KeyException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidS3KeyError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_s3_key_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidS3KeyError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidSampleRateException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSampleRateError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_sample_rate_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidSampleRateError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidSnsTopicArnException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSnsTopicArnError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_sns_topic_arn_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidSnsTopicArnError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidSsmlException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::InvalidSsmlError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_ssml_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidSsmlError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "LanguageNotSupportedException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::LanguageNotSupportedError({
                    #[allow(unused_mut)]let mut output = crate::error::language_not_supported_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::LanguageNotSupportedError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "LexiconNotFoundException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::LexiconNotFoundError({
                    #[allow(unused_mut)]let mut output = crate::error::lexicon_not_found_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::LexiconNotFoundError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "MarksNotSupportedForFormatException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::MarksNotSupportedForFormatError({
                    #[allow(unused_mut)]let mut output = crate::error::marks_not_supported_for_format_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::MarksNotSupportedForFormatError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "ServiceFailureException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::ServiceFailureError({
                    #[allow(unused_mut)]let mut output = crate::error::service_failure_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::ServiceFailureError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "SsmlMarksNotSupportedForTextTypeException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::SsmlMarksNotSupportedForTextTypeError({
                    #[allow(unused_mut)]let mut output = crate::error::ssml_marks_not_supported_for_text_type_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::SsmlMarksNotSupportedForTextTypeError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "TextLengthExceededException" => crate::error::StartSpeechSynthesisTaskError { meta: generic, kind: crate::error::StartSpeechSynthesisTaskErrorKind::TextLengthExceededError({
                    #[allow(unused_mut)]let mut output = crate::error::text_length_exceeded_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::TextLengthExceededError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                _ => crate::error::StartSpeechSynthesisTaskError::generic(generic)
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::start_speech_synthesis_task_output::Builder::default();
            let _ = response;

            let body_slice = response.body().as_ref();

            let parsed_body: crate::serializer::StartSpeechSynthesisTaskOutputBody =
                if body_slice.is_empty() {
                    // To enable JSON parsing to succeed, replace an empty body
                    // with an empty JSON body. If a member was required, it will fail slightly later
                    // during the operation construction phase.
                    serde_json::from_slice(b"{}")
                        .map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                } else {
                    serde_json::from_slice(response.body().as_ref())
                        .map_err(crate::error::StartSpeechSynthesisTaskError::unhandled)?
                };

            output = output.set_synthesis_task(parsed_body.synthesis_task);
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<
        crate::output::StartSpeechSynthesisTaskOutput,
        crate::error::StartSpeechSynthesisTaskError,
    > {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for StartSpeechSynthesisTask {
    type Output = Result<
        crate::output::StartSpeechSynthesisTaskOutput,
        crate::error::StartSpeechSynthesisTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}

/// <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be
/// valid, well-formed SSML. Some alphabets might not be available with all the voices (for
/// example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.
/// For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it
/// Works</a>.</p>
#[derive(std::clone::Clone)]
pub struct SynthesizeSpeech {
    _private: (),
}
impl SynthesizeSpeech {
    /// Creates a new builder-style object to manufacture [`SynthesizeSpeechInput`](crate::input::SynthesizeSpeechInput)
    pub fn builder() -> crate::input::synthesize_speech_input::Builder {
        crate::input::synthesize_speech_input::Builder::default()
    }
    #[allow(clippy::unnecessary_wraps)]
    fn from_response(
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::SynthesizeSpeechOutput, crate::error::SynthesizeSpeechError> {
        if crate::aws_json_errors::is_error(&response) && response.status().as_u16() != 200 {
            let body = serde_json::from_slice(response.body().as_ref())
                .unwrap_or_else(|_| serde_json::json!({}));
            let generic = crate::aws_json_errors::parse_generic_error(&response, &body);

            let error_code = match generic.code() {
                Some(code) => code,
                None => return Err(crate::error::SynthesizeSpeechError::unhandled(generic)),
            };
            return Err(match error_code {
                "EngineNotSupportedException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::EngineNotSupportedError({
                    #[allow(unused_mut)]let mut output = crate::error::engine_not_supported_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::EngineNotSupportedError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidSampleRateException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::InvalidSampleRateError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_sample_rate_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidSampleRateError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "InvalidSsmlException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::InvalidSsmlError({
                    #[allow(unused_mut)]let mut output = crate::error::invalid_ssml_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::InvalidSsmlError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "LanguageNotSupportedException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::LanguageNotSupportedError({
                    #[allow(unused_mut)]let mut output = crate::error::language_not_supported_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::LanguageNotSupportedError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "LexiconNotFoundException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::LexiconNotFoundError({
                    #[allow(unused_mut)]let mut output = crate::error::lexicon_not_found_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::LexiconNotFoundError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "MarksNotSupportedForFormatException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::MarksNotSupportedForFormatError({
                    #[allow(unused_mut)]let mut output = crate::error::marks_not_supported_for_format_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::MarksNotSupportedForFormatError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "ServiceFailureException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::ServiceFailureError({
                    #[allow(unused_mut)]let mut output = crate::error::service_failure_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::ServiceFailureError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "SsmlMarksNotSupportedForTextTypeException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::SsmlMarksNotSupportedForTextTypeError({
                    #[allow(unused_mut)]let mut output = crate::error::ssml_marks_not_supported_for_text_type_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::SsmlMarksNotSupportedForTextTypeError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                "TextLengthExceededException" => crate::error::SynthesizeSpeechError { meta: generic, kind: crate::error::SynthesizeSpeechErrorKind::TextLengthExceededError({
                    #[allow(unused_mut)]let mut output = crate::error::text_length_exceeded_error::Builder::default();
                    let _ = response;
                    
                                        let body_slice = response.body().as_ref();
                    
                                        let parsed_body: crate::error::TextLengthExceededError = if body_slice.is_empty() {
                                            // To enable JSON parsing to succeed, replace an empty body
                                            // with an empty JSON body. If a member was required, it will fail slightly later
                                            // during the operation construction phase.
                                            serde_json::from_slice(b"{}").map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        } else {
                                            serde_json::from_slice(response.body().as_ref()).map_err(crate::error::SynthesizeSpeechError::unhandled)?
                                        };
                                    
                    output = output.set_message(
                        parsed_body.message
                    );
                    output.build()
                })},
                _ => crate::error::SynthesizeSpeechError::generic(generic)
            });
        }
        Ok({
            #[allow(unused_mut)]
            let mut output = crate::output::synthesize_speech_output::Builder::default();
            let _ = response;
            output = output.set_audio_stream(
                crate::http_serde::deser_payload_synthesize_speech_audio_stream(
                    response.body().as_ref(),
                )?,
            );
            output = output.set_content_type(
                crate::http_serde::deser_header_synthesize_speech_content_type(response.headers())
                    .map_err(|_| {
                        crate::error::SynthesizeSpeechError::unhandled(
                            "Failed to parse ContentType from header `Content-Type",
                        )
                    })?,
            );
            output = output.set_request_characters(
                crate::http_serde::deser_header_synthesize_speech_request_characters(
                    response.headers(),
                )
                .map_err(|_| {
                    crate::error::SynthesizeSpeechError::unhandled(
                        "Failed to parse RequestCharacters from header `x-amzn-RequestCharacters",
                    )
                })?,
            );
            output.build()
        })
    }
    pub fn parse_response(
        &self,
        response: &http::response::Response<impl AsRef<[u8]>>,
    ) -> Result<crate::output::SynthesizeSpeechOutput, crate::error::SynthesizeSpeechError> {
        Self::from_response(&response)
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}

impl smithy_http::response::ParseStrictResponse for SynthesizeSpeech {
    type Output =
        Result<crate::output::SynthesizeSpeechOutput, crate::error::SynthesizeSpeechError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        self.parse_response(response)
    }
}
